// SPDX-License-Identifier: GPL-3.0-only
//
// DO NOT EDIT!
//
// Generated from cmd_shell.comspec.cpp.in
//
// %COMSPEC% implementation for Windows

#include <config/cmd_shell.h>

#define WIN32_LEAN_AND_MEAN
#include <Windows.h>

#include <cstdlib>
#include <string>

namespace id::config
{

static int s_cmd_shell_error{};

int get_cmd_shell_error()
{
    return s_cmd_shell_error;
}

std::string cmd_shell_command()
{
    const char *com_spec = std::getenv("COMSPEC");
    if (com_spec == nullptr)
    {
        com_spec = "cmd.exe";
    }
    return com_spec;
}

bool cmd_shell(TimeoutCallback *timeout)
{
    s_cmd_shell_error = 0;
    STARTUPINFO si{};
    si.cb = sizeof(si);
    PROCESS_INFORMATION pi{};
    const std::string command_line{cmd_shell_command()};
    if (CreateProcessA(
            command_line.c_str(), nullptr, nullptr, nullptr, FALSE, CREATE_NEW_CONSOLE, nullptr, nullptr, &si, &pi))
    {
        DWORD status = WaitForSingleObject(pi.hProcess, 100);
        while (WAIT_TIMEOUT == status)
        {
            timeout();
            status = WaitForSingleObject(pi.hProcess, 100);
        }
        CloseHandle(pi.hProcess);
        return true;
    }

    s_cmd_shell_error = GetLastError();
    return false;
}

} // namespace id::config
