We have a ^SuiteSetUp page that contains the only reference to a fixture class name
 * The fixture concerned is ''!-ChatSuiteFixture-!'', a subclass of ''!-SuiteFixture-!''
 * So it is used to run each the storytests in the suite
The ^SuiteSetUp page also defines the keywords for the storytests that are to be selected, in the table with the action ''select or''.
 * This action corresponds to a method in class ''!-SuiteFixture-!''
 * It can be overridden in class ''!-ChatSuiteFixture-!'' to handle storytest filtering in a different way
^SuiteSetUp
 * Each storytest optionally has a keywords table and then a table with an action that returns the fixture to be used to run the rest of the storytest.
 * The action ''chat' here corresponds to a method in the class ''!-ChatSuiteFixture-!''; this method returns a ''!-DoFixture-!'' object that runs the rest of the storytest
^TestChat
^TestChatWithDifferentName
^TestChatWithKeywords
^TestChatWithSkippedKeywords
 * Unfortunately, at the moment it's not possible to run a test by itself, as !-FitNesse-! doesn't run the ^SuiteSetUp in that case
 * Hopefully, Micah Martin will be convinced that it would be a good idea for this to happen

Here's AnotherSuiteFixtureExample, that symbolically links to the storytests here.

To use suite fixtures, we need to specify a different way to run Fit:

!define TEST_RUNNER {fitlibrary.suiteFixture.FitLibraryServer}
