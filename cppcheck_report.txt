common/ant.cpp:44:9: style: The scope of the variable 'kbdchar' can be reduced. [variableScope]
    int kbdchar;
        ^
common/bigflt.cpp:2235:9: style: The scope of the variable 'd' can be reduced. [variableScope]
    int d;
        ^
common/bigflt.cpp:2346:14: style: The scope of the variable 'value' can be reduced. [variableScope]
    unsigned value, overflow;
             ^
common/bigflt.cpp:2272:14: style: Local variable 'd' shadows outer variable [shadowVariable]
    for (int d = 1; d <= dec; d++)
             ^
common/bigflt.cpp:2235:9: note: Shadowed declaration
    int d;
        ^
common/bigflt.cpp:2272:14: note: Shadow variable
    for (int d = 1; d <= dec; d++)
             ^
common/bigflt.cpp:2292:18: style: Local variable 'd' shadows outer variable [shadowVariable]
        for (int d = 0; d < power256; d++)
                 ^
common/bigflt.cpp:2235:9: note: Shadowed declaration
    int d;
        ^
common/bigflt.cpp:2292:18: note: Shadow variable
        for (int d = 0; d < power256; d++)
                 ^
common/bigflt.cpp:2299:18: style: Local variable 'd' shadows outer variable [shadowVariable]
        for (int d = 0; d > power256; d--)
                 ^
common/bigflt.cpp:2235:9: note: Shadowed declaration
    int d;
        ^
common/bigflt.cpp:2299:18: note: Shadow variable
        for (int d = 0; d > power256; d--)
                 ^
common/biginit.cpp:356:16: style: Local variable 'bfparm' shadows outer variable [shadowVariable]
    for (auto &bfparm : bfparms)
               ^
common/biginit.cpp:91:11: note: Shadowed declaration
BFComplex bfparm = { BIG_NULL, BIG_NULL };
          ^
common/biginit.cpp:356:16: note: Shadow variable
    for (auto &bfparm : bfparms)
               ^
common/biginit.cpp:436:16: style: Local variable 'bfparm' shadows outer variable [shadowVariable]
    for (auto &bfparm : bfparms)
               ^
common/biginit.cpp:91:11: note: Shadowed declaration
BFComplex bfparm = { BIG_NULL, BIG_NULL };
          ^
common/biginit.cpp:436:16: note: Shadow variable
    for (auto &bfparm : bfparms)
               ^
common/bignumc.cpp:315:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = bnlength-4; i >= 0; i -= 2)
             ^
common/bignumc.cpp:304:9: note: Shadowed declaration
    int i;
        ^
common/bignumc.cpp:315:14: note: Shadow variable
    for (int i = bnlength-4; i >= 0; i -= 2)
             ^
common/bignumc.cpp:341:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = bnlength-4; i >= 0; i -= 2)
             ^
common/bignumc.cpp:330:9: note: Shadowed declaration
    int i;
        ^
common/bignumc.cpp:341:14: note: Shadow variable
    for (int i = bnlength-4; i >= 0; i -= 2)
             ^
common/calcfrac.cpp:3643:33: style: Variable 'g_reset_periodicity' is reassigned a value before the old one has been used. [redundantAssignment]
            g_reset_periodicity = false;
                                ^
common/calcfrac.cpp:3632:37: note: g_reset_periodicity is assigned
                g_reset_periodicity = true;
                                    ^
common/calcfrac.cpp:3643:33: note: g_reset_periodicity is overwritten
            g_reset_periodicity = false;
                                ^
common/calcfrac.cpp:3643:33: style: Variable 'g_reset_periodicity' is reassigned a value before the old one has been used. [redundantAssignment]
            g_reset_periodicity = false;
                                ^
common/calcfrac.cpp:3640:41: note: g_reset_periodicity is assigned
                    g_reset_periodicity = false;
                                        ^
common/calcfrac.cpp:3643:33: note: g_reset_periodicity is overwritten
            g_reset_periodicity = false;
                                ^
common/calcfrac.cpp:4940:25: style: Variable 'g_reset_periodicity' is reassigned a value before the old one has been used. [redundantAssignment]
    g_reset_periodicity = false;
                        ^
common/calcfrac.cpp:4937:25: note: g_reset_periodicity is assigned
    g_reset_periodicity = true;
                        ^
common/calcfrac.cpp:4940:25: note: g_reset_periodicity is overwritten
    g_reset_periodicity = false;
                        ^
common/calcfrac.cpp:4965:25: style: Variable 'g_reset_periodicity' is reassigned a value before the old one has been used. [redundantAssignment]
    g_reset_periodicity = false;
                        ^
common/calcfrac.cpp:4962:25: note: g_reset_periodicity is assigned
    g_reset_periodicity = true;
                        ^
common/calcfrac.cpp:4965:25: note: g_reset_periodicity is overwritten
    g_reset_periodicity = false;
                        ^
common/calcfrac.cpp:736:17: style: The scope of the variable 'm' can be reduced. [variableScope]
            int m;
                ^
common/calcfrac.cpp:737:17: style: The scope of the variable 'numval' can be reduced. [variableScope]
            int numval;
                ^
common/calcfrac.cpp:738:17: style: The scope of the variable 'flip' can be reduced. [variableScope]
            int flip;
                ^
common/calcfrac.cpp:739:17: style: The scope of the variable 'altern' can be reduced. [variableScope]
            int altern;
                ^
common/calcfrac.cpp:1404:9: style: The scope of the variable 'sqsz' can be reduced. [variableScope]
    int sqsz;  // size of the block being filled
        ^
common/calcfrac.cpp:1783:16: style: The scope of the variable 'theta' can be reduced. [variableScope]
        double theta;
               ^
common/calcfrac.cpp:1816:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
common/calcfrac.cpp:2780:20: style: The scope of the variable 'diff' can be reduced. [variableScope]
            double diff;
                   ^
common/calcfrac.cpp:2925:17: style: The scope of the variable 'lsin45' can be reduced. [variableScope]
    static long lsin45;         // sin 45     degrees
                ^
common/calcfrac.cpp:2926:17: style: The scope of the variable 'lcos22_5' can be reduced. [variableScope]
    static long lcos22_5;       // cos 22.5   degrees
                ^
common/calcfrac.cpp:2927:17: style: The scope of the variable 'lsin22_5' can be reduced. [variableScope]
    static long lsin22_5;       // sin 22.5   degrees
                ^
common/calcfrac.cpp:2928:17: style: The scope of the variable 'lcos11_25' can be reduced. [variableScope]
    static long lcos11_25;      // cos 11.25  degrees
                ^
common/calcfrac.cpp:2929:17: style: The scope of the variable 'lsin11_25' can be reduced. [variableScope]
    static long lsin11_25;      // sin 11.25  degrees
                ^
common/calcfrac.cpp:2930:17: style: The scope of the variable 'lcos5_625' can be reduced. [variableScope]
    static long lcos5_625;      // cos 5.625  degrees
                ^
common/calcfrac.cpp:2931:17: style: The scope of the variable 'lsin5_625' can be reduced. [variableScope]
    static long lsin5_625;      // sin 5.625  degrees
                ^
common/calcfrac.cpp:2932:17: style: The scope of the variable 'ltan22_5' can be reduced. [variableScope]
    static long ltan22_5;       // tan 22.5   degrees
                ^
common/calcfrac.cpp:2933:17: style: The scope of the variable 'ltan11_25' can be reduced. [variableScope]
    static long ltan11_25;      // tan 11.25  degrees
                ^
common/calcfrac.cpp:2934:17: style: The scope of the variable 'ltan5_625' can be reduced. [variableScope]
    static long ltan5_625;      // tan 5.625  degrees
                ^
common/calcfrac.cpp:2935:17: style: The scope of the variable 'ltan2_8125' can be reduced. [variableScope]
    static long ltan2_8125;     // tan 2.8125 degrees
                ^
common/calcfrac.cpp:2936:17: style: The scope of the variable 'ltan1_4063' can be reduced. [variableScope]
    static long ltan1_4063;     // tan 1.4063 degrees
                ^
common/calcfrac.cpp:2937:17: style: The scope of the variable 'reset_fudge' can be reduced. [variableScope]
    static long reset_fudge = -1;
                ^
common/calcfrac.cpp:3204:11: style: The scope of the variable 'f_mag' can be reduced. [variableScope]
    float f_mag, f_tmp, pot;
          ^
common/calcfrac.cpp:3204:18: style: The scope of the variable 'f_tmp' can be reduced. [variableScope]
    float f_mag, f_tmp, pot;
                 ^
common/calcfrac.cpp:3763:9: style: The scope of the variable 'color' can be reduced. [variableScope]
    int color;
        ^
common/calcfrac.cpp:4609:15: style: The scope of the variable 'tp2' can be reduced. [variableScope]
        tess *tp2;
              ^
common/calcfrac.cpp:4934:19: style: The scope of the variable 'i' can be reduced. [variableScope]
    int colcolor, i;
                  ^
common/calcfrac.cpp:4959:19: style: The scope of the variable 'i' can be reduced. [variableScope]
    int rowcolor, i;
                  ^
common/calcfrac.cpp:5109:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, j;
        ^
common/calcfrac.cpp:5109:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j;
           ^
common/calcfrac.cpp:5125:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, j;
        ^
common/calcfrac.cpp:5125:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j;
           ^
common/calcfrac.cpp:4030:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = 0; i < halfblock; ++i)
             ^
common/calcfrac.cpp:3779:9: note: Shadowed declaration
    int i = y/maxblock;
        ^
common/calcfrac.cpp:4030:14: note: Shadow variable
    for (int i = 0; i < halfblock; ++i)
             ^
common/calcfrac.cpp:4051:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = (g_i_x_stop+g_xx_start+1)/2; --i >= g_xx_start;)
                     ^
common/calcfrac.cpp:3779:9: note: Shadowed declaration
    int i = y/maxblock;
        ^
common/calcfrac.cpp:4051:22: note: Shadow variable
            for (int i = (g_i_x_stop+g_xx_start+1)/2; --i >= g_xx_start;)
                     ^
common/calcfrac.cpp:4063:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < halfblock; ++i)
                 ^
common/calcfrac.cpp:3779:9: note: Shadowed declaration
    int i = y/maxblock;
        ^
common/calcfrac.cpp:4063:18: note: Shadow variable
        for (int i = 0; i < halfblock; ++i)
                 ^
common/calcfrac.cpp:4249:9: style: Local variable 'saved' shadows outer variable [shadowVariable]
    int saved = 0;
        ^
common/calcfrac.cpp:113:17: note: Shadowed declaration
static DComplex saved{};
                ^
common/calcfrac.cpp:4249:9: note: Shadow variable
    int saved = 0;
        ^
common/calcfrac.cpp:1435:13: style: Variable 'tC' is assigned a value that is never used. [unreadVariable]
            count_to_int(g_diffusion_counter, colo, rowo);
            ^
common/calcfrac.cpp:1490:13: style: Variable 'tC' is assigned a value that is never used. [unreadVariable]
            count_to_int(g_diffusion_counter, colo, rowo);
            ^
common/calcfrac.cpp:1546:9: style: Variable 'tC' is assigned a value that is never used. [unreadVariable]
        count_to_int(g_diffusion_counter, colo, rowo);
        ^
common/calcfrac.cpp:2062:0: information: Skipping configuration 'MINSAVEDAND' since the value of 'MINSAVEDAND' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (oldcoloriter < MINSAVEDAND)
^
common/calcfrac.cpp:2064:0: information: Skipping configuration 'MINSAVEDAND' since the value of 'MINSAVEDAND' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        oldcoloriter = MINSAVEDAND;
^
common/calcfrac.cpp:2148:0: information: Skipping configuration 'MINSAVEDAND' since the value of 'MINSAVEDAND' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        savedand = MINSAVEDAND;
^
common/cmdfiles.cpp:1726:23: style: Condition 'j<1' is always false [knownConditionTrueFalse]
                if (j < 1 || j >= 16384 || i >= totparms)
                      ^
common/cmdfiles.cpp:1723:19: note: Assuming that condition 'j<0' is not redundant
            if (j < 0) // striping
                  ^
common/cmdfiles.cpp:1725:21: note: Assignment 'j=-j', assigned value is 0
                j = -j;
                    ^
common/cmdfiles.cpp:1726:23: note: Condition 'j<1' is always false
                if (j < 1 || j >= 16384 || i >= totparms)
                      ^
common/cmdfiles.cpp:2811:25: style: Condition 'numval!=0' is always true [knownConditionTrueFalse]
        else if (numval != 0)
                        ^
common/cmdfiles.cpp:2795:44: note: Assuming that condition 'numval==0' is not redundant
        if ((charval[0] == 'n') || (numval == 0))
                                           ^
common/cmdfiles.cpp:2811:25: note: Condition 'numval!=0' is always true
        else if (numval != 0)
                        ^
common/cmdfiles.cpp:1848:14: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        std::sscanf(value, "%x", &numval);
             ^
common/cmdfiles.cpp:3605:22: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
                std::sscanf(value, "%x", &hexval);
                     ^
common/cmdfiles.cpp:1878:13: warning: Either the condition 'value==nullptr' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
            ++value;
            ^
common/cmdfiles.cpp:1874:23: note: Assuming that condition 'value==nullptr' is not redundant
            if (value == nullptr)
                      ^
common/cmdfiles.cpp:1878:13: note: Null pointer addition
            ++value;
            ^
common/cmdfiles.cpp:3854:9: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    int tmp, max_str;
        ^
common/cmdfiles.cpp:3886:16: style: The scope of the variable 'row' can be reduced. [variableScope]
    static int row = 1;
               ^
common/cmdfiles.cpp:836:18: style:inconclusive: Function 'cmdarg' argument 1 names different: declaration 'argument' definition 'curarg'. [funcArgNamesDifferent]
int cmdarg(char *curarg, cmd_file mode) // process a single argument
                 ^
common/cmdfiles.cpp:66:18: note: Function 'cmdarg' argument 1 names different: declaration 'argument' definition 'curarg'.
int cmdarg(char *argument, cmd_file mode);
                 ^
common/cmdfiles.cpp:836:18: note: Function 'cmdarg' argument 1 names different: declaration 'argument' definition 'curarg'.
int cmdarg(char *curarg, cmd_file mode) // process a single argument
                 ^
common/cmdfiles.cpp:1709:16: style: Local variable 'j' shadows outer variable [shadowVariable]
        int i, j, entries, prev;
               ^
common/cmdfiles.cpp:863:9: note: Shadowed declaration
    int j;
        ^
common/cmdfiles.cpp:1709:16: note: Shadow variable
        int i, j, entries, prev;
               ^
common/cmdfiles.cpp:1760:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < g_iteration_ranges_len; ++i)
                 ^
common/cmdfiles.cpp:1709:13: note: Shadowed declaration
        int i, j, entries, prev;
            ^
common/cmdfiles.cpp:1760:18: note: Shadow variable
        for (int i = 0; i < g_iteration_ranges_len; ++i)
                 ^
common/cmdfiles.cpp:1998:13: style: Local variable 'j' shadows outer variable [shadowVariable]
        int j = -1;
            ^
common/cmdfiles.cpp:863:9: note: Shadowed declaration
    int j;
        ^
common/cmdfiles.cpp:1998:13: note: Shadow variable
        int j = -1;
            ^
common/cmdfiles.cpp:3575:18: style: Consider using std::fill or std::generate algorithm instead of a raw loop. [useStlAlgorithm]
            elem = BLACK*16 + WHITE;
                 ^
common/cmdfiles.cpp:1178:27: warning: Conversion of string literal "Don't call standard I/O without a console on Windows" to bool always evaluates to true. [incorrectStringBooleanError]
            _ASSERTE(0 && "Don't call standard I/O without a console on Windows");
                          ^
common/diskvid.cpp:186:20: style: Condition 'cache_size==64' is always true [knownConditionTrueFalse]
    if (cache_size == 64)
                   ^
common/diskvid.cpp:183:18: note: Assignment 'cache_size=64', assigned value is 64
    cache_size = CACHEMAX;
                 ^
common/diskvid.cpp:186:20: note: Condition 'cache_size==64' is always true
    if (cache_size == 64)
                   ^
common/diskvid.cpp:185:19: style: C-style pointer casting [cstyleCast]
    cache_start = (cache *)malloc(longtmp);
                  ^
common/diskvid.cpp:334:10: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char buf[41];
         ^
common/diskvid.cpp:404:10: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char buf[41];
         ^
common/diskvid.cpp:239:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < headerlength; i++)
                 ^
common/diskvid.cpp:224:9: note: Shadowed declaration
    int i = (short)memorysize & (BLOCKLEN-1);
        ^
common/diskvid.cpp:239:18: note: Shadow variable
        for (int i = 0; i < headerlength; i++)
                 ^
common/diskvid.cpp:625:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < BLOCKLEN; ++i)
                 ^
common/diskvid.cpp:594:9: note: Shadowed declaration
    int i;
        ^
common/diskvid.cpp:625:18: note: Shadow variable
        for (int i = 0; i < BLOCKLEN; ++i)
                 ^
common/diskvid.cpp:631:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < BLOCKLEN/2; ++i)
                 ^
common/diskvid.cpp:594:9: note: Shadowed declaration
    int i;
        ^
common/diskvid.cpp:631:18: note: Shadow variable
        for (int i = 0; i < BLOCKLEN/2; ++i)
                 ^
common/diskvid.cpp:639:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < BLOCKLEN/4; ++i)
                 ^
common/diskvid.cpp:594:9: note: Shadowed declaration
    int i;
        ^
common/diskvid.cpp:639:18: note: Shadow variable
        for (int i = 0; i < BLOCKLEN/4; ++i)
                 ^
common/diskvid.cpp:649:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < BLOCKLEN/8; ++i)
                 ^
common/diskvid.cpp:594:9: note: Shadowed declaration
    int i;
        ^
common/diskvid.cpp:649:18: note: Shadow variable
        for (int i = 0; i < BLOCKLEN/8; ++i)
                 ^
common/diskvid.cpp:209:14: style: Consider using std::fill algorithm instead of a raw loop. [useStlAlgorithm]
        elem = 0xffff; // 0xffff marks the end of a hash chain
             ^
common/editpal.cpp:1335:21: style: C-style pointer casting [cstyleCast]
    RGBEditor *me = (RGBEditor *)info;
                    ^
common/editpal.cpp:1395:21: style: C-style pointer casting [cstyleCast]
    RGBEditor *me = (RGBEditor *)info;
                    ^
common/editpal.cpp:2198:20: style: C-style pointer casting [cstyleCast]
    PalTable *me = (PalTable *)info;
                   ^
common/editpal.cpp:2263:35: style: C-style pointer casting [cstyleCast]
            PalTable__PutBand(me, (PALENTRY *)g_dac_box);   // apply band to g_dac_box
                                  ^
common/editpal.cpp:2309:20: style: C-style pointer casting [cstyleCast]
    PalTable *me = (PalTable *)info;
                   ^
common/editpal.cpp:2632:14: style: The scope of the variable 'dir' can be reduced. [variableScope]
        int  dir;
             ^
common/editpal.cpp:2548:13: style: Local variable 'key' shadows outer argument [shadowArgument]
        int key;
            ^
common/editpal.cpp:2307:37: note: Shadowed declaration
static void PalTable__other_key(int key, RGBEditor *rgb, void *info)
                                    ^
common/editpal.cpp:2548:13: note: Shadow variable
        int key;
            ^
common/encoder.cpp:781:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j;
           ^
common/encoder.cpp:809:40: style:inconclusive: Function 'store_item_name' argument 1 names different: declaration 'name' definition 'nameptr'. [funcArgNamesDifferent]
static int store_item_name(char const *nameptr)
                                       ^
common/encoder.cpp:43:40: note: Function 'store_item_name' argument 1 names different: declaration 'name' definition 'nameptr'.
static int store_item_name(char const *name);
                                       ^
common/encoder.cpp:809:40: note: Function 'store_item_name' argument 1 names different: declaration 'name' definition 'nameptr'.
static int store_item_name(char const *nameptr)
                                       ^
common/encoder.cpp:474:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < 256; i += 16)
                     ^
common/encoder.cpp:376:9: note: Shadowed declaration
    int i = 0;
        ^
common/encoder.cpp:474:22: note: Shadow variable
            for (int i = 0; i < 256; i += 16)
                     ^
common/encoder.cpp:676:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < NUM_GENES; i++)
                     ^
common/encoder.cpp:376:9: note: Shadowed declaration
    int i = 0;
        ^
common/encoder.cpp:676:22: note: Shadow variable
            for (int i = 0; i < NUM_GENES; i++)
                     ^
common/encoder.cpp:681:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < sizeof(esave_info.future) / sizeof(short); i++)
                     ^
common/encoder.cpp:376:9: note: Shadowed declaration
    int i = 0;
        ^
common/encoder.cpp:681:22: note: Shadow variable
            for (int i = 0; i < sizeof(esave_info.future) / sizeof(short); i++)
                     ^
common/encoder.cpp:710:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < sizeof(osave_info.future) / sizeof(short); i++)
                     ^
common/encoder.cpp:376:9: note: Shadowed declaration
    int i = 0;
        ^
common/encoder.cpp:710:22: note: Shadow variable
            for (int i = 0; i < sizeof(osave_info.future) / sizeof(short); i++)
                     ^
common/evolve.cpp:1019:13: warning: Return value of function rand() is not used. [ignoredReturnValue]
            rand();
            ^
common/evolve.cpp:908:28: style: The comparison 'old_variations > 0' is always false. [knownConditionTrueFalse]
        || (old_variations > 0))
                           ^
common/evolve.cpp:699:26: note: 'old_variations' is assigned value '0' here.
    int old_variations = 0;
                         ^
common/evolve.cpp:908:28: note: The comparison 'old_variations > 0' is always false.
        || (old_variations > 0))
                           ^
common/evolve.cpp:1032:9: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
        {
        ^
common/fpu087.cpp:106:15: portability: Casting between signed long * and float * which have an incompatible binary data representation. [invalidPointerCast]
    float f = em2float(x)*em2float(y);
              ^
common/fpu087.cpp:107:12: portability: Casting from float * to signed long * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    return float2em(f);
           ^
common/fpu087.cpp:113:37: portability: Casting between unsigned long * and float * which have an incompatible binary data representation. [invalidPointerCast]
    return (long) std::log((double) em2float(x))*(1 << 16);
                                    ^
common/fpu087.cpp:119:15: portability: Casting between signed long * and float * which have an incompatible binary data representation. [invalidPointerCast]
    float f = em2float(x)/em2float(y);
              ^
common/fpu087.cpp:120:12: portability: Casting from float * to signed long * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    return float2em(f);
           ^
common/fpu087.cpp:131:12: portability: Casting from float * to signed long * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    return float2em(f);
           ^
common/fpu087.cpp:138:19: portability: Casting between signed long * and float * which have an incompatible binary data representation. [invalidPointerCast]
    return (long)(em2float(x)*(float)(1 << Fudge));
                  ^
common/fpu087.cpp:144:9: portability: Casting between signed long * and float * which have an incompatible binary data representation. [invalidPointerCast]
    f = em2float(x);
        ^
common/fpu087.cpp:153:12: portability: Casting from float * to signed long * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    return float2em(f);
           ^
common/fracsubr.cpp:1590:17: style: The scope of the variable 'soundname' can be reduced. [variableScope]
    static char soundname[] = {"sound001.txt"};
                ^
common/fracsubr.cpp:1744:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, j, c;
        ^
common/fracsubr.cpp:1744:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j, c;
           ^
common/fracsubr.cpp:1744:15: style: The scope of the variable 'c' can be reduced. [variableScope]
    int i, j, c;
              ^
common/fracsubr.cpp:1527:20: style: Local variable 'next_time' shadows outer variable [shadowVariable]
    const uclock_t next_time = now + ms*100;
                   ^
common/fracsubr.cpp:1555:17: note: Shadowed declaration
static uclock_t next_time[MAX_INDEX];
                ^
common/fracsubr.cpp:1527:20: note: Shadow variable
    const uclock_t next_time = now + ms*100;
                   ^
common/fractals.cpp:554:26: style:inconclusive: Function 'complex_div' argument 1 names different: declaration 'arg1' definition 'numerator'. [funcArgNamesDifferent]
int complex_div(DComplex numerator, DComplex denominator, DComplex *pout)
                         ^
common/fractals.cpp:475:26: note: Function 'complex_div' argument 1 names different: declaration 'arg1' definition 'numerator'.
int complex_div(DComplex arg1, DComplex arg2, DComplex *pz);
                         ^
common/fractals.cpp:554:26: note: Function 'complex_div' argument 1 names different: declaration 'arg1' definition 'numerator'.
int complex_div(DComplex numerator, DComplex denominator, DComplex *pout)
                         ^
common/fractals.cpp:554:46: style:inconclusive: Function 'complex_div' argument 2 names different: declaration 'arg2' definition 'denominator'. [funcArgNamesDifferent]
int complex_div(DComplex numerator, DComplex denominator, DComplex *pout)
                                             ^
common/fractals.cpp:475:41: note: Function 'complex_div' argument 2 names different: declaration 'arg2' definition 'denominator'.
int complex_div(DComplex arg1, DComplex arg2, DComplex *pz);
                                        ^
common/fractals.cpp:554:46: note: Function 'complex_div' argument 2 names different: declaration 'arg2' definition 'denominator'.
int complex_div(DComplex numerator, DComplex denominator, DComplex *pout)
                                             ^
common/fractals.cpp:554:69: style:inconclusive: Function 'complex_div' argument 3 names different: declaration 'pz' definition 'pout'. [funcArgNamesDifferent]
int complex_div(DComplex numerator, DComplex denominator, DComplex *pout)
                                                                    ^
common/fractals.cpp:475:57: note: Function 'complex_div' argument 3 names different: declaration 'pz' definition 'pout'.
int complex_div(DComplex arg1, DComplex arg2, DComplex *pz);
                                                        ^
common/fractals.cpp:554:69: note: Function 'complex_div' argument 3 names different: declaration 'pz' definition 'pout'.
int complex_div(DComplex numerator, DComplex denominator, DComplex *pout)
                                                                    ^
common/fractals.cpp:1730:36: style: Local variable 'mpctmp' shadows outer variable [shadowVariable]
    MPC mpcHalnumer2, mpcHaldenom, mpctmp;
                                   ^
common/fractals.cpp:351:12: note: Shadowed declaration
static MPC mpctmp;
           ^
common/fractals.cpp:1730:36: note: Shadow variable
    MPC mpcHalnumer2, mpcHaldenom, mpctmp;
                                   ^
common/fractals.cpp:2116:14: style: Local variable 'ltmp2' shadows outer variable [shadowVariable]
    LComplex ltmp2;
             ^
common/fractals.cpp:76:17: note: Shadowed declaration
static LComplex ltmp2;
                ^
common/fractals.cpp:2116:14: note: Shadow variable
    LComplex ltmp2;
             ^
common/fractint.cpp:162:10: style: The scope of the variable 'path' can be reduced. [variableScope]
    char path[FILE_MAX_PATH];
         ^
common/fractint.cpp:285:21: style: The scope of the variable 'hdg' can be reduced. [variableScope]
        char const *hdg;
                    ^
common/fractint.cpp:647:11: style: The scope of the variable 'timestring' can be reduced. [variableScope]
    char *timestring;
          ^
common/fractint.cpp:543:0: information: Skipping configuration 'SRCDIR' since the value of 'SRCDIR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    g_fractal_search_dir2 = SRCDIR;
^
common/framain2.cpp:238:26: style: The scope of the variable 'buf' can be reduced. [variableScope]
                    char buf[120];
                         ^
common/framain2.cpp:2387:9: style: The scope of the variable 'oldcolor' can be reduced. [variableScope]
    int oldcolor;
        ^
common/framain2.cpp:2430:11: style: The scope of the variable 'timestring' can be reduced. [variableScope]
    char *timestring;
          ^
common/framain2.cpp:273:30: style: Local variable 'i' shadows outer variable [shadowVariable]
                    for (int i = 0; i < 256; ++i)
                             ^
common/framain2.cpp:174:13: note: Shadowed declaration
    int     i = 0;                           // temporary loop counters
            ^
common/framain2.cpp:273:30: note: Shadow variable
                    for (int i = 0; i < 256; ++i)
                             ^
common/framain2.cpp:1117:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < MAX_PARAMS; ++i)
                     ^
common/framain2.cpp:901:9: note: Shadowed declaration
    int i, k;
        ^
common/framain2.cpp:1117:22: note: Shadow variable
            for (int i = 0; i < MAX_PARAMS; ++i)
                     ^
common/framain2.cpp:1146:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < MAX_PARAMS; ++i)
                     ^
common/framain2.cpp:901:9: note: Shadowed declaration
    int i, k;
        ^
common/framain2.cpp:1146:22: note: Shadow variable
            for (int i = 0; i < MAX_PARAMS; ++i)
                     ^
common/framain2.cpp:2818:18: style: Local variable 'i' shadows outer argument [shadowArgument]
        for (int i = 0; i < 256; ++i)
                 ^
common/framain2.cpp:2670:38: note: Shadowed declaration
static void restore_history_info(int i)
                                     ^
common/framain2.cpp:2818:18: note: Shadow variable
        for (int i = 0; i < 256; ++i)
                 ^
common/gifview.cpp:396:18: style: The scope of the variable 'brt' can be reduced. [variableScope]
    int nexterr, brt, err;
                 ^
common/gifview.cpp:428:9: style: The scope of the variable 'extra' can be reduced. [variableScope]
    int extra;
        ^
common/gifview.cpp:476:9: style: The scope of the variable 'extra' can be reduced. [variableScope]
    int extra;
        ^
common/help.cpp:499:31: style: The scope of the variable 'temp_c2' can be reduced. [variableScope]
    int curr_c2, best_c2 = 0, temp_c2, best_dist = 0, temp_dist;
                              ^
common/help.cpp:595:15: style: The scope of the variable 'key' can be reduced. [variableScope]
    int       key;
              ^
common/help.cpp:800:15: style: The scope of the variable 'flags' can be reduced. [variableScope]
    int       flags;
              ^
common/help.cpp:1296:10: style: The scope of the variable 'key' can be reduced. [variableScope]
    int  key;
         ^
common/help.cpp:1343:10: style: Local variable 'buffer' shadows outer variable [shadowVariable]
    char buffer[80] = "";
         ^
common/help.cpp:96:26: note: Shadowed declaration
static std::vector<char> buffer;           // MAX_PAGE_SIZE (2048 bytes)
                         ^
common/help.cpp:1343:10: note: Shadow variable
    char buffer[80] = "";
         ^
common/help.cpp:72:19: style: struct member 'help_sig_info::base' is never used. [unusedStructMember]
    unsigned long base;     // only if added to fractint.exe
                  ^
common/intro.cpp:63:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = 3; i < END_MAIN_AUTHOR; ++i)
             ^
common/intro.cpp:35:9: note: Shadowed declaration
    int i = 32767 + read_help_topic(help_labels::INTRO_AUTHORS, 0, 32767, screen_text);
        ^
common/intro.cpp:63:14: note: Shadow variable
    for (int i = 3; i < END_MAIN_AUTHOR; ++i)
             ^
common/jb.cpp:232:14: style: The comparison 'r >= 0' is always true. [knownConditionTrueFalse]
    return r >= 0;
             ^
common/jb.cpp:115:13: note: 'r' is assigned value '0' here.
    int r = 0;
            ^
common/jb.cpp:232:14: note: The comparison 'r >= 0' is always true.
    return r >= 0;
             ^
common/jb.cpp:481:10: style: The scope of the variable 'x' can be reduced. [variableScope]
    long x;
         ^
common/jb.cpp:536:12: style: The scope of the variable 'x' can be reduced. [variableScope]
    double x;
           ^
common/line3d.cpp:444:22: style: Condition '!(persp&&g_raytrace_format!=raytrace_formats::none)' is always true [knownConditionTrueFalse]
            else if (!(persp && g_raytrace_format != raytrace_formats::none))
                     ^
common/line3d.cpp:395:17: note: Assuming that condition 'persp' is not redundant
            if (persp || g_raytrace_format != raytrace_formats::none)
                ^
common/line3d.cpp:444:22: note: Condition '!(persp&&g_raytrace_format!=raytrace_formats::none)' is always true
            else if (!(persp && g_raytrace_format != raytrace_formats::none))
                     ^
common/line3d.cpp:852:31: style: Variable 'cur.color' is reassigned a value before the old one has been used. [redundantAssignment]
                    cur.color = (int)(1 + (g_colors - 2) *
                              ^
common/line3d.cpp:842:39: note: cur.color is assigned
                            cur.color = (int) f_cur.color;
                                      ^
common/line3d.cpp:852:31: note: cur.color is overwritten
                    cur.color = (int)(1 + (g_colors - 2) *
                              ^
common/line3d.cpp:1226:9: style: The scope of the variable 'xlim' can be reduced. [variableScope]
    int xlim;
        ^
common/line3d.cpp:2413:11: style: The scope of the variable 'twocosdeltatheta' can be reduced. [variableScope]
    float twocosdeltatheta;
          ^
common/line3d.cpp:2414:12: style: The scope of the variable 'xval' can be reduced. [variableScope]
    double xval, yval, zval;     // rotation values
           ^
common/line3d.cpp:2414:18: style: The scope of the variable 'yval' can be reduced. [variableScope]
    double xval, yval, zval;     // rotation values
                 ^
common/line3d.cpp:2414:24: style: The scope of the variable 'zval' can be reduced. [variableScope]
    double xval, yval, zval;     // rotation values
                       ^
common/line3d.cpp:2417:12: style: The scope of the variable 'v_length' can be reduced. [variableScope]
    double v_length;
           ^
common/line3d.cpp:2419:11: style: The scope of the variable 'theta' can be reduced. [variableScope]
    float theta, theta1, theta2; // current,start,stop latitude
          ^
common/line3d.cpp:2419:18: style: The scope of the variable 'theta1' can be reduced. [variableScope]
    float theta, theta1, theta2; // current,start,stop latitude
                 ^
common/line3d.cpp:2419:26: style: The scope of the variable 'theta2' can be reduced. [variableScope]
    float theta, theta1, theta2; // current,start,stop latitude
                         ^
common/line3d.cpp:2420:11: style: The scope of the variable 'phi1' can be reduced. [variableScope]
    float phi1, phi2;            // current start,stop longitude
          ^
common/line3d.cpp:2420:17: style: The scope of the variable 'phi2' can be reduced. [variableScope]
    float phi1, phi2;            // current start,stop longitude
                ^
common/line3d.cpp:2421:11: style: The scope of the variable 'deltatheta' can be reduced. [variableScope]
    float deltatheta;            // increment of latitude
          ^
common/line3d.cpp:1700:33: style:inconclusive: Function 'targa_validate' argument 1 names different: declaration 'file_name' definition 'File_Name'. [funcArgNamesDifferent]
bool targa_validate(char const *File_Name)
                                ^
common/line3d.cpp:56:33: note: Function 'targa_validate' argument 1 names different: declaration 'file_name' definition 'File_Name'.
bool targa_validate(char const *file_name);
                                ^
common/line3d.cpp:1700:33: note: Function 'targa_validate' argument 1 names different: declaration 'file_name' definition 'File_Name'.
bool targa_validate(char const *File_Name)
                                ^
common/line3d.cpp:1739:9: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
        {
        ^
common/loadfdos.cpp:80:0: style: C-style pointer casting [cstyleCast]
    ptr1 = (vidinf const *)p1;
^
common/loadfdos.cpp:81:0: style: C-style pointer casting [cstyleCast]
    ptr2 = (vidinf const *)p2;
^
common/loadfdos.cpp:359:9: style: Condition '!gotrealmode' is always true [knownConditionTrueFalse]
    if (!gotrealmode)  // translate from temp table to permanent
        ^
common/loadfdos.cpp:356:19: note: Assignment 'gotrealmode=false', assigned value is 0
    gotrealmode = false;
                  ^
common/loadfdos.cpp:359:9: note: Condition '!gotrealmode' is always true
    if (!gotrealmode)  // translate from temp table to permanent
        ^
common/loadfile.cpp:507:20: style: Local variable 'oldfloatflag' shadows outer variable [shadowVariable]
        bool const oldfloatflag = g_float_flag;
                   ^
common/loadfile.cpp:160:10: note: Shadowed declaration
    bool oldfloatflag = g_user_float_flag;
         ^
common/loadfile.cpp:507:20: note: Shadow variable
        bool const oldfloatflag = g_float_flag;
                   ^
common/loadmap.cpp:65:9: style: C-style pointer casting [cstyleCast]
        dac[index].red   = (BYTE)((r%256) >> 2);// maps default to 8 bits
        ^
common/loadmap.cpp:66:9: style: C-style pointer casting [cstyleCast]
        dac[index].green = (BYTE)((g%256) >> 2);// DAC wants 6 bits
        ^
common/loadmap.cpp:67:9: style: C-style pointer casting [cstyleCast]
        dac[index].blue  = (BYTE)((b%256) >> 2);
        ^
common/loadmap.cpp:73:9: style: C-style pointer casting [cstyleCast]
        dac[index].green = 40;
        ^
common/loadmap.cpp:74:9: style: C-style pointer casting [cstyleCast]
        dac[index].blue = dac[index].green;
        ^
common/loadmap.cpp:75:9: style: C-style pointer casting [cstyleCast]
        dac[index].red = dac[index].blue;
        ^
common/lorenz.cpp:1289:45: style: The scope of the variable 'za' can be reduced. [variableScope]
    double oldx, oldy, zzbar, zreal, zimag, za, zb, zn, p;
                                            ^
common/lorenz.cpp:1289:49: style: The scope of the variable 'zb' can be reduced. [variableScope]
    double oldx, oldy, zzbar, zreal, zimag, za, zb, zn, p;
                                                ^
common/lorenz.cpp:1392:16: style: The scope of the variable 'col' can be reduced. [variableScope]
    int color, col, row;
               ^
common/lorenz.cpp:1392:21: style: The scope of the variable 'row' can be reduced. [variableScope]
    int color, col, row;
                    ^
common/lorenz.cpp:1564:16: style: The scope of the variable 'col' can be reduced. [variableScope]
    int color, col, row;
               ^
common/lorenz.cpp:1564:21: style: The scope of the variable 'row' can be reduced. [variableScope]
    int color, col, row;
                    ^
common/lorenz.cpp:2053:12: style: The scope of the variable 'xpixel' can be reduced. [variableScope]
    double xpixel = 0.0;
           ^
common/lorenz.cpp:2054:12: style: The scope of the variable 'ypixel' can be reduced. [variableScope]
    double ypixel = 0.0; // Our pixel position on the screen
           ^
common/lorenz.cpp:2458:12: style: The scope of the variable 'newx' can be reduced. [variableScope]
    double newx, newy, newz, r, sum;
           ^
common/lorenz.cpp:2458:18: style: The scope of the variable 'newy' can be reduced. [variableScope]
    double newx, newy, newz, r, sum;
                 ^
common/lorenz.cpp:2458:24: style: The scope of the variable 'newz' can be reduced. [variableScope]
    double newx, newy, newz, r, sum;
                       ^
common/lorenz.cpp:2458:30: style: The scope of the variable 'r' can be reduced. [variableScope]
    double newx, newy, newz, r, sum;
                             ^
common/lorenz.cpp:2458:33: style: The scope of the variable 'sum' can be reduced. [variableScope]
    double newx, newy, newz, r, sum;
                                ^
common/lorenz.cpp:2460:9: style: The scope of the variable 'k' can be reduced. [variableScope]
    int k;
        ^
common/lorenz.cpp:2465:12: style: The scope of the variable 'ffptr' can be reduced. [variableScope]
    float *ffptr;
           ^
common/lorenz.cpp:2615:9: style: The scope of the variable 'col' can be reduced. [variableScope]
    int col;
        ^
common/lorenz.cpp:2616:9: style: The scope of the variable 'row' can be reduced. [variableScope]
    int row;
        ^
common/lorenz.cpp:2620:11: style: The scope of the variable 'lfptr' can be reduced. [variableScope]
    long *lfptr;
          ^
common/lorenz.cpp:2621:16: style: The scope of the variable 'newx' can be reduced. [variableScope]
    long x, y, newx, newy, r, sum, tempr;
               ^
common/lorenz.cpp:2621:22: style: The scope of the variable 'newy' can be reduced. [variableScope]
    long x, y, newx, newy, r, sum, tempr;
                     ^
common/lorenz.cpp:2621:28: style: The scope of the variable 'r' can be reduced. [variableScope]
    long x, y, newx, newy, r, sum, tempr;
                           ^
common/lorenz.cpp:2621:31: style: The scope of the variable 'sum' can be reduced. [variableScope]
    long x, y, newx, newy, r, sum, tempr;
                              ^
common/lorenz.cpp:2735:11: style: The scope of the variable 'lfptr' can be reduced. [variableScope]
    long *lfptr;
          ^
common/lorenz.cpp:2736:10: style: The scope of the variable 'newx' can be reduced. [variableScope]
    long newx, newy, newz, r, sum, tempr;
         ^
common/lorenz.cpp:2736:16: style: The scope of the variable 'newy' can be reduced. [variableScope]
    long newx, newy, newz, r, sum, tempr;
               ^
common/lorenz.cpp:2736:22: style: The scope of the variable 'newz' can be reduced. [variableScope]
    long newx, newy, newz, r, sum, tempr;
                     ^
common/lorenz.cpp:2736:28: style: The scope of the variable 'r' can be reduced. [variableScope]
    long newx, newy, newz, r, sum, tempr;
                           ^
common/lorenz.cpp:2736:31: style: The scope of the variable 'sum' can be reduced. [variableScope]
    long newx, newy, newz, r, sum, tempr;
                              ^
common/lorenz.cpp:283:12: style: Local variable 'cvt' shadows outer variable [shadowVariable]
    affine cvt;
           ^
common/lorenz.cpp:149:15: note: Shadowed declaration
static affine cvt;
              ^
common/lorenz.cpp:283:12: note: Shadow variable
    affine cvt;
           ^
common/lorenz.cpp:1396:12: style: Local variable 'cvt' shadows outer variable [shadowVariable]
    affine cvt;
           ^
common/lorenz.cpp:149:15: note: Shadowed declaration
static affine cvt;
              ^
common/lorenz.cpp:1396:12: note: Shadow variable
    affine cvt;
           ^
common/lorenz.cpp:1568:14: style: Local variable 'cvt' shadows outer variable [shadowVariable]
    l_affine cvt;
             ^
common/lorenz.cpp:149:15: note: Shadowed declaration
static affine cvt;
              ^
common/lorenz.cpp:1568:14: note: Shadow variable
    l_affine cvt;
             ^
common/lorenz.cpp:2049:12: style: Local variable 'cvt' shadows outer variable [shadowVariable]
    affine cvt;
           ^
common/lorenz.cpp:149:15: note: Shadowed declaration
static affine cvt;
              ^
common/lorenz.cpp:2049:12: note: Shadow variable
    affine cvt;
           ^
common/lorenz.cpp:2622:14: style: Local variable 'cvt' shadows outer variable [shadowVariable]
    l_affine cvt;
             ^
common/lorenz.cpp:149:15: note: Shadowed declaration
static affine cvt;
              ^
common/lorenz.cpp:2622:14: note: Shadow variable
    l_affine cvt;
             ^
common/lorenz.cpp:2043:13: style: Variable 'col' is assigned a value that is never used. [unreadVariable]
    int col = 0;
            ^
common/lorenz.cpp:2044:13: style: Variable 'row' is assigned a value that is never used. [unreadVariable]
    int row = 0;
            ^
common/lorenz.cpp:2053:19: style: Variable 'xpixel' is assigned a value that is never used. [unreadVariable]
    double xpixel = 0.0;
                  ^
common/lorenz.cpp:2054:19: style: Variable 'ypixel' is assigned a value that is never used. [unreadVariable]
    double ypixel = 0.0; // Our pixel position on the screen
                  ^
common/lsys.cpp:977:21: style: C-style pointer casting [cstyleCast]
    lsys_cmd *ret = (lsys_cmd *) malloc((long) maxval * sizeof(lsys_cmd));
                    ^
common/lsys.cpp:1036:30: style: C-style pointer casting [cstyleCast]
            lsys_cmd *doub = (lsys_cmd *) malloc((long) maxval*2*sizeof(lsys_cmd));
                             ^
common/lsys.cpp:1055:22: style: C-style pointer casting [cstyleCast]
    lsys_cmd *doub = (lsys_cmd *) malloc((long) n*sizeof(lsys_cmd));
                     ^
common/lsys.cpp:1076:21: style: C-style pointer casting [cstyleCast]
    lsys_cmd *ret = (lsys_cmd *) malloc((long) maxval * sizeof(lsys_cmd));
                    ^
common/lsys.cpp:1151:30: style: C-style pointer casting [cstyleCast]
            lsys_cmd *doub = (lsys_cmd *) malloc((long) maxval*2*sizeof(lsys_cmd));
                             ^
common/lsys.cpp:1170:22: style: C-style pointer casting [cstyleCast]
    lsys_cmd *doub = (lsys_cmd *) malloc((long) n*sizeof(lsys_cmd));
                     ^
common/lsys.cpp:76:20: style: Opposite expression on both sides of '&'. [oppositeExpression]
    return n == (n & -n);
                   ^
common/lsys.cpp:208:22: style: The scope of the variable 'fixed' can be reduced. [variableScope]
                char fixed[MAX_LSYS_LINE_LEN+1];
                     ^
common/lsys.cpp:893:10: style: The scope of the variable 'tran' can be reduced. [variableScope]
    bool tran;
         ^
common/lsysf.cpp:533:22: style: C-style pointer casting [cstyleCast]
    lsysf_cmd *ret = (lsysf_cmd *) malloc((long) max * sizeof(lsysf_cmd));
                     ^
common/lsysf.cpp:600:31: style: C-style pointer casting [cstyleCast]
            lsysf_cmd *doub = (lsysf_cmd *) malloc((long) max*2*sizeof(lsysf_cmd));
                              ^
common/lsysf.cpp:619:23: style: C-style pointer casting [cstyleCast]
    lsysf_cmd *doub = (lsysf_cmd *) malloc((long) n*sizeof(lsysf_cmd));
                      ^
common/lsysf.cpp:640:22: style: C-style pointer casting [cstyleCast]
    lsysf_cmd *ret = (lsysf_cmd *) malloc((long) max * sizeof(lsysf_cmd));
                     ^
common/lsysf.cpp:723:31: style: C-style pointer casting [cstyleCast]
            lsysf_cmd *doub = (lsysf_cmd *) malloc((long) max*2*sizeof(lsysf_cmd));
                              ^
common/lsysf.cpp:742:23: style: C-style pointer casting [cstyleCast]
    lsysf_cmd *doub = (lsysf_cmd *) malloc((long) n*sizeof(lsysf_cmd));
                      ^
common/lsysf.cpp:285:10: style: The scope of the variable 'tran' can be reduced. [variableScope]
    bool tran;
         ^
common/lsysf.cpp:438:10: style: The scope of the variable 'tran' can be reduced. [variableScope]
    bool tran;
         ^
common/memory.cpp:183:23: style: Array index 'counter' is used before limits check. [arrayIndexThenCheck]
    while (handletable[counter].Nowhere.stored_at != NOWHERE &&
                      ^
common/memory.cpp:132:11: style: The scope of the variable 'temp' can be reduced. [variableScope]
    BYTE *temp;
          ^
common/miscfrac.cpp:211:9: style: The scope of the variable 'x' can be reduced. [variableScope]
    int x, y;
        ^
common/miscfrac.cpp:212:9: style: The scope of the variable 'nx1' can be reduced. [variableScope]
    int nx1;
        ^
common/miscfrac.cpp:213:9: style: The scope of the variable 'nx' can be reduced. [variableScope]
    int nx;
        ^
common/miscfrac.cpp:1707:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
common/miscfrac.cpp:2229:17: style: The scope of the variable 'mapname' can be reduced. [variableScope]
    char const *mapname;
                ^
common/miscfrac.cpp:655:11: style: Local variable 'r' shadows outer variable [shadowVariable]
    float r, radius;
          ^
common/miscfrac.cpp:1702:5: note: Shadowed declaration
S16 r, k_1, rule_digits;
    ^
common/miscfrac.cpp:655:11: note: Shadow variable
    float r, radius;
          ^
common/miscfrac.cpp:542:18: style: Consider using std::fill or std::generate algorithm instead of a raw loop. [useStlAlgorithm]
            elem = (U16)(1+(((rand15()/pcolors)*(pcolors-1)) >> (shiftvalue-11)));
                 ^
common/miscfrac.cpp:549:18: style: Consider using std::generate algorithm instead of a raw loop. [useStlAlgorithm]
            elem = rand16();
                 ^
common/miscfrac.cpp:556:18: style: Consider using std::fill algorithm instead of a raw loop. [useStlAlgorithm]
            elem = 1;
                 ^
common/miscfrac.cpp:1835:18: style: Consider using std::fill algorithm instead of a raw loop. [useStlAlgorithm]
            elem = 0; // zero the array
                 ^
common/miscfrac.cpp:1588:20: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
        if (i & (1 << t))
                   ^
common/miscfrac.cpp:1588:20: error: Signed integer overflow for expression '1<<t'. [integerOverflow]
        if (i & (1 << t))
                   ^
common/miscovl.cpp:2564:24: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (errorflag == 0 && inputerrorflag == 0)
                       ^
common/miscovl.cpp:2551:24: note: First condition
    if (errorflag == 0 && inputerrorflag == 0)
                       ^
common/miscovl.cpp:2564:24: note: Second condition
    if (errorflag == 0 && inputerrorflag == 0)
                       ^
common/miscovl.cpp:1253:9: style: Condition '!colorsonly' is always true [knownConditionTrueFalse]
    if (!colorsonly)
        ^
common/miscovl.cpp:619:9: note: Assuming that condition 'colorsonly' is not redundant
    if (colorsonly)
        ^
common/miscovl.cpp:1253:9: note: Condition '!colorsonly' is always true
    if (!colorsonly)
        ^
common/miscovl.cpp:461:26: style: The scope of the variable 'c' can be reduced. [variableScope]
                    char c;
                         ^
common/miscovl.cpp:1886:18: style: The scope of the variable 'bptr' can be reduced. [variableScope]
    char *dptr, *bptr, *exptr;
                 ^
common/miscovl.cpp:2187:14: style: The scope of the variable 'colorsbuf' can be reduced. [variableScope]
        char colorsbuf[10];
             ^
common/miscovl.cpp:2853:17: style: The scope of the variable 'save' can be reduced. [variableScope]
    char *next, save;
                ^
common/miscovl.cpp:476:30: style: Local variable 'buf' shadows outer variable [shadowVariable]
                        char buf[20];
                             ^
common/miscovl.cpp:87:36: note: Shadowed declaration
    char outname[FILE_MAX_PATH+1], buf[256], buf2[128];
                                   ^
common/miscovl.cpp:476:30: note: Shadow variable
                        char buf[20];
                             ^
common/miscovl.cpp:506:30: style: Local variable 'i' shadows outer variable [shadowVariable]
                    for (int i = 0; i < 4; i++)
                             ^
common/miscovl.cpp:454:18: note: Shadowed declaration
        for (int i = 0; i < (int)xm; i++)    // columns
                 ^
common/miscovl.cpp:506:30: note: Shadow variable
                    for (int i = 0; i < 4; i++)
                             ^
common/miscovl.cpp:513:30: style: Local variable 'i' shadows outer variable [shadowVariable]
                    for (int i = 0; i < last; i++)
                             ^
common/miscovl.cpp:454:18: note: Shadowed declaration
        for (int i = 0; i < (int)xm; i++)    // columns
                 ^
common/miscovl.cpp:513:30: note: Shadow variable
                    for (int i = 0; i < last; i++)
                             ^
common/miscovl.cpp:527:26: style: Local variable 'buf' shadows outer variable [shadowVariable]
                    char buf[25];
                         ^
common/miscovl.cpp:87:36: note: Shadowed declaration
    char outname[FILE_MAX_PATH+1], buf[256], buf2[128];
                                   ^
common/miscovl.cpp:527:26: note: Shadow variable
                    char buf[25];
                         ^
common/miscres.cpp:1463:14: warning: Either the condition 'bufptr!=nullptr' is redundant or there is possible null pointer dereference: bufptr. [nullPointerRedundantCheck]
        if (*bufptr == '}')
             ^
common/miscres.cpp:1435:19: note: Assuming that condition 'bufptr!=nullptr' is not redundant
    while (bufptr != nullptr)
                  ^
common/miscres.cpp:1463:14: note: Null pointer dereference
        if (*bufptr == '}')
             ^
common/miscres.cpp:619:10: style: The scope of the variable 'tmpbuf' can be reduced. [variableScope]
    char tmpbuf[20];
         ^
common/miscres.cpp:1724:14: style: The scope of the variable 'c' can be reduced. [variableScope]
    int len, c;
             ^
common/mpmath_c.cpp:539:9: style: Condition '!g_log_map_calculate' is always true [knownConditionTrueFalse]
    if (!g_log_map_calculate)
        ^
common/mpmath_c.cpp:534:9: note: Assuming that condition 'g_log_map_calculate' is not redundant
    if (g_log_map_calculate)
        ^
common/mpmath_c.cpp:539:9: note: Condition '!g_log_map_calculate' is always true
    if (!g_log_map_calculate)
        ^
common/mpmath_c.cpp:693:48: portability: Casting from float * to signed long * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    f = 23 - (int)RegFloat2Fg(RegDivFloat(xx, *(long*)&fLogTwo), 0);
                                               ^
common/mpmath_c.cpp:269:14: style: Local variable 'temp' shadows outer variable [shadowVariable]
    DComplex temp;
             ^
common/mpmath_c.cpp:699:17: note: Shadowed declaration
static DComplex temp;
                ^
common/mpmath_c.cpp:269:14: note: Shadow variable
    DComplex temp;
             ^
common/mpmath_c.cpp:285:14: style: Local variable 'temp' shadows outer variable [shadowVariable]
    DComplex temp;
             ^
common/mpmath_c.cpp:699:17: note: Shadowed declaration
static DComplex temp;
                ^
common/mpmath_c.cpp:285:14: note: Shadow variable
    DComplex temp;
             ^
common/mpmath_c.cpp:921:19: warning: Conversion of string literal "MP2d086 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MP2d086 called.");
                  ^
common/mpmath_c.cpp:1161:19: warning: Conversion of string literal "MPadd086 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPadd086 called.");
                  ^
common/mpmath_c.cpp:1238:19: warning: Conversion of string literal "MPcmp086 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPcmp086 called.");
                  ^
common/mpmath_c.cpp:1342:19: warning: Conversion of string literal "MPdiv086 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPdiv086 called.");
                  ^
common/mpmath_c.cpp:1578:19: warning: Conversion of string literal "d2MP386 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "d2MP386 called.");
                  ^
common/mpmath_c.cpp:1626:19: warning: Conversion of string literal "MP2d386 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MP2d386 called.");
                  ^
common/mpmath_c.cpp:1779:19: warning: Conversion of string literal "MPadd called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPadd called.");
                  ^
common/mpmath_c.cpp:1879:19: warning: Conversion of string literal "MPadd386 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPadd386 called.");
                  ^
common/mpmath_c.cpp:1942:19: warning: Conversion of string literal "MPcmp386 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPcmp386 called.");
                  ^
common/mpmath_c.cpp:2004:19: warning: Conversion of string literal "MPdiv386 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPdiv386 called.");
                  ^
common/mpmath_c.cpp:2068:19: warning: Conversion of string literal "MPmul386 called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "MPmul386 called.");
                  ^
common/mpmath_c.cpp:2130:19: warning: Conversion of string literal "fg2MP086 called" to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "fg2MP086 called");
                  ^
common/mpmath_c.cpp:2171:19: warning: Conversion of string literal "fg2MP386 called" to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "fg2MP386 called");
                  ^
common/parser.cpp:2341:27: style: Array index 'NextOp' is used before limits check. [arrayIndexThenCheck]
    while (o[ThisOp].p > o[NextOp].p && NextOp < g_operation_index)
                          ^
common/parser.cpp:2687:13: warning: Opposite inner 'if' condition leads to a dead code block. [oppositeInnerCondition]
        if (!Str[n])
            ^
common/parser.cpp:2685:20: note: outer condition: Str[n]
    for (n = 0; Str[n]; n++)
                   ^
common/parser.cpp:2687:13: note: opposite inner condition: !Str[n]
        if (!Str[n])
            ^
common/parser.cpp:2009:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int n, j;
           ^
common/parser.cpp:3357:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c;
        ^
common/parser.cpp:3461:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c;
        ^
common/parser.cpp:3589:10: style: The scope of the variable 'filepos' can be reduced. [variableScope]
    long filepos;
         ^
common/parser.cpp:4407:49: style: The scope of the variable 'token_count' can be reduced. [variableScope]
    int chars_to_error = 0, chars_in_error = 0, token_count;
                                                ^
common/parser.cpp:4408:9: style: The scope of the variable 'statement_len' can be reduced. [variableScope]
    int statement_len, line_number;
        ^
common/parser.cpp:4408:24: style: The scope of the variable 'line_number' can be reduced. [variableScope]
    int statement_len, line_number;
                       ^
common/parser.cpp:4523:10: style: The scope of the variable 'filepos' can be reduced. [variableScope]
    long filepos;
         ^
common/parser.cpp:1986:14: style: Local variable 'n' shadows outer variable [shadowVariable]
    unsigned n;
             ^
common/parser.cpp:191:21: note: Shadowed declaration
static unsigned int n;
                    ^
common/parser.cpp:1986:14: note: Shadow variable
    unsigned n;
             ^
common/parser.cpp:2009:9: style: Local variable 'n' shadows outer variable [shadowVariable]
    int n, j;
        ^
common/parser.cpp:191:21: note: Shadowed declaration
static unsigned int n;
                    ^
common/parser.cpp:2009:9: note: Shadow variable
    int n, j;
        ^
common/parser.cpp:2035:19: style: Local variable 'n' shadows outer variable [shadowVariable]
    for (unsigned n = 0U; n < g_variable_index; n++)
                  ^
common/parser.cpp:191:21: note: Shadowed declaration
static unsigned int n;
                    ^
common/parser.cpp:2035:19: note: Shadow variable
    for (unsigned n = 0U; n < g_variable_index; n++)
                  ^
common/parser.cpp:2120:18: style: Local variable 'n' shadows outer variable [shadowVariable]
        unsigned n;
                 ^
common/parser.cpp:191:21: note: Shadowed declaration
static unsigned int n;
                    ^
common/parser.cpp:2120:18: note: Shadow variable
        unsigned n;
                 ^
common/parser.cpp:2309:14: style: Local variable 'n' shadows outer variable [shadowVariable]
    unsigned n = SkipWhiteSpace(&Str[Len]);
             ^
common/parser.cpp:191:21: note: Shadowed declaration
static unsigned int n;
                    ^
common/parser.cpp:2309:14: note: Shadow variable
    unsigned n = SkipWhiteSpace(&Str[Len]);
             ^
common/parser.cpp:3824:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = 0; i < sizeof(OPList)/sizeof(OPList[0]); i++)
                     ^
common/parser.cpp:3723:9: note: Shadowed declaration
    int i = 1;
        ^
common/parser.cpp:3824:22: note: Shadow variable
            for (int i = 0; i < sizeof(OPList)/sizeof(OPList[0]); i++)
                     ^
common/parser.cpp:4528:10: style: Local variable 'ExpectingArg' shadows outer variable [shadowVariable]
    bool ExpectingArg = true;
         ^
common/parser.cpp:195:13: note: Shadowed declaration
static bool ExpectingArg = false;
            ^
common/parser.cpp:4528:10: note: Shadow variable
    bool ExpectingArg = true;
         ^
common/prompts1.cpp:1089:13: style: Condition 'i' is always true [knownConditionTrueFalse]
        if (i)   // can't return to prior image anymore
            ^
common/prompts1.cpp:1083:13: note: Assuming that condition '!i' is not redundant
        if (!i)
            ^
common/prompts1.cpp:1089:13: note: Condition 'i' is always true
        if (i)   // can't return to prior image anymore
            ^
common/prompts1.cpp:253:24: warning: Possible null pointer dereference: extrainfo [nullPointer]
        && std::strchr(extrainfo, '\021') == nullptr)
                       ^
common/prompts1.cpp:2945:74: note: Calling function 'fullscreen_prompt', 6th argument 'nullptr' value is 0
    i = fullscreen_prompt("3D Parameters", k, ifs3d_prompts, uvalues, 0, nullptr);
                                                                         ^
common/prompts1.cpp:253:24: note: Null pointer dereference
        && std::strchr(extrainfo, '\021') == nullptr)
                       ^
common/prompts1.cpp:2152:10: style: The scope of the variable 'firsttry' can be reduced. [variableScope]
    bool firsttry;
         ^
common/prompts1.cpp:2153:10: style: The scope of the variable 'entry_pointer' can be reduced. [variableScope]
    long entry_pointer;
         ^
common/prompts1.cpp:2517:10: style: The scope of the variable 'infhdg' can be reduced. [variableScope]
    char infhdg[60];
         ^
common/prompts1.cpp:2518:10: style: The scope of the variable 'infbuf' can be reduced. [variableScope]
    char infbuf[25*80];
         ^
common/prompts1.cpp:2726:9: style: The scope of the variable 'linelen' can be reduced. [variableScope]
    int linelen;
        ^
common/prompts1.cpp:2077:9: style: Variable 'promptnum' is assigned a value that is never used. [unreadVariable]
        ++promptnum;
        ^
common/prompts1.cpp:2728:11: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
    int c = 0;
          ^
common/prompts2.cpp:1404:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (!g_make_parameter_file)
        ^
common/prompts2.cpp:1396:9: note: First condition
    if (!g_make_parameter_file)
        ^
common/prompts2.cpp:1404:9: note: Second condition
    if (!g_make_parameter_file)
        ^
common/prompts2.cpp:1263:22: style: Consider using std::fill algorithm instead of a raw loop. [useStlAlgorithm]
                elem = ' ';
                     ^
common/realdos.cpp:1960:14: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        std::sscanf(fields[1], "%x", &ax);
             ^
common/realdos.cpp:1961:14: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        std::sscanf(fields[2], "%x", &bx);
             ^
common/realdos.cpp:1962:14: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        std::sscanf(fields[3], "%x", &cx);
             ^
common/realdos.cpp:1963:14: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        std::sscanf(fields[4], "%x", &dx);
             ^
common/realdos.cpp:1707:22: style: The scope of the variable 'tmpfld' can be reduced. [variableScope]
                char tmpfld[30];
                     ^
common/realdos.cpp:1752:10: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char buf[81] = { 0 };
         ^
common/realdos.cpp:1836:10: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char buf[81];
         ^
common/realdos.cpp:609:17: style: Local variable 'len' shadows outer variable [shadowVariable]
            int len = (int) std::strlen(choices[i]);
                ^
common/realdos.cpp:537:15: note: Shadowed declaration
    int const len = (speedstring == nullptr) ? 0 : (int) std::strlen(speedstring);
              ^
common/realdos.cpp:609:17: note: Shadow variable
            int len = (int) std::strlen(choices[i]);
                ^
common/realdos.cpp:1149:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = 0; i < 44; ++i)
             ^
common/realdos.cpp:1140:9: note: Shadowed declaration
    int i;
        ^
common/realdos.cpp:1149:14: note: Shadow variable
    for (int i = 0; i < 44; ++i)
             ^
common/realdos.cpp:1622:26: style: Local variable 'i' shadows outer variable [shadowVariable]
                for (int i = offset-1; i < j; ++i)
                         ^
common/realdos.cpp:1557:9: note: Shadowed declaration
    int i, j;
        ^
common/realdos.cpp:1622:26: note: Shadow variable
                for (int i = offset-1; i < j; ++i)
                         ^
common/realdos.cpp:1633:22: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int i = offset; i < j; ++i)
                     ^
common/realdos.cpp:1557:9: note: Shadowed declaration
    int i, j;
        ^
common/realdos.cpp:1633:22: note: Shadow variable
            for (int i = offset; i < j; ++i)
                     ^
common/realdos.cpp:1789:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = -1; i < titlelines+3; ++i)      // draw empty box
             ^
common/realdos.cpp:1751:9: note: Shadowed declaration
    int i, j;
        ^
common/realdos.cpp:1789:14: note: Shadow variable
    for (int i = -1; i < titlelines+3; ++i)      // draw empty box
             ^
common/slideshw.cpp:267:13: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
        if (fscanf(fpss, "%s", buffer) != 1)
            ^
common/slideshw.cpp:279:23: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
                err = fscanf(fpss, "%s", buffer1);
                      ^
common/slideshw.cpp:83:9: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
        {
        ^
common/testpt.cpp:43:30: style: The scope of the variable 'newreal' can be reduced. [variableScope]
    double oldreal, oldimag, newreal, newimag, magnitude;
                             ^
common/testpt.cpp:43:39: style: The scope of the variable 'newimag' can be reduced. [variableScope]
    double oldreal, oldimag, newreal, newimag, magnitude;
                                      ^
fractint/dos/sound.c:566:17: style: Variable 'oldhelpmode' is reassigned a value before the old one has been used. [redundantAssignment]
    oldhelpmode = helpmode;
                ^
fractint/dos/sound.c:505:17: note: oldhelpmode is assigned
    oldhelpmode = helpmode;
                ^
fractint/dos/sound.c:566:17: note: oldhelpmode is overwritten
    oldhelpmode = helpmode;
                ^
fractint/dos/sound.c:168:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
fractint/dos/sound.c:274:12: style: The scope of the variable 'b' can be reduced. [variableScope]
    int k, b;
           ^
fractint/dos/sound.c:346:18: style: The scope of the variable 'block' can be reduced. [variableScope]
    unsigned int block,mult,fn;
                 ^
fractint/dos/sound.c:346:24: style: The scope of the variable 'mult' can be reduced. [variableScope]
    unsigned int block,mult,fn;
                       ^
fractint/dos/sound.c:346:29: style: The scope of the variable 'fn' can be reduced. [variableScope]
    unsigned int block,mult,fn;
                            ^
fractint/dos/sound.c:421:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
fractint/dos/tplus.c:384:53: error: The address of local variable 'Color' is accessed at non-zero index. [objectIndex]
    OUTPORTB(TPlus.Write.COLOR2, ((unsigned*)&Color)[1]);
                                                    ^
fractint/dos/tplus.c:384:46: note: Address of variable taken here.
    OUTPORTB(TPlus.Write.COLOR2, ((unsigned*)&Color)[1]);
                                             ^
fractint/dos/tplus.c:384:53: note: The address of local variable 'Color' is accessed at non-zero index.
    OUTPORTB(TPlus.Write.COLOR2, ((unsigned*)&Color)[1]);
                                                    ^
fractint/dos/tplus.c:102:22: style: The scope of the variable 'IOPtr' can be reduced. [variableScope]
    struct TPLUS_IO *IOPtr;
                     ^
fractint/dos/tplus.c:103:15: style: The scope of the variable 'RegPtr' can be reduced. [variableScope]
    unsigned *RegPtr;
              ^
fractint/dos/tplus.c:133:22: style: The scope of the variable 'IOPtr' can be reduced. [variableScope]
    struct TPLUS_IO *IOPtr;
                     ^
fractint/dos/tplus.c:304:14: style: The scope of the variable 'n' can be reduced. [variableScope]
    unsigned n;
             ^
fractint/dos/tplus.c:322:14: style: The scope of the variable 'n' can be reduced. [variableScope]
    unsigned n;
             ^
fractint/dos/tplus.c:452:17: style: The scope of the variable 'Depth' can be reduced. [variableScope]
    unsigned n, Depth;
                ^
fractint/win/DIALOG.C:1992:1: error: syntax error [syntaxError]
Win_SaveFile(unsigned char FileName[])
^
fractint/win/MAINFRAC.C:229:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        sprintf(temp," %d NEAR bytes free", i);
        ^
fractint/win/MAINFRAC.C:154:11: portability: Casting from double * to signed long * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    lx0 = (long *)&temp_array[0];
          ^
fractint/win/MAINFRAC.C:169:13: style: The scope of the variable 'iLoop' can be reduced. [variableScope]
        int iLoop, jLoop;
            ^
fractint/win/MAINFRAC.C:169:20: style: The scope of the variable 'jLoop' can be reduced. [variableScope]
        int iLoop, jLoop;
                   ^
fractint/win/MAINFRAC.C:216:15: style: The scope of the variable 'tempptr' can be reduced. [variableScope]
        char *tempptr;
              ^
fractint/win/MAINFRAC.C:601:9: style: The scope of the variable 'oldcolor' can be reduced. [variableScope]
    int oldcolor;
        ^
fractint/win/MAINFRAC.C:602:11: style: The scope of the variable 'timestring' can be reduced. [variableScope]
    char *timestring;
          ^
fractint/win/MAINFRAC.C:209:20: style: Local variable 'win_release' shadows outer variable [shadowVariable]
        extern int win_release;
                   ^
fractint/win/MAINFRAC.C:116:12: note: Shadowed declaration
extern int win_release;
           ^
fractint/win/MAINFRAC.C:209:20: note: Shadow variable
        extern int win_release;
                   ^
fractint/win/MAINFRAC.C:217:22: style: Local variable 'i' shadows outer variable [shadowVariable]
        unsigned int i,i2;
                     ^
fractint/win/MAINFRAC.C:139:9: note: Shadowed declaration
    int i, k;
        ^
fractint/win/MAINFRAC.C:217:22: note: Shadow variable
        unsigned int i,i2;
                     ^
fractint/win/MAINFRAC.C:599:16: style: Local variable 'rowcount' shadows outer variable [shadowVariable]
    extern int rowcount;
               ^
fractint/win/MAINFRAC.C:89:5: note: Shadowed declaration
int rowcount;
    ^
fractint/win/MAINFRAC.C:599:16: note: Shadow variable
    extern int rowcount;
               ^
fractint/win/MATHTOOL.C:484:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        sprintf(xStr, "%d", xPixel);
        ^
fractint/win/MATHTOOL.C:485:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        sprintf(yStr, "%d", yPixel);
        ^
fractint/win/MATHTOOL.C:145:9: style: The scope of the variable 'OldMode' can be reduced. [variableScope]
    int OldMode;
        ^
fractint/win/MATHTOOL.C:174:14: style: The scope of the variable 'Midx' can be reduced. [variableScope]
    unsigned Midx, Midy;
             ^
fractint/win/MATHTOOL.C:174:20: style: The scope of the variable 'Midy' can be reduced. [variableScope]
    unsigned Midx, Midy;
                   ^
fractint/win/MATHTOOL.C:175:12: style: The scope of the variable 'z' can be reduced. [variableScope]
    double z;
           ^
fractint/win/SELECT.C:79:14: style: The scope of the variable 'ScaledY' can be reduced. [variableScope]
    unsigned ScaledY;
             ^
fractint/win/WINDOS.C:262:45: style: Condition 'temp_bottom_changed<0' is always false [knownConditionTrueFalse]
                    if (temp_bottom_changed < 0) temp_bottom_changed = 0;
                                            ^
fractint/win/WINDOS.C:260:76: note: Assuming that condition 'temp_bottom_changed<0' is not redundant
                if (!(temp_top_changed >= ypagesize || temp_bottom_changed < 0)) {
                                                                           ^
fractint/win/WINDOS.C:262:45: note: Condition 'temp_bottom_changed<0' is always false
                    if (temp_bottom_changed < 0) temp_bottom_changed = 0;
                                            ^
fractint/win/WINDOS.C:1072:9: warning: %d in format string (no. 5) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
        fprintf(fp,"%s type=%s resolution = %dx%d maxiter=%d",
        ^
fractint/win/WINDOS.C:1072:17: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
        fprintf(fp,"%s type=%s resolution = %dx%d maxiter=%d",
                ^
fractint/win/WINDOS.C:1079:16: note: Assuming that condition 'fp!=NULL' is not redundant
        if (fp != NULL)
               ^
fractint/win/WINDOS.C:1072:17: note: Null pointer dereference
        fprintf(fp,"%s type=%s resolution = %dx%d maxiter=%d",
                ^
fractint/win/WINDOS.C:1078:17: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
        fprintf(fp," time= %ld.%02ld secs\n",timer_interval/100,timer_interval%100);
                ^
fractint/win/WINDOS.C:1079:16: note: Assuming that condition 'fp!=NULL' is not redundant
        if (fp != NULL)
               ^
fractint/win/WINDOS.C:1078:17: note: Null pointer dereference
        fprintf(fp," time= %ld.%02ld secs\n",timer_interval/100,timer_interval%100);
                ^
fractint/win/WINDOS.C:698:5: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    DelayCount = 128;
    ^
fractint/win/WINDOS.C:229:9: style: The scope of the variable 'temp_top_changed' can be reduced. [variableScope]
    int temp_top_changed, temp_bottom_changed;
        ^
fractint/win/WINDOS.C:229:27: style: The scope of the variable 'temp_bottom_changed' can be reduced. [variableScope]
    int temp_top_changed, temp_bottom_changed;
                          ^
fractint/win/WINDOS.C:230:12: style: The scope of the variable 'this_time' can be reduced. [variableScope]
    time_t this_time;
           ^
fractint/win/WINDOS.C:335:22: style: The scope of the variable 'j' can be reduced. [variableScope]
        unsigned int j;
                     ^
fractint/win/WINDOS.C:336:14: style: The scope of the variable 'k' can be reduced. [variableScope]
        long k;
             ^
fractint/win/WINDOS.C:372:22: style: The scope of the variable 'j' can be reduced. [variableScope]
        unsigned int j;
                     ^
fractint/win/WINDOS.C:373:14: style: The scope of the variable 'k' can be reduced. [variableScope]
        long k;
             ^
fractint/win/WINDOS.C:396:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
fractint/win/WINDOS.C:725:10: style: Variable 'Time' is assigned a value that is never used. [unreadVariable]
    Time = Now;
         ^
fractint/win/WINDOS.C:741:14: style: Variable 'Time' is assigned a value that is never used. [unreadVariable]
        Time = Now;
             ^
fractint/win/WINDOS.C:1082:17: error: va_list 'arg_marker' was opened but not closed by va_end(). [va_end_missing]
    return (out);
                ^
fractint/win/WINDOS2.C:952:11: style: Condition 'i!=0' is always true [knownConditionTrueFalse]
    if (i != 0 && (i & 255) == 0)  /* function key? */
          ^
fractint/win/WINDOS2.C:949:11: note: Assuming that condition 'i==0' is not redundant
    if (i == 0)
          ^
fractint/win/WINDOS2.C:952:11: note: Condition 'i!=0' is always true
    if (i != 0 && (i & 255) == 0)  /* function key? */
          ^
fractint/win/WINDOS2.C:1205:13: style: Variable 'testkey' is reassigned a value before the old one has been used. [redundantAssignment]
    testkey = (curkey>='A' && curkey<='Z') ? curkey+('a'-'A') : curkey;
            ^
fractint/win/WINDOS2.C:1204:13: note: testkey is assigned
    testkey = choice; /* for warning only */
            ^
fractint/win/WINDOS2.C:1205:13: note: testkey is overwritten
    testkey = (curkey>='A' && curkey<='Z') ? curkey+('a'-'A') : curkey;
            ^
fractint/win/WINDOS2.C:586:22: style: The scope of the variable 'tmpfld' can be reduced. [variableScope]
                char tmpfld[30];
                     ^
fractint/win/WINDOS2.C:626:10: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char buf[81];
         ^
fractint/win/WINDOS2.C:679:18: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char msg[80],buf[10];
                 ^
fractint/win/WINDOS2.C:729:9: style: The scope of the variable 'savebytes' can be reduced. [variableScope]
    int savebytes;
        ^
fractint/win/WINDOS2.C:730:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
fractint/win/WINDOS2.C:731:20: style: The scope of the variable 'ptr' can be reduced. [variableScope]
    unsigned char *ptr;
                   ^
fractint/win/WINDOS2.C:735:21: style: The scope of the variable 'msg' can be reduced. [variableScope]
        static char msg[]= {"stackscreen overflow"};
                    ^
fractint/win/WINDOS2.C:761:9: style: The scope of the variable 'savebytes' can be reduced. [variableScope]
    int savebytes;
        ^
fractint/win/WINDOS2.C:762:20: style: The scope of the variable 'ptr' can be reduced. [variableScope]
    unsigned char *ptr;
                   ^
fractint/win/WINDOS2.C:899:9: style: The scope of the variable 'cursor_type' can be reduced. [variableScope]
    int cursor_type;
        ^
fractint/win/WINDOS2.C:992:11: style: The scope of the variable 'dacfile' can be reduced. [variableScope]
    FILE *dacfile;
          ^
fractint/win/WINDOS2.C:1060:31: style: The scope of the variable 'buf2' can be reduced. [variableScope]
    char outname[81],buf[256],buf2[128];
                              ^
fractint/win/WINDOS2.C:747:1: style: Label 'fileproblem' is not used. [unusedLabel]
fileproblem:
^
fractint/win/WINDOS2.C:746:25: style: Local variable 'msg' shadows outer variable [shadowVariable]
            static char msg[]= {"insufficient memory, aborting"};
                        ^
fractint/win/WINDOS2.C:735:21: note: Shadowed declaration
        static char msg[]= {"stackscreen overflow"};
                    ^
fractint/win/WINDOS2.C:746:25: note: Shadow variable
            static char msg[]= {"insufficient memory, aborting"};
                        ^
fractint/win/WINDOS2.C:1068:17: style: Local variable 'colorstate' shadows outer variable [shadowVariable]
    extern int  colorstate;
                ^
fractint/win/WINDOS2.C:986:12: note: Shadowed declaration
extern int colorstate;
           ^
fractint/win/WINDOS2.C:1068:17: note: Shadow variable
    extern int  colorstate;
                ^
fractint/win/WINDOS2.C:1070:17: style: Local variable 'colorfile' shadows outer variable [shadowVariable]
    extern char colorfile[];
                ^
fractint/win/WINDOS2.C:987:20: note: Shadowed declaration
extern char        colorfile[];
                   ^
fractint/win/WINDOS2.C:1070:17: note: Shadow variable
    extern char colorfile[];
                ^
fractint/win/WINDOS2.C:1151:13: style: Local variable 'i' shadows outer variable [shadowVariable]
        int i, last;
            ^
fractint/win/WINDOS2.C:1058:9: note: Shadowed declaration
    int i;
        ^
fractint/win/WINDOS2.C:1151:13: note: Shadow variable
        int i, last;
            ^
fractint/win/WINDOS2.C:1164:14: style: Local variable 'buf' shadows outer variable [shadowVariable]
        char buf[25];
             ^
fractint/win/WINDOS2.C:1060:22: note: Shadowed declaration
    char outname[81],buf[256],buf2[128];
                     ^
fractint/win/WINDOS2.C:1164:14: note: Shadow variable
        char buf[25];
             ^
fractint/win/WINDOS2.C:123:10: style: Variable 'curitem' is not assigned a value. [unassignedVariable]
    char curitem[81];
         ^
fractint/win/WINDOS2.C:901:17: style: Variable 'cursor_type' is assigned a value that is never used. [unreadVariable]
    cursor_type = -1;
                ^
fractint/win/WINDOS2.C:905:21: style: Variable 'cursor_type' is assigned a value that is never used. [unreadVariable]
        cursor_type = 0;
                    ^
fractint/win/WINFRACT.C:1480:23: style: The scope of the variable 'parmfile' can be reduced. [variableScope]
                FILE *parmfile;
                      ^
fractint/win/WINFRACT.C:1574:1: style: Label 'julibrot_fudge' is not used. [unusedLabel]
julibrot_fudge:                                /* dive in here for Julibrots */
^
fractint/win/WINFRACT.C:1672:21: style: Local variable 'i' shadows outer variable [shadowVariable]
                int i;
                    ^
fractint/win/WINFRACT.C:1306:9: note: Shadowed declaration
    int i, fchoice;
        ^
fractint/win/WINFRACT.C:1672:21: note: Shadow variable
                int i;
                    ^
fractint/win/WINFRACT.C:2151:9: style: Local variable 'hDC' shadows outer variable [shadowVariable]
    HDC hDC;                      /* handle to device context           */
        ^
fractint/win/WINFRACT.C:52:5: note: Shadowed declaration
HDC hDC;                              /* handle to device context           */
    ^
fractint/win/WINFRACT.C:2151:9: note: Shadow variable
    HDC hDC;                      /* handle to device context           */
        ^
fractint/win/WINFRACT.C:1406:29: style: Variable 'Return2' is assigned a value that is never used. [unreadVariable]
                    Return2 = DialogBox(hInst, "SelectFunnyGlasses",
                            ^
fractint/win/WINFRACT.C:1881:28: style: Variable 'Return' is assigned a value that is never used. [unreadVariable]
                    Return = DialogBox(hInst, "SelectFunnyGlasses",
                           ^
fractint/win/WINFRACT.C:2062:20: style: Variable 'Return' is assigned a value that is never used. [unreadVariable]
            Return = DialogBox(hInst, "SelectCycle",
                   ^
fractint/win/WINTEXT.C:683:29: style: Variable 'wintext_buffer_init' is reassigned a value before the old one has been used. [redundantAssignment]
        wintext_buffer_init = 1;
                            ^
fractint/win/WINTEXT.C:679:29: note: wintext_buffer_init is assigned
        wintext_buffer_init = 1;
                            ^
fractint/win/WINTEXT.C:683:29: note: wintext_buffer_init is overwritten
        wintext_buffer_init = 1;
                            ^
fractint/win/WINTEXT.C:669:25: style: The scope of the variable 'length' can be reduced. [variableScope]
    int istart, jstart, length, foreground, background;
                        ^
fractint/win/WINTEXT.C:721:29: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
            background = (k >> 4);
                            ^
fractint/win/WINTEXT.C:414:13: style: Variable 'hDC' is assigned a value that is never used. [unreadVariable]
        hDC = BeginPaint(hWnd, &ps);
            ^
hc/hc.cpp:681:17: error: Array 'buff[4]' accessed at index 9999, which is out of bounds. [arrayIndexOutOfBounds]
            buff[ctr] = '\0';
                ^
hc/hc.cpp:671:13: note: After for loop, ctr has value 9999
            for (ctr = 0; true; ctr++)
            ^
hc/hc.cpp:681:17: note: Array index out of bounds
            buff[ctr] = '\0';
                ^
hc/hc.cpp:3999:10: performance:inconclusive: Technically the member function '::compiler::usage' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void usage();
         ^
hc/hc.cpp:4219:16: note: Technically the member function '::compiler::usage' can be static (but you may consider moving to unnamed namespace).
void compiler::usage()
               ^
hc/hc.cpp:3999:10: note: Technically the member function '::compiler::usage' can be static (but you may consider moving to unnamed namespace).
    void usage();
         ^
hc/hc.cpp:4003:10: performance:inconclusive: Technically the member function '::compiler::paginate_html_document' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void paginate_html_document();
         ^
hc/hc.cpp:4374:16: note: Technically the member function '::compiler::paginate_html_document' can be static (but you may consider moving to unnamed namespace).
void compiler::paginate_html_document()
               ^
hc/hc.cpp:4003:10: note: Technically the member function '::compiler::paginate_html_document' can be static (but you may consider moving to unnamed namespace).
    void paginate_html_document();
         ^
hc/hc.cpp:4004:10: performance:inconclusive: Technically the member function '::compiler::print_html_document' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void print_html_document(std::string const &output_filename);
         ^
hc/hc.cpp:4533:16: note: Technically the member function '::compiler::print_html_document' can be static (but you may consider moving to unnamed namespace).
void compiler::print_html_document(std::string const &fname)
               ^
hc/hc.cpp:4004:10: note: Technically the member function '::compiler::print_html_document' can be static (but you may consider moving to unnamed namespace).
    void print_html_document(std::string const &output_filename);
         ^
hc/hc.cpp:4525:10: performance:inconclusive: Technically the member function '::html_processor::write_index_html' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void write_index_html();
         ^
hc/hc.cpp:4549:22: note: Technically the member function '::html_processor::write_index_html' can be static (but you may consider moving to unnamed namespace).
void html_processor::write_index_html()
                     ^
hc/hc.cpp:4525:10: note: Technically the member function '::html_processor::write_index_html' can be static (but you may consider moving to unnamed namespace).
    void write_index_html();
         ^
hc/hc.cpp:4528:10: performance:inconclusive: Technically the member function '::html_processor::write_topic' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void write_topic(TOPIC const &t);
         ^
hc/hc.cpp:4618:22: note: Technically the member function '::html_processor::write_topic' can be static (but you may consider moving to unnamed namespace).
void html_processor::write_topic(TOPIC const &t)
                     ^
hc/hc.cpp:4528:10: note: Technically the member function '::html_processor::write_topic' can be static (but you may consider moving to unnamed namespace).
    void write_topic(TOPIC const &t);
         ^
hc/hc.cpp:4517:5: style: Class 'html_processor' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    html_processor(std::string const &fname)
    ^
hc/hc.cpp:569:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch;
        ^
hc/hc.cpp:798:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch;
        ^
hc/hc.cpp:829:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch;
        ^
hc/hc.cpp:1361:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch;
        ^
hc/hc.cpp:1559:12: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int    ch;
           ^
hc/hc.cpp:3077:14: style: The scope of the variable 'len' can be reduced. [variableScope]
    int      len;
             ^
hc/hc.cpp:3456:27: style: The scope of the variable 'text' can be reduced. [variableScope]
    char                 *text;
                          ^
hc/hc.cpp:3831:26: style: The scope of the variable 'size' can be reduced. [variableScope]
    int                  size;
                         ^
hc/hc.cpp:4533:55: style:inconclusive: Function 'print_html_document' argument 1 names different: declaration 'output_filename' definition 'fname'. [funcArgNamesDifferent]
void compiler::print_html_document(std::string const &fname)
                                                      ^
hc/hc.cpp:4004:49: note: Function 'print_html_document' argument 1 names different: declaration 'output_filename' definition 'fname'.
    void print_html_document(std::string const &output_filename);
                                                ^
hc/hc.cpp:4533:55: note: Function 'print_html_document' argument 1 names different: declaration 'output_filename' definition 'fname'.
void compiler::print_html_document(std::string const &fname)
                                                      ^
hc/hc.cpp:290:17: style: Local variable 'curr' shadows outer variable [shadowVariable]
    char const *curr = text;
                ^
hc/hc.cpp:219:10: note: Shadowed declaration
char    *curr;                    // current position in the buffer
         ^
hc/hc.cpp:290:17: note: Shadow variable
    char const *curr = text;
                ^
hc/hc.cpp:2812:15: style: Local variable 'curr' shadows outer variable [shadowVariable]
        char *curr = text;
              ^
hc/hc.cpp:219:10: note: Shadowed declaration
char    *curr;                    // current position in the buffer
         ^
hc/hc.cpp:2812:15: note: Shadow variable
        char *curr = text;
              ^
hc/hc.cpp:4394:15: style: Local variable 'curr' shadows outer variable [shadowVariable]
        char *curr = text;
              ^
hc/hc.cpp:219:10: note: Shadowed declaration
char    *curr;                    // current position in the buffer
         ^
hc/hc.cpp:4394:15: note: Shadow variable
        char *curr = text;
              ^
hc/hc.cpp:4567:17: style: Local variable 'curr' shadows outer variable [shadowVariable]
    char const *curr = text;
                ^
hc/hc.cpp:219:10: note: Shadowed declaration
char    *curr;                    // current position in the buffer
         ^
hc/hc.cpp:4567:17: note: Shadow variable
    char const *curr = text;
                ^
hc/hc.cpp:4624:17: style: Local variable 'curr' shadows outer variable [shadowVariable]
    char const *curr = text;
                ^
hc/hc.cpp:219:10: note: Shadowed declaration
char    *curr;                    // current position in the buffer
         ^
hc/hc.cpp:4624:17: note: Shadow variable
    char const *curr = text;
                ^
hc/hc.cpp:4687:27: style: Local variable 'link_topic' shadows outer function [shadowFunction]
                int const link_topic = g_all_links[link_num].topic_num;
                          ^
hc/hc.cpp:2623:6: note: Shadowed declaration
void link_topic(LINK &l)
     ^
hc/hc.cpp:4687:27: note: Shadow variable
                int const link_topic = g_all_links[link_num].topic_num;
                          ^
hc/hc.cpp:718:13: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
            {
            ^
hc/hc.cpp:728:13: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
            {
            ^
hc/hc.cpp:3806:15: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        pages += t.num_page;
              ^
home/extra/tru.c:24:29: style: The scope of the variable 'err' can be reduced. [variableScope]
    int xdots, ydots, i, j, err;
                            ^
home/extra/tru.c:61:21: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
            if ((err=fread(&iter,3,1,fpin))==0)
                    ^
unix/x11_plot.h:22:9: performance:inconclusive: Technically the member function 'x11_plot_window::width' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int width() const { return 0; }
        ^
unix/x11_plot.h:23:9: performance:inconclusive: Technically the member function 'x11_plot_window::height' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int height() const { return 0; }
        ^
unix/d_x11.cpp:2433:19: style: Condition 'block==0' is always false [knownConditionTrueFalse]
        if (block == 0 && skipcount < 25)
                  ^
unix/d_x11.cpp:2425:17: note: Assignment 'block=1', assigned value is 1
    int block = 1;
                ^
unix/d_x11.cpp:2433:19: note: Condition 'block==0' is always false
        if (block == 0 && skipcount < 25)
                  ^
unix/d_x11.cpp:2566:20: style: Condition 'shell.empty()' is always false [knownConditionTrueFalse]
    if (shell.empty())
                   ^
unix/d_x11.cpp:716:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:746:6: style: C-style pointer casting [cstyleCast]
    ((DriverX11 *) g_driver)->doredraw = 1;
     ^
unix/d_x11.cpp:1569:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:1595:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:1693:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:1723:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:1807:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:1927:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2021:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2052:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2082:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2168:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2199:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2278:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2355:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2389:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2427:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2520:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2648:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2670:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2679:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2688:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2716:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2738:5: style: C-style pointer casting [cstyleCast]
    DIX11(drv);
    ^
unix/d_x11.cpp:2563:14: style: The scope of the variable 'donepid' can be reduced. [variableScope]
    int pid, donepid;
             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:306:34: note: Address of variable taken here.
    getInt(&info->iterationsold, &bufPtr, dir);
                                 ^
unix/general.cpp:306:34: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->iterationsold, &bufPtr, dir);
                                 ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:307:33: note: Address of variable taken here.
    getInt(&info->fractal_type, &bufPtr, dir);
                                ^
unix/general.cpp:307:33: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->fractal_type, &bufPtr, dir);
                                ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:314:32: note: Address of variable taken here.
    getInt(&info->videomodeax, &bufPtr, dir);
                               ^
unix/general.cpp:314:32: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->videomodeax, &bufPtr, dir);
                               ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:315:32: note: Address of variable taken here.
    getInt(&info->videomodebx, &bufPtr, dir);
                               ^
unix/general.cpp:315:32: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->videomodebx, &bufPtr, dir);
                               ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:316:32: note: Address of variable taken here.
    getInt(&info->videomodecx, &bufPtr, dir);
                               ^
unix/general.cpp:316:32: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->videomodecx, &bufPtr, dir);
                               ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:317:32: note: Address of variable taken here.
    getInt(&info->videomodedx, &bufPtr, dir);
                               ^
unix/general.cpp:317:32: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->videomodedx, &bufPtr, dir);
                               ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:318:28: note: Address of variable taken here.
    getInt(&info->dotmode, &bufPtr, dir);
                           ^
unix/general.cpp:318:28: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->dotmode, &bufPtr, dir);
                           ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:319:26: note: Address of variable taken here.
    getInt(&info->xdots, &bufPtr, dir);
                         ^
unix/general.cpp:319:26: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->xdots, &bufPtr, dir);
                         ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:320:26: note: Address of variable taken here.
    getInt(&info->ydots, &bufPtr, dir);
                         ^
unix/general.cpp:320:26: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->ydots, &bufPtr, dir);
                         ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:482:46: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:321:27: note: Address of variable taken here.
    getInt(&info->colors, &bufPtr, dir);
                          ^
unix/general.cpp:321:27: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getInt(&info->colors, &bufPtr, dir);
                          ^
unix/general.cpp:482:46: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        *dst = (*src)[0] + ((((char *)(*src))[1]) << 8);
                                             ^
unix/general.cpp:487:15: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:345:34: note: Address of variable taken here.
        getInt(&info->init3d[i], &bufPtr, dir);
                                 ^
unix/general.cpp:345:34: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
        getInt(&info->init3d[i], &bufPtr, dir);
                                 ^
unix/general.cpp:487:15: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:487:15: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:443:34: note: Address of variable taken here.
        getInt(&info->future[i], &bufPtr, dir);
                                 ^
unix/general.cpp:443:34: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
        getInt(&info->future[i], &bufPtr, dir);
                                 ^
unix/general.cpp:487:15: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:487:15: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:709:23: note: Address of variable taken here.
        getInt(&dest, &bufPtr, dir);
                      ^
unix/general.cpp:709:23: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
        getInt(&dest, &bufPtr, dir);
                      ^
unix/general.cpp:487:15: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:487:15: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:754:34: note: Address of variable taken here.
        getInt(&info->mutate[i], &bufPtr, dir);
                                 ^
unix/general.cpp:754:34: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
        getInt(&info->mutate[i], &bufPtr, dir);
                                 ^
unix/general.cpp:487:15: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:487:15: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:760:34: note: Address of variable taken here.
        getInt(&info->future[i], &bufPtr, dir);
                                 ^
unix/general.cpp:760:34: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
        getInt(&info->future[i], &bufPtr, dir);
                                 ^
unix/general.cpp:487:15: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:487:15: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:808:34: note: Address of variable taken here.
        getInt(&info->future[i], &bufPtr, dir);
                                 ^
unix/general.cpp:808:34: note: Calling function 'getInt', 2nd argument '&bufPtr' value is lifetime=bufPtr
        getInt(&info->future[i], &bufPtr, dir);
                                 ^
unix/general.cpp:487:15: note: The address of local variable 'bufPtr' is accessed at non-zero index.
        (*src)[1] = ((*dst)&0xff00) >> 8;
              ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:365:36: note: Address of variable taken here.
    getLong(&info->tot_extend_len, &bufPtr, dir);
                                   ^
unix/general.cpp:365:36: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->tot_extend_len, &bufPtr, dir);
                                   ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:373:30: note: Address of variable taken here.
    getLong(&info->calctime, &bufPtr, dir);
                             ^
unix/general.cpp:373:30: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->calctime, &bufPtr, dir);
                             ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:419:29: note: Address of variable taken here.
    getLong(&info->bailout, &bufPtr, dir);
                            ^
unix/general.cpp:419:29: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->bailout, &bufPtr, dir);
                            ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:421:32: note: Address of variable taken here.
    getLong(&info->iterations, &bufPtr, dir);
                               ^
unix/general.cpp:421:32: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->iterations, &bufPtr, dir);
                               ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:426:28: note: Address of variable taken here.
    getLong(&info->logmap, &bufPtr, dir);
                           ^
unix/general.cpp:426:28: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->logmap, &bufPtr, dir);
                           ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:427:29: note: Address of variable taken here.
    getLong(&info->distest, &bufPtr, dir);
                            ^
unix/general.cpp:427:29: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->distest, &bufPtr, dir);
                            ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:501:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:436:36: note: Address of variable taken here.
    getLong(&info->orbit_interval, &bufPtr, dir);
                                   ^
unix/general.cpp:436:36: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->orbit_interval, &bufPtr, dir);
                                   ^
unix/general.cpp:501:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[1])) << 8) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:365:36: note: Address of variable taken here.
    getLong(&info->tot_extend_len, &bufPtr, dir);
                                   ^
unix/general.cpp:365:36: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->tot_extend_len, &bufPtr, dir);
                                   ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:373:30: note: Address of variable taken here.
    getLong(&info->calctime, &bufPtr, dir);
                             ^
unix/general.cpp:373:30: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->calctime, &bufPtr, dir);
                             ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:419:29: note: Address of variable taken here.
    getLong(&info->bailout, &bufPtr, dir);
                            ^
unix/general.cpp:419:29: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->bailout, &bufPtr, dir);
                            ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:421:32: note: Address of variable taken here.
    getLong(&info->iterations, &bufPtr, dir);
                               ^
unix/general.cpp:421:32: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->iterations, &bufPtr, dir);
                               ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:426:28: note: Address of variable taken here.
    getLong(&info->logmap, &bufPtr, dir);
                           ^
unix/general.cpp:426:28: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->logmap, &bufPtr, dir);
                           ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:427:29: note: Address of variable taken here.
    getLong(&info->distest, &bufPtr, dir);
                            ^
unix/general.cpp:427:29: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->distest, &bufPtr, dir);
                            ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:502:40: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:436:36: note: Address of variable taken here.
    getLong(&info->orbit_interval, &bufPtr, dir);
                                   ^
unix/general.cpp:436:36: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->orbit_interval, &bufPtr, dir);
                                   ^
unix/general.cpp:502:40: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((unsigned long)((*src)[2])) << 16) +
                                       ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:365:36: note: Address of variable taken here.
    getLong(&info->tot_extend_len, &bufPtr, dir);
                                   ^
unix/general.cpp:365:36: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->tot_extend_len, &bufPtr, dir);
                                   ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:373:30: note: Address of variable taken here.
    getLong(&info->calctime, &bufPtr, dir);
                             ^
unix/general.cpp:373:30: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->calctime, &bufPtr, dir);
                             ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:419:29: note: Address of variable taken here.
    getLong(&info->bailout, &bufPtr, dir);
                            ^
unix/general.cpp:419:29: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->bailout, &bufPtr, dir);
                            ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:421:32: note: Address of variable taken here.
    getLong(&info->iterations, &bufPtr, dir);
                               ^
unix/general.cpp:421:32: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->iterations, &bufPtr, dir);
                               ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:426:28: note: Address of variable taken here.
    getLong(&info->logmap, &bufPtr, dir);
                           ^
unix/general.cpp:426:28: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->logmap, &bufPtr, dir);
                           ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:427:29: note: Address of variable taken here.
    getLong(&info->distest, &bufPtr, dir);
                            ^
unix/general.cpp:427:29: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->distest, &bufPtr, dir);
                            ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:503:41: error: The address of local variable 'bufPtr' is accessed at non-zero index. [objectIndex]
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/general.cpp:436:36: note: Address of variable taken here.
    getLong(&info->orbit_interval, &bufPtr, dir);
                                   ^
unix/general.cpp:436:36: note: Calling function 'getLong', 2nd argument '&bufPtr' value is lifetime=bufPtr
    getLong(&info->orbit_interval, &bufPtr, dir);
                                   ^
unix/general.cpp:503:41: note: The address of local variable 'bufPtr' is accessed at non-zero index.
               (((long)(((char *)(*src))[3])) << 24);
                                        ^
unix/unixscr.cpp:441:23: style: Condition 'fixcolors>0' is always false [knownConditionTrueFalse]
        if (fixcolors > 0)
                      ^
unix/unixscr.cpp:501:23: style: Condition 'fixcolors>0' is always false [knownConditionTrueFalse]
        if (fixcolors > 0)
                      ^
unix/unixscr.cpp:506:13: style: Condition 'fullscreen' is always false [knownConditionTrueFalse]
        if (fullscreen || onroot)
            ^
unix/unixscr.cpp:709:9: style: Condition 'sp' is always false [knownConditionTrueFalse]
    if (sp)
        ^
unix/unixscr.cpp:707:18: note: Assignment 'sp=step/2', assigned value is 0
    int sp = step/2;
                 ^
unix/unixscr.cpp:709:9: note: Condition 'sp' is always false
    if (sp)
        ^
unix/unixscr.cpp:743:9: style: Condition 's0' is always false [knownConditionTrueFalse]
    if (s0)
        ^
unix/unixscr.cpp:706:19: note: Assignment 's0=step&1', assigned value is 0
    int s0 = step & 1;
                  ^
unix/unixscr.cpp:743:9: note: Condition 's0' is always false
    if (s0)
        ^
unix/unixscr.cpp:2289:13: style: The scope of the variable 'font_image' can be reduced. [variableScope]
    XImage *font_image;
            ^
unix/unixscr.cpp:2155:21: style:inconclusive: Function 'pr_dwmroot' argument 1 names different: declaration 'dpy' definition 'Xdp'. [funcArgNamesDifferent]
pr_dwmroot(Display *dpy, Window pwin)
                    ^
unix/unixscr.cpp:133:35: note: Function 'pr_dwmroot' argument 1 names different: declaration 'dpy' definition 'Xdp'.
static Window pr_dwmroot(Display *dpy, Window pwin);
                                  ^
unix/unixscr.cpp:2155:21: note: Function 'pr_dwmroot' argument 1 names different: declaration 'dpy' definition 'Xdp'.
pr_dwmroot(Display *dpy, Window pwin)
                    ^
unix/video.cpp:412:19: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    unsigned char tmp[3];
                  ^
unix/video.cpp:413:20: style: The scope of the variable 'dacbot' can be reduced. [variableScope]
    unsigned char *dacbot;
                   ^
unix/video.cpp:554:9: style: The scope of the variable 'brt' can be reduced. [variableScope]
    int brt;
        ^
unix/x11_frame.h:34:9: performance:inconclusive: Technically the member function 'x11_frame_window::pump_messages' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int pump_messages(bool wait_flag);
        ^
unix/x11_frame.cpp:79:23: note: Technically the member function 'x11_frame_window::pump_messages' can be static (but you may consider moving to unnamed namespace).
int x11_frame_window::pump_messages(bool wait_flag)
                      ^
unix/x11_frame.h:34:9: note: Technically the member function 'x11_frame_window::pump_messages' can be static (but you may consider moving to unnamed namespace).
    int pump_messages(bool wait_flag);
        ^
unix/x11_frame.cpp:6:9: style:inconclusive: Function 'initialize' argument 2 names different: declaration 'screen' definition 'screen_num'. [funcArgNamesDifferent]
    int screen_num,
        ^
unix/x11_frame.h:28:39: note: Function 'initialize' argument 2 names different: declaration 'screen' definition 'screen_num'.
    void initialize(Display *dpy, int screen, char const *geometry);
                                      ^
unix/x11_frame.cpp:6:9: note: Function 'initialize' argument 2 names different: declaration 'screen' definition 'screen_num'.
    int screen_num,
        ^
unix/x11_frame.cpp:55:41: style:inconclusive: Function 'get_key_press' argument 1 names different: declaration 'option' definition 'wait_for_key'. [funcArgNamesDifferent]
int x11_frame_window::get_key_press(int wait_for_key)
                                        ^
unix/x11_frame.h:33:27: note: Function 'get_key_press' argument 1 names different: declaration 'option' definition 'wait_for_key'.
    int get_key_press(int option);
                          ^
unix/x11_frame.cpp:55:41: note: Function 'get_key_press' argument 1 names different: declaration 'option' definition 'wait_for_key'.
int x11_frame_window::get_key_press(int wait_for_key)
                                        ^
unix/x11_plot.h:35:10: performance:inconclusive: Technically the member function 'x11_plot_window::clear' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void clear();
         ^
unix/x11_plot.cpp:31:23: note: Technically the member function 'x11_plot_window::clear' can be static (but you may consider moving to unnamed namespace).
void x11_plot_window::clear()
                      ^
unix/x11_plot.h:35:10: note: Technically the member function 'x11_plot_window::clear' can be static (but you may consider moving to unnamed namespace).
    void clear();
         ^
unix/x11_text.cpp:913:55: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
            background = static_cast<unsigned char>(k >> 4);
                                                      ^
unix/x11_text.cpp:842:35: style:inconclusive: Function 'repaint' argument 1 names different: declaration 'xpos' definition 'xmin'. [funcArgNamesDifferent]
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                  ^
unix/x11_text.h:73:22: note: Function 'repaint' argument 1 names different: declaration 'xpos' definition 'xmin'.
    void repaint(int xpos, int ypos, int maxcol, int maxrow);
                     ^
unix/x11_text.cpp:842:35: note: Function 'repaint' argument 1 names different: declaration 'xpos' definition 'xmin'.
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                  ^
unix/x11_text.cpp:842:45: style:inconclusive: Function 'repaint' argument 2 names different: declaration 'ypos' definition 'xmax'. [funcArgNamesDifferent]
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                            ^
unix/x11_text.h:73:32: note: Function 'repaint' argument 2 names different: declaration 'ypos' definition 'xmax'.
    void repaint(int xpos, int ypos, int maxcol, int maxrow);
                               ^
unix/x11_text.cpp:842:45: note: Function 'repaint' argument 2 names different: declaration 'ypos' definition 'xmax'.
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                            ^
unix/x11_text.cpp:842:55: style:inconclusive: Function 'repaint' argument 3 names different: declaration 'maxcol' definition 'ymin'. [funcArgNamesDifferent]
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                                      ^
unix/x11_text.h:73:42: note: Function 'repaint' argument 3 names different: declaration 'maxcol' definition 'ymin'.
    void repaint(int xpos, int ypos, int maxcol, int maxrow);
                                         ^
unix/x11_text.cpp:842:55: note: Function 'repaint' argument 3 names different: declaration 'maxcol' definition 'ymin'.
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                                      ^
unix/x11_text.cpp:842:65: style:inconclusive: Function 'repaint' argument 4 names different: declaration 'maxrow' definition 'ymax'. [funcArgNamesDifferent]
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                                                ^
unix/x11_text.h:73:54: note: Function 'repaint' argument 4 names different: declaration 'maxrow' definition 'ymax'.
    void repaint(int xpos, int ypos, int maxcol, int maxrow);
                                                     ^
unix/x11_text.cpp:842:65: note: Function 'repaint' argument 4 names different: declaration 'maxrow' definition 'ymax'.
void x11_text_window::repaint(int xmin, int xmax, int ymin, int ymax)
                                                                ^
unix/x11_text.cpp:898:30: style: Variable 'foreground' is assigned a value that is never used. [unreadVariable]
    unsigned char foreground = 0;
                             ^
unix/x11_text.cpp:899:30: style: Variable 'background' is assigned a value that is never used. [unreadVariable]
    unsigned char background = 0;
                             ^
win32/WinText.cpp:562:25: style: Variable 'me->buffer_init' is reassigned a value before the old one has been used. [redundantAssignment]
        me->buffer_init = true;
                        ^
win32/WinText.cpp:558:25: note: me->buffer_init is assigned
        me->buffer_init = true;
                        ^
win32/WinText.cpp:562:25: note: me->buffer_init is overwritten
        me->buffer_init = true;
                        ^
win32/WinText.cpp:545:25: style: The scope of the variable 'length' can be reduced. [variableScope]
    int istart, jstart, length, foreground, background;
                        ^
win32/WinText.cpp:612:29: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
            background = (k >> 4);
                            ^
win32/WinText.cpp:392:13: style: Variable 'hDC' is assigned a value that is never used. [unreadVariable]
    HDC hDC = BeginPaint(window, &ps);
            ^
win32/WinText.cpp:754:21: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
        DWORD error = GetLastError();
                    ^
win32/d_win32.cpp:98:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:129:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:154:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:175:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:190:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:255:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:304:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:329:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:337:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:358:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:378:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:406:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:428:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:486:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:539:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:546:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32.cpp:563:19: warning: Conversion of string literal "win32_get_truecolor called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "win32_get_truecolor called.");
                  ^
win32/d_win32.cpp:569:19: warning: Conversion of string literal "win32_put_truecolor called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "win32_put_truecolor called.");
                  ^
win32/d_win32_disk.cpp:183:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:225:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:261:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:294:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:325:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:455:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:467:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:475:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:525:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:537:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:579:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_disk.cpp:589:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:200:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:243:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:294:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:331:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:353:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:375:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:405:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:427:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:449:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:471:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:478:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:485:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:507:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:523:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:539:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:547:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:558:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:576:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:630:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:644:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:657:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:665:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:672:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/d_win32_gdi.cpp:679:5: style: C-style pointer casting [cstyleCast]
    DI(di);
    ^
win32/frame.cpp:307:9: style: Condition 'quitting' is always true [knownConditionTrueFalse]
    if (quitting)
        ^
win32/frame.cpp:279:12: note: Assuming that condition '!quitting' is not redundant
    while (!quitting)
           ^
win32/frame.cpp:307:9: note: Condition 'quitting' is always true
    if (quitting)
        ^
win32/frame.cpp:315:29: style:inconclusive: Function 'frame_get_key_press' argument 1 names different: declaration 'option' definition 'wait_for_key'. [funcArgNamesDifferent]
int frame_get_key_press(int wait_for_key)
                            ^
win32/frame.h:31:36: note: Function 'frame_get_key_press' argument 1 names different: declaration 'option' definition 'wait_for_key'.
extern int frame_get_key_press(int option);
                                   ^
win32/frame.cpp:315:29: note: Function 'frame_get_key_press' argument 1 names different: declaration 'option' definition 'wait_for_key'.
int frame_get_key_press(int wait_for_key)
                            ^
win32/frame.cpp:39:13: style: Variable 'hDC' is assigned a value that is never used. [unreadVariable]
    HDC hDC = BeginPaint(window, &ps);
            ^
win32/frame.cpp:387:21: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
        DWORD error = GetLastError();
                    ^
win32/os_win32.cpp:406:23: warning: Conversion of string literal "scroll_relative called" to bool always evaluates to true. [incorrectStringBooleanError]
        _ASSERTE(0 && "scroll_relative called");
                      ^
win32/os_win32.cpp:757:19: warning: Conversion of string literal "setnullvideo called" to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "setnullvideo called");
                  ^
win32/parsera.cpp:7:1: warning: Conversion of string literal "Called Abs" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Abs)
^
win32/parsera.cpp:8:1: warning: Conversion of string literal "Called ACos" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ACos)
^
win32/parsera.cpp:9:1: warning: Conversion of string literal "Called ACosh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ACosh)
^
win32/parsera.cpp:10:1: warning: Conversion of string literal "Called Add" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Add)
^
win32/parsera.cpp:11:1: warning: Conversion of string literal "Called AND" to bool always evaluates to true. [incorrectStringBooleanError]
FN(AND)
^
win32/parsera.cpp:12:1: warning: Conversion of string literal "Called ASin" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ASin)
^
win32/parsera.cpp:13:1: warning: Conversion of string literal "Called ASinh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ASinh)
^
win32/parsera.cpp:14:1: warning: Conversion of string literal "Called ATan" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ATan)
^
win32/parsera.cpp:15:1: warning: Conversion of string literal "Called ATanh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ATanh)
^
win32/parsera.cpp:16:1: warning: Conversion of string literal "Called CAbs" to bool always evaluates to true. [incorrectStringBooleanError]
FN(CAbs)
^
win32/parsera.cpp:17:1: warning: Conversion of string literal "Called Ceil" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Ceil)
^
win32/parsera.cpp:18:1: warning: Conversion of string literal "Called Clr1" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Clr1)
^
win32/parsera.cpp:19:1: warning: Conversion of string literal "Called Conj" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Conj)
^
win32/parsera.cpp:20:1: warning: Conversion of string literal "Called Cos" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Cos)
^
win32/parsera.cpp:21:1: warning: Conversion of string literal "Called Cosh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Cosh)
^
win32/parsera.cpp:22:1: warning: Conversion of string literal "Called CosXX" to bool always evaluates to true. [incorrectStringBooleanError]
FN(CosXX)
^
win32/parsera.cpp:23:1: warning: Conversion of string literal "Called CoTan" to bool always evaluates to true. [incorrectStringBooleanError]
FN(CoTan)
^
win32/parsera.cpp:24:1: warning: Conversion of string literal "Called CoTanh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(CoTanh)
^
win32/parsera.cpp:25:1: warning: Conversion of string literal "Called Div" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Div)
^
win32/parsera.cpp:26:1: warning: Conversion of string literal "Called EndInit" to bool always evaluates to true. [incorrectStringBooleanError]
FN(EndInit)
^
win32/parsera.cpp:27:1: warning: Conversion of string literal "Called EQ" to bool always evaluates to true. [incorrectStringBooleanError]
FN(EQ)
^
win32/parsera.cpp:28:1: warning: Conversion of string literal "Called Exp" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Exp)
^
win32/parsera.cpp:29:1: warning: Conversion of string literal "Called Flip" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Flip)
^
win32/parsera.cpp:30:1: warning: Conversion of string literal "Called Floor" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Floor)
^
win32/parsera.cpp:31:1: warning: Conversion of string literal "Called GT" to bool always evaluates to true. [incorrectStringBooleanError]
FN(GT)
^
win32/parsera.cpp:32:1: warning: Conversion of string literal "Called GTE" to bool always evaluates to true. [incorrectStringBooleanError]
FN(GTE)
^
win32/parsera.cpp:33:1: warning: Conversion of string literal "Called Ident" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Ident)
^
win32/parsera.cpp:34:1: warning: Conversion of string literal "Called Imag" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Imag)
^
win32/parsera.cpp:35:1: warning: Conversion of string literal "Called Jump" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Jump)
^
win32/parsera.cpp:36:1: warning: Conversion of string literal "Called JumpLabel" to bool always evaluates to true. [incorrectStringBooleanError]
FN(JumpLabel)
^
win32/parsera.cpp:37:1: warning: Conversion of string literal "Called JumpOnFalse" to bool always evaluates to true. [incorrectStringBooleanError]
FN(JumpOnFalse)
^
win32/parsera.cpp:38:1: warning: Conversion of string literal "Called JumpOnTrue" to bool always evaluates to true. [incorrectStringBooleanError]
FN(JumpOnTrue)
^
win32/parsera.cpp:39:1: warning: Conversion of string literal "Called Lod" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Lod)
^
win32/parsera.cpp:40:1: warning: Conversion of string literal "Called Log" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Log)
^
win32/parsera.cpp:41:1: warning: Conversion of string literal "Called LT" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LT)
^
win32/parsera.cpp:42:1: warning: Conversion of string literal "Called LTE" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LTE)
^
win32/parsera.cpp:43:1: warning: Conversion of string literal "Called Mod" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Mod)
^
win32/parsera.cpp:44:1: warning: Conversion of string literal "Called Mul" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Mul)
^
win32/parsera.cpp:45:1: warning: Conversion of string literal "Called NE" to bool always evaluates to true. [incorrectStringBooleanError]
FN(NE)
^
win32/parsera.cpp:46:1: warning: Conversion of string literal "Called Neg" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Neg)
^
win32/parsera.cpp:47:1: warning: Conversion of string literal "Called One" to bool always evaluates to true. [incorrectStringBooleanError]
FN(One)
^
win32/parsera.cpp:48:1: warning: Conversion of string literal "Called OR" to bool always evaluates to true. [incorrectStringBooleanError]
FN(OR)
^
win32/parsera.cpp:49:1: warning: Conversion of string literal "Called Pwr" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Pwr)
^
win32/parsera.cpp:50:1: warning: Conversion of string literal "Called Real" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Real)
^
win32/parsera.cpp:51:1: warning: Conversion of string literal "Called Recip" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Recip)
^
win32/parsera.cpp:52:1: warning: Conversion of string literal "Called Round" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Round)
^
win32/parsera.cpp:53:1: warning: Conversion of string literal "Called Sin" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sin)
^
win32/parsera.cpp:54:1: warning: Conversion of string literal "Called Sinh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sinh)
^
win32/parsera.cpp:55:1: warning: Conversion of string literal "Called Sqr" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sqr)
^
win32/parsera.cpp:56:1: warning: Conversion of string literal "Called Sqrt" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sqrt)
^
win32/parsera.cpp:57:1: warning: Conversion of string literal "Called Sto" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sto)
^
win32/parsera.cpp:58:1: warning: Conversion of string literal "Called Sub" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sub)
^
win32/parsera.cpp:59:1: warning: Conversion of string literal "Called Tan" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Tan)
^
win32/parsera.cpp:60:1: warning: Conversion of string literal "Called Tanh" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Tanh)
^
win32/parsera.cpp:61:1: warning: Conversion of string literal "Called Trunc" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Trunc)
^
win32/parsera.cpp:62:1: warning: Conversion of string literal "Called Zero" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Zero)
^
win32/parsera.cpp:63:1: warning: Conversion of string literal "Called ANDClr2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ANDClr2)
^
win32/parsera.cpp:64:1: warning: Conversion of string literal "Called Clr2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Clr2)
^
win32/parsera.cpp:65:1: warning: Conversion of string literal "Called Dbl" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Dbl)
^
win32/parsera.cpp:66:1: warning: Conversion of string literal "Called GT2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(GT2)
^
win32/parsera.cpp:67:1: warning: Conversion of string literal "Called ImagFlip" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ImagFlip)
^
win32/parsera.cpp:68:1: warning: Conversion of string literal "Called LodAdd" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodAdd)
^
win32/parsera.cpp:69:1: warning: Conversion of string literal "Called LodConj" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodConj)
^
win32/parsera.cpp:70:1: warning: Conversion of string literal "Called LodDbl" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodDbl)
^
win32/parsera.cpp:71:1: warning: Conversion of string literal "Called LodDup" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodDup)
^
win32/parsera.cpp:72:1: warning: Conversion of string literal "Called LodEQ" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodEQ)
^
win32/parsera.cpp:73:1: warning: Conversion of string literal "Called LodGT" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodGT)
^
win32/parsera.cpp:74:1: warning: Conversion of string literal "Called LodGT2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodGT2)
^
win32/parsera.cpp:75:1: warning: Conversion of string literal "Called LodGTE" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodGTE)
^
win32/parsera.cpp:76:1: warning: Conversion of string literal "Called LodGTE2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodGTE2)
^
win32/parsera.cpp:77:1: warning: Conversion of string literal "Called LodImag" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodImag)
^
win32/parsera.cpp:78:1: warning: Conversion of string literal "Called LodImagAbs" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodImagAbs)
^
win32/parsera.cpp:79:1: warning: Conversion of string literal "Called LodImagAdd" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodImagAdd)
^
win32/parsera.cpp:80:1: warning: Conversion of string literal "Called LodImagFlip" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodImagFlip)
^
win32/parsera.cpp:81:1: warning: Conversion of string literal "Called LodImagMul" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodImagMul)
^
win32/parsera.cpp:82:1: warning: Conversion of string literal "Called LodImagSub" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodImagSub)
^
win32/parsera.cpp:83:1: warning: Conversion of string literal "Called LodLT" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLT)
^
win32/parsera.cpp:84:1: warning: Conversion of string literal "Called LodLT2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLT2)
^
win32/parsera.cpp:85:1: warning: Conversion of string literal "Called LodLTE" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLTE)
^
win32/parsera.cpp:86:1: warning: Conversion of string literal "Called LodLTE2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLTE2)
^
win32/parsera.cpp:87:1: warning: Conversion of string literal "Called LodLTEAnd2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLTEAnd2)
^
win32/parsera.cpp:88:1: warning: Conversion of string literal "Called LodLTEMul" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLTEMul)
^
win32/parsera.cpp:89:1: warning: Conversion of string literal "Called LodLTMul" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodLTMul)
^
win32/parsera.cpp:90:1: warning: Conversion of string literal "Called LodMod2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodMod2)
^
win32/parsera.cpp:91:1: warning: Conversion of string literal "Called LodMul" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodMul)
^
win32/parsera.cpp:92:1: warning: Conversion of string literal "Called LodNE" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodNE)
^
win32/parsera.cpp:93:1: warning: Conversion of string literal "Called LodReal" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodReal)
^
win32/parsera.cpp:94:1: warning: Conversion of string literal "Called LodRealAbs" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealAbs)
^
win32/parsera.cpp:95:1: warning: Conversion of string literal "Called LodRealAdd" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealAdd)
^
win32/parsera.cpp:96:1: warning: Conversion of string literal "Called LodRealC" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealC)
^
win32/parsera.cpp:97:1: warning: Conversion of string literal "Called LodRealFlip" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealFlip)
^
win32/parsera.cpp:98:1: warning: Conversion of string literal "Called LodRealMul" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealMul)
^
win32/parsera.cpp:99:1: warning: Conversion of string literal "Called LodRealPwr" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealPwr)
^
win32/parsera.cpp:100:1: warning: Conversion of string literal "Called LodRealSub" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodRealSub)
^
win32/parsera.cpp:101:1: warning: Conversion of string literal "Called LodSqr" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodSqr)
^
win32/parsera.cpp:102:1: warning: Conversion of string literal "Called LodSqr2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodSqr2)
^
win32/parsera.cpp:103:1: warning: Conversion of string literal "Called LodSub" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodSub)
^
win32/parsera.cpp:104:1: warning: Conversion of string literal "Called LodSubMod" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LodSubMod)
^
win32/parsera.cpp:105:1: warning: Conversion of string literal "Called LT2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LT2)
^
win32/parsera.cpp:106:1: warning: Conversion of string literal "Called LTE2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(LTE2)
^
win32/parsera.cpp:107:1: warning: Conversion of string literal "Called Mod2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Mod2)
^
win32/parsera.cpp:108:1: warning: Conversion of string literal "Called ORClr2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(ORClr2)
^
win32/parsera.cpp:109:1: warning: Conversion of string literal "Called PLodAdd" to bool always evaluates to true. [incorrectStringBooleanError]
FN(PLodAdd)
^
win32/parsera.cpp:110:1: warning: Conversion of string literal "Called PLodSub" to bool always evaluates to true. [incorrectStringBooleanError]
FN(PLodSub)
^
win32/parsera.cpp:111:1: warning: Conversion of string literal "Called Pull2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Pull2)
^
win32/parsera.cpp:112:1: warning: Conversion of string literal "Called Push2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Push2)
^
win32/parsera.cpp:113:1: warning: Conversion of string literal "Called Push2a" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Push2a)
^
win32/parsera.cpp:114:1: warning: Conversion of string literal "Called Push4" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Push4)
^
win32/parsera.cpp:115:1: warning: Conversion of string literal "Called Real2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Real2)
^
win32/parsera.cpp:116:1: warning: Conversion of string literal "Called RealFlip" to bool always evaluates to true. [incorrectStringBooleanError]
FN(RealFlip)
^
win32/parsera.cpp:117:1: warning: Conversion of string literal "Called Sqr0" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sqr0)
^
win32/parsera.cpp:118:1: warning: Conversion of string literal "Called Sqr3" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sqr3)
^
win32/parsera.cpp:119:1: warning: Conversion of string literal "Called Sto2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(Sto2)
^
win32/parsera.cpp:120:1: warning: Conversion of string literal "Called StoClr1" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoClr1)
^
win32/parsera.cpp:121:1: warning: Conversion of string literal "Called StoClr2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoClr2)
^
win32/parsera.cpp:122:1: warning: Conversion of string literal "Called StoDbl" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoDbl)
^
win32/parsera.cpp:123:1: warning: Conversion of string literal "Called StoDup" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoDup)
^
win32/parsera.cpp:124:1: warning: Conversion of string literal "Called StoMod2" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoMod2)
^
win32/parsera.cpp:125:1: warning: Conversion of string literal "Called StoSqr" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoSqr)
^
win32/parsera.cpp:126:1: warning: Conversion of string literal "Called StoSqr0" to bool always evaluates to true. [incorrectStringBooleanError]
FN(StoSqr0)
^
win32/parsera.cpp:130:19: warning: Conversion of string literal "fform_per_pixel called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "fform_per_pixel called.");
                  ^
win32/parsera.cpp:176:19: warning: Conversion of string literal "fFormula called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "fFormula called.");
                  ^
win32/parsera.cpp:209:19: warning: Conversion of string literal "Img_Setup called." to bool always evaluates to true. [incorrectStringBooleanError]
    _ASSERTE(0 && "Img_Setup called.");
                  ^
win32/plot.cpp:290:21: style:inconclusive: Function 'plot_init' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
int plot_init(Plot *me, HINSTANCE instance, LPCSTR title)
                    ^
win32/plot.h:32:28: note: Function 'plot_init' argument 1 names different: declaration 'p' definition 'me'.
extern int plot_init(Plot *p, HINSTANCE instance, LPCSTR title);
                           ^
win32/plot.cpp:290:21: note: Function 'plot_init' argument 1 names different: declaration 'p' definition 'me'.
int plot_init(Plot *me, HINSTANCE instance, LPCSTR title)
                    ^
win32/plot.cpp:318:27: style:inconclusive: Function 'plot_terminate' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
void plot_terminate(Plot *me)
                          ^
win32/plot.h:33:34: note: Function 'plot_terminate' argument 1 names different: declaration 'p' definition 'me'.
extern void plot_terminate(Plot *p);
                                 ^
win32/plot.cpp:318:27: note: Function 'plot_terminate' argument 1 names different: declaration 'p' definition 'me'.
void plot_terminate(Plot *me)
                          ^
win32/plot.cpp:349:24: style:inconclusive: Function 'plot_window' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
void plot_window(Plot *me, HWND parent)
                       ^
win32/plot.h:34:31: note: Function 'plot_window' argument 1 names different: declaration 'p' definition 'me'.
extern void plot_window(Plot *p, HWND parent);
                              ^
win32/plot.cpp:349:24: note: Function 'plot_window' argument 1 names different: declaration 'p' definition 'me'.
void plot_window(Plot *me, HWND parent)
                       ^
win32/plot.cpp:370:29: style:inconclusive: Function 'plot_write_pixel' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
void plot_write_pixel(Plot *me, int x, int y, int color)
                            ^
win32/plot.h:35:36: note: Function 'plot_write_pixel' argument 1 names different: declaration 'p' definition 'me'.
extern void plot_write_pixel(Plot *p, int x, int y, int color);
                                   ^
win32/plot.cpp:370:29: note: Function 'plot_write_pixel' argument 1 names different: declaration 'p' definition 'me'.
void plot_write_pixel(Plot *me, int x, int y, int color)
                            ^
win32/plot.cpp:379:27: style:inconclusive: Function 'plot_read_pixel' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
int plot_read_pixel(Plot *me, int x, int y)
                          ^
win32/plot.h:36:34: note: Function 'plot_read_pixel' argument 1 names different: declaration 'p' definition 'me'.
extern int plot_read_pixel(Plot *p, int x, int y);
                                 ^
win32/plot.cpp:379:27: note: Function 'plot_read_pixel' argument 1 names different: declaration 'p' definition 'me'.
int plot_read_pixel(Plot *me, int x, int y)
                          ^
win32/plot.cpp:387:28: warning: Function 'plot_write_span' argument order different: declaration 'p, x, y, lastx, pixels' definition 'me, y, x, lastx, pixels' [funcArgOrderDifferent]
void plot_write_span(Plot *me, int y, int x, int lastx, const BYTE *pixels)
                           ^
win32/plot.h:37:35: note: Function 'plot_write_span' argument order different: declaration 'p, x, y, lastx, pixels' definition 'me, y, x, lastx, pixels'
extern void plot_write_span(Plot *p, int x, int y, int lastx, const BYTE *pixels);
                                  ^
win32/plot.cpp:387:28: note: Function 'plot_write_span' argument order different: declaration 'p, x, y, lastx, pixels' definition 'me, y, x, lastx, pixels'
void plot_write_span(Plot *me, int y, int x, int lastx, const BYTE *pixels)
                           ^
win32/plot.cpp:398:23: style:inconclusive: Function 'plot_flush' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
void plot_flush(Plot *me)
                      ^
win32/plot.h:44:30: note: Function 'plot_flush' argument 1 names different: declaration 'p' definition 'me'.
extern void plot_flush(Plot *p);
                             ^
win32/plot.cpp:398:23: note: Function 'plot_flush' argument 1 names different: declaration 'p' definition 'me'.
void plot_flush(Plot *me)
                      ^
win32/plot.cpp:409:27: warning: Function 'plot_read_span' argument order different: declaration 'p, x, y, lastx, pixels' definition 'me, y, x, lastx, pixels' [funcArgOrderDifferent]
void plot_read_span(Plot *me, int y, int x, int lastx, BYTE *pixels)
                          ^
win32/plot.h:38:34: note: Function 'plot_read_span' argument order different: declaration 'p, x, y, lastx, pixels' definition 'me, y, x, lastx, pixels'
extern void plot_read_span(Plot *p, int x, int y, int lastx, BYTE *pixels);
                                 ^
win32/plot.cpp:409:27: note: Function 'plot_read_span' argument order different: declaration 'p, x, y, lastx, pixels' definition 'me, y, x, lastx, pixels'
void plot_read_span(Plot *me, int y, int x, int lastx, BYTE *pixels)
                          ^
win32/plot.cpp:419:31: style:inconclusive: Function 'plot_set_line_mode' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
void plot_set_line_mode(Plot *me, int mode)
                              ^
win32/plot.h:39:38: note: Function 'plot_set_line_mode' argument 1 names different: declaration 'p' definition 'me'.
extern void plot_set_line_mode(Plot *p, int mode);
                                     ^
win32/plot.cpp:419:31: note: Function 'plot_set_line_mode' argument 1 names different: declaration 'p' definition 'me'.
void plot_set_line_mode(Plot *me, int mode)
                              ^
win32/plot.cpp:423:27: style:inconclusive: Function 'plot_draw_line' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
void plot_draw_line(Plot *me, int x1, int y1, int x2, int y2, int color)
                          ^
win32/plot.h:40:34: note: Function 'plot_draw_line' argument 1 names different: declaration 'p' definition 'me'.
extern void plot_draw_line(Plot *p, int x1, int y1, int x2, int y2, int color);
                                 ^
win32/plot.cpp:423:27: note: Function 'plot_draw_line' argument 1 names different: declaration 'p' definition 'me'.
void plot_draw_line(Plot *me, int x1, int y1, int x2, int y2, int color)
                          ^
win32/plot.cpp:428:23: style:inconclusive: Function 'plot_resize' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
int plot_resize(Plot *me)
                      ^
win32/plot.h:41:30: note: Function 'plot_resize' argument 1 names different: declaration 'p' definition 'me'.
extern int plot_resize(Plot *p);
                             ^
win32/plot.cpp:428:23: note: Function 'plot_resize' argument 1 names different: declaration 'p' definition 'me'.
int plot_resize(Plot *me)
                      ^
win32/plot.cpp:442:29: style:inconclusive: Function 'plot_read_palette' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
int plot_read_palette(Plot *me)
                            ^
win32/plot.h:42:36: note: Function 'plot_read_palette' argument 1 names different: declaration 'p' definition 'me'.
extern int plot_read_palette(Plot *p);
                                   ^
win32/plot.cpp:442:29: note: Function 'plot_read_palette' argument 1 names different: declaration 'p' definition 'me'.
int plot_read_palette(Plot *me)
                            ^
win32/plot.cpp:458:30: style:inconclusive: Function 'plot_write_palette' argument 1 names different: declaration 'p' definition 'me'. [funcArgNamesDifferent]
int plot_write_palette(Plot *me)
                             ^
win32/plot.h:43:37: note: Function 'plot_write_palette' argument 1 names different: declaration 'p' definition 'me'.
extern int plot_write_palette(Plot *p);
                                    ^
win32/plot.cpp:458:30: note: Function 'plot_write_palette' argument 1 names different: declaration 'p' definition 'me'.
int plot_write_palette(Plot *me)
                             ^
win32/plot.cpp:486:21: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
        DWORD error = GetLastError();
                    ^
fractint/dos/tplus.c:303:0: style: The function 'CheckForTPlus' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:181:0: style: The function 'EndTGA' is never used. [unusedFunction]

^
common/mpmath_c.cpp:687:0: style: The function 'ExpFloat14' is never used. [unusedFunction]

^
fractint/dos/tplus.c:366:0: style: The function 'FillTPlusRegion' is never used. [unusedFunction]

^
common/parser.cpp:2277:0: style: The function 'FnctNotFound' is never used. [unusedFunction]

^
fractint/win/PROFILE.C:51:0: style: The function 'GetFloatParam' is never used. [unusedFunction]

^
common/hcmplx.cpp:50:0: style: The function 'HComplexAdd' is never used. [unusedFunction]

^
common/hcmplx.cpp:29:0: style: The function 'HComplexInv' is never used. [unusedFunction]

^
common/hcmplx.cpp:66:0: style: The function 'HComplexMinus' is never used. [unusedFunction]

^
common/hcmplx.cpp:8:0: style: The function 'HComplexMult' is never used. [unusedFunction]

^
common/hcmplx.cpp:20:0: style: The function 'HComplexSqr' is never used. [unusedFunction]

^
common/hcmplx.cpp:58:0: style: The function 'HComplexSub' is never used. [unusedFunction]

^
common/fractalb.cpp:903:0: style: The function 'JuliaZpowerbnFractal' is never used. [unusedFunction]

^
common/fractalb.cpp:889:0: style: The function 'JuliabfFractal' is never used. [unusedFunction]

^
common/fractals.cpp:1290:0: style: The function 'LPopcornFractal_Old' is never used. [unusedFunction]

^
common/fpu087.cpp:111:0: style: The function 'LogFloat14' is never used. [unusedFunction]

^
common/mpmath_c.cpp:162:0: style: The function 'MPCcmp' is never used. [unusedFunction]

^
common/mpmath_c.cpp:72:0: style: The function 'MPCsqr' is never used. [unusedFunction]

^
fractint/dos/tplus.c:450:0: style: The function 'MatchTPlusMode' is never used. [unusedFunction]

^
common/parser.cpp:2273:0: style: The function 'NotAFnct' is never used. [unusedFunction]

^
common/fractals.cpp:1227:0: style: The function 'PopcornFractal_Old' is never used. [unusedFunction]

^
fractint/dos/tplus.c:48:0: style: The function 'ReadTPWord' is never used. [unusedFunction]

^
common/fpu087.cpp:141:0: style: The function 'RegSftFloat' is never used. [unusedFunction]

^
fractint/win/PROFILE.C:74:0: style: The function 'SaveFloatParam' is never used. [unusedFunction]

^
fractint/win/PROFILE.C:81:0: style: The function 'SaveIntParam' is never used. [unusedFunction]

^
unix/video.cpp:536:0: style: The function 'SetupShadowVideo' is never used. [unusedFunction]

^
unix/video.cpp:530:0: style: The function 'ShadowVideo' is never used. [unusedFunction]

^
fractint/dos/tplus.c:483:0: style: The function 'TPlusZoom' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:217:0: style: The function 'TranspPerPixel' is never used. [unusedFunction]

^
fractint/win/WINFRACT.C:214:0: style: The function 'WinMain' is never used. [unusedFunction]

^
fractint/dos/tplus.c:38:0: style: The function 'WriteTPWord' is never used. [unusedFunction]

^
fractint/win/WINDOS.C:110:0: style: The function '_bios_serialcom' is never used. [unusedFunction]

^
fractint/win/WINDOS.C:1087:0: style: The function '_setenvp' is never used. [unusedFunction]

^
win32/os_win32.cpp:620:0: style: The function 'abortmsg' is never used. [unusedFunction]

^
common/bigflt.cpp:1306:0: style: The function 'atan_bf' is never used. [unusedFunction]

^
common/bignum.cpp:1489:0: style: The function 'atan_bn' is never used. [unusedFunction]

^
common/bigflt.cpp:21:0: style: The function 'bf_hexdump' is never used. [unusedFunction]

^
common/bigflt.cpp:1258:0: style: The function 'bftostr_f' is never used. [unusedFunction]

^
common/bigflt.cpp:276:0: style: The function 'bntobf' is never used. [unusedFunction]

^
common/fractalb.cpp:217:0: style: The function 'comparevalues' is never used. [unusedFunction]

^
common/fractalb.cpp:229:0: style: The function 'comparevaluesbf' is never used. [unusedFunction]

^
common/fractals.cpp:554:0: style: The function 'complex_div' is never used. [unusedFunction]

^
common/bignum.cpp:193:0: style: The function 'convert_bn' is never used. [unusedFunction]

^
common/parser.cpp:505:0: style: The function 'dStkLodDbl' is never used. [unusedFunction]

^
common/parser.cpp:474:0: style: The function 'dStkLodDup' is never used. [unusedFunction]

^
common/parser.cpp:483:0: style: The function 'dStkLodSqr' is never used. [unusedFunction]

^
common/parser.cpp:492:0: style: The function 'dStkLodSqr2' is never used. [unusedFunction]

^
common/parser.cpp:514:0: style: The function 'dStkSqr0' is never used. [unusedFunction]

^
common/parser.cpp:522:0: style: The function 'dStkSqr3' is never used. [unusedFunction]

^
fractint/win/WINDOS.C:553:0: style: The function 'debugmessage' is never used. [unusedFunction]

^
fractint/win/WINDOS2.C:698:0: style: The function 'despace' is never used. [unusedFunction]

^
fractint/win/WINDOS2.C:779:0: style: The function 'discardscreen' is never used. [unusedFunction]

^
win32/d_win32_disk.cpp:465:0: style: The function 'disk_unget_key' is never used. [unusedFunction]

^
common/bigflt.cpp:1234:0: style: The function 'div_bf_int' is never used. [unusedFunction]

^
common/bignum.cpp:1467:0: style: The function 'div_bn' is never used. [unusedFunction]

^
common/bignum.cpp:1437:0: style: The function 'div_bn_int' is never used. [unusedFunction]

^
common/drivers.cpp:157:0: style: The function 'driver_read_span' is never used. [unusedFunction]

^
common/drivers.cpp:140:0: style: The function 'driver_redraw' is never used. [unusedFunction]

^
common/drivers.cpp:169:0: style: The function 'driver_set_line_mode' is never used. [unusedFunction]

^
common/drivers.cpp:121:0: style: The function 'driver_terminate' is never used. [unusedFunction]

^
common/drivers.cpp:270:0: style: The function 'driver_validate_mode' is never used. [unusedFunction]

^
common/drivers.cpp:163:0: style: The function 'driver_write_span' is never used. [unusedFunction]

^
unix/unixscr.cpp:757:0: style: The function 'endvideo' is never used. [unusedFunction]

^
unix/d_x11.cpp:441:0: style: The function 'erase_text_screen' is never used. [unusedFunction]

^
common/bigflt.cpp:2186:0: style: The function 'extract_10' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:142:0: style: The function 'farmessage' is never used. [unusedFunction]

^
fractint/win/WINDOS.C:196:0: style: The function 'farread' is never used. [unusedFunction]

^
fractint/win/WINDOS.C:205:0: style: The function 'farwrite' is never used. [unusedFunction]

^
common/mpmath_c.cpp:2128:0: style: The function 'fg2MP086' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:175:0: style: The function 'findfont' is never used. [unusedFunction]

^
unix/general.cpp:686:0: style: The function 'fix_ranges' is never used. [unusedFunction]

^
common/bignumc.cpp:960:0: style: The function 'floattobf1' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:144:0: style: The function 'fromvideotable' is never used. [unusedFunction]

^
common/bigflt.cpp:1192:0: style: The function 'full_mult_bf' is never used. [unusedFunction]

^
common/bignum.cpp:1379:0: style: The function 'full_mult_bn' is never used. [unusedFunction]

^
common/bigflt.cpp:1210:0: style: The function 'full_square_bf' is never used. [unusedFunction]

^
common/bignum.cpp:1413:0: style: The function 'full_square_bn' is never used. [unusedFunction]

^
unix/video.cpp:619:0: style: The function 'get_a_char' is never used. [unusedFunction]

^
unix/d_x11.cpp:912:0: style: The function 'handle_esc' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:147:0: style: The function 'home' is never used. [unusedFunction]

^
unix/unixscr.cpp:406:0: style: The function 'initUnixWindow' is never used. [unusedFunction]

^
unix/d_x11.cpp:1404:0: style: The function 'input_pending' is never used. [unusedFunction]

^
unix/unix.cpp:25:0: style: The function 'intdos' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:149:0: style: The function 'intro_overlay' is never used. [unusedFunction]

^
common/bigflt.cpp:1266:0: style: The function 'inv_bf' is never used. [unusedFunction]

^
common/bignum.cpp:1455:0: style: The function 'inv_bn' is never used. [unusedFunction]

^
common/parser.cpp:1421:0: style: The function 'lStkASinh' is never used. [unusedFunction]

^
common/parser.cpp:978:0: style: The function 'lStkModOld' is never used. [unusedFunction]

^
common/parser.cpp:1259:0: style: The function 'lStkRecip' is never used. [unusedFunction]

^
unix/d_x11.cpp:1545:0: style: The function 'load_font' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:222:0: style: The function 'load_fractint_cfg' is never used. [unusedFunction]

^
common/parser.cpp:1416:0: style: The function 'mStkASinh' is never used. [unusedFunction]

^
common/parser.cpp:1245:0: style: The function 'mStkRecip' is never used. [unusedFunction]

^
fractint/win/WINFRACT.C:2180:0: style: The function 'mono_dib_palette' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:137:0: style: The function 'normalize' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:155:0: style: The function 'printer_overlay' is never used. [unusedFunction]

^
common/fpu087.cpp:104:0: style: The function 'r16Mul' is never used. [unusedFunction]

^
unix/unixscr.cpp:1052:0: style: The function 'readvideoline' is never used. [unusedFunction]

^
fractint/win/WINDOS2.C:714:0: style: The function 'restoregraphics' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:152:0: style: The function 'rotate_overlay' is never used. [unusedFunction]

^
fractint/win/WINDOS2.C:711:0: style: The function 'savegraphics' is never used. [unusedFunction]

^
common/bigflt.cpp:2194:0: style: The function 'scale_10' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:143:0: style: The function 'setvideomode' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:221:0: style: The function 'setvideotext' is never used. [unusedFunction]

^
common/fractalb.cpp:178:0: style: The function 'show_three_bf' is never used. [unusedFunction]

^
common/fractalb.cpp:166:0: style: The function 'show_two_bf' is never used. [unusedFunction]

^
common/fractalb.cpp:242:0: style: The function 'show_var_bf' is never used. [unusedFunction]

^
common/fractalb.cpp:26:0: style: The function 'show_var_bn' is never used. [unusedFunction]

^
common/fractalb.cpp:192:0: style: The function 'showaspect' is never used. [unusedFunction]

^
common/fractalb.cpp:85:0: style: The function 'showbfglobals' is never used. [unusedFunction]

^
common/fractalb.cpp:54:0: style: The function 'showcorners' is never used. [unusedFunction]

^
common/fractalb.cpp:101:0: style: The function 'showcornersbf' is never used. [unusedFunction]

^
common/fractalb.cpp:136:0: style: The function 'showcornersbfs' is never used. [unusedFunction]

^
common/realdos.cpp:1886:0: style: The function 'showvidlength' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:120:0: style: The function 'spawnl' is never used. [unusedFunction]

^
common/bigflt.cpp:1283:0: style: The function 'sqrt_bf' is never used. [unusedFunction]

^
common/bignum.cpp:756:0: style: The function 'sqrt_bn' is never used. [unusedFunction]

^
common/bignum.cpp:321:0: style: The function 'strlen_needed' is never used. [unusedFunction]

^
common/bigflt.cpp:146:0: style: The function 'strlen_needed_bf' is never used. [unusedFunction]

^
common/bignum.cpp:246:0: style: The function 'strtobn' is never used. [unusedFunction]

^
unix/unix.cpp:155:0: style: The function 'strupr' is never used. [unusedFunction]

^
unix/x11_text.cpp:191:0: style: The function 'text_off' is never used. [unusedFunction]

^
fractint/win/WINSTUBS.C:213:0: style: The function 'tovideotable' is never used. [unusedFunction]

^
unix/general.cpp:89:0: style: The function 'waitkeypressed' is never used. [unusedFunction]

^
win32/d_win32.cpp:126:0: style: The function 'win32_init' is never used. [unusedFunction]

^
win32/d_win32.cpp:269:0: style: The function 'win32_set_video_mode' is never used. [unusedFunction]

^
win32/WinText.cpp:384:0: style: The function 'wintext_kill_focus' is never used. [unusedFunction]

^
win32/WinText.cpp:379:0: style: The function 'wintext_set_focus' is never used. [unusedFunction]

^
unix/unixscr.cpp:983:0: style: The function 'writevideoline' is never used. [unusedFunction]

^
unix/d_x11.cpp:2784:0: style: The function 'x11_buzzer' is never used. [unusedFunction]

^
unix/d_x11.cpp:2828:0: style: The function 'x11_delay' is never used. [unusedFunction]

^
unix/d_x11.cpp:2770:0: style: The function 'x11_discard_screen' is never used. [unusedFunction]

^
unix/d_x11.cpp:2811:0: style: The function 'x11_diskp' is never used. [unusedFunction]

^
unix/d_x11.cpp:2393:0: style: The function 'x11_display_string' is never used. [unusedFunction]

^
unix/d_x11.cpp:2387:0: style: The function 'x11_draw_line' is never used. [unusedFunction]

^
unix/d_x11.cpp:2817:0: style: The function 'x11_get_char_attr' is never used. [unusedFunction]

^
unix/d_x11.cpp:2423:0: style: The function 'x11_get_key' is never used. [unusedFunction]

^
unix/d_x11.cpp:2833:0: style: The function 'x11_get_max_screen' is never used. [unusedFunction]

^
unix/d_x11.cpp:2327:0: style: The function 'x11_get_truecolor' is never used. [unusedFunction]

^
unix/d_x11.cpp:2707:0: style: The function 'x11_hide_text_cursor' is never used. [unusedFunction]

^
unix/d_x11.cpp:1593:0: style: The function 'x11_init' is never used. [unusedFunction]

^
unix/d_x11.cpp:2777:0: style: The function 'x11_init_fm' is never used. [unusedFunction]

^
unix/d_x11.cpp:2477:0: style: The function 'x11_key_cursor' is never used. [unusedFunction]

^
unix/d_x11.cpp:2518:0: style: The function 'x11_key_pressed' is never used. [unusedFunction]

^
unix/d_x11.cpp:2700:0: style: The function 'x11_move_cursor' is never used. [unusedFunction]

^
unix/d_x11.cpp:2805:0: style: The function 'x11_mute' is never used. [unusedFunction]

^
unix/d_x11.cpp:1697:0: style: The function 'x11_pause' is never used. [unusedFunction]

^
unix/d_x11.cpp:2823:0: style: The function 'x11_put_char_attr' is never used. [unusedFunction]

^
unix/d_x11.cpp:2646:0: style: The function 'x11_put_string' is never used. [unusedFunction]

^
unix/d_x11.cpp:2332:0: style: The function 'x11_put_truecolor' is never used. [unusedFunction]

^
unix/d_x11.cpp:2249:0: style: The function 'x11_read_span' is never used. [unusedFunction]

^
unix/d_x11.cpp:1925:0: style: The function 'x11_resize' is never used. [unusedFunction]

^
unix/d_x11.cpp:2402:0: style: The function 'x11_restore_graphics' is never used. [unusedFunction]

^
unix/d_x11.cpp:1701:0: style: The function 'x11_resume' is never used. [unusedFunction]

^
unix/d_x11.cpp:2398:0: style: The function 'x11_save_graphics' is never used. [unusedFunction]

^
unix/d_x11.cpp:2736:0: style: The function 'x11_scroll_up' is never used. [unusedFunction]

^
unix/d_x11.cpp:2714:0: style: The function 'x11_set_attr' is never used. [unusedFunction]

^
unix/d_x11.cpp:2686:0: style: The function 'x11_set_clear' is never used. [unusedFunction]

^
unix/d_x11.cpp:2668:0: style: The function 'x11_set_for_text' is never used. [unusedFunction]

^
unix/d_x11.cpp:2838:0: style: The function 'x11_set_keyboard_timeout' is never used. [unusedFunction]

^
unix/d_x11.cpp:2353:0: style: The function 'x11_set_line_mode' is never used. [unusedFunction]

^
unix/d_x11.cpp:2615:0: style: The function 'x11_set_video_mode' is never used. [unusedFunction]

^
unix/d_x11.cpp:2559:0: style: The function 'x11_shell' is never used. [unusedFunction]

^
unix/d_x11.cpp:2798:0: style: The function 'x11_sound_off' is never used. [unusedFunction]

^
unix/d_x11.cpp:2790:0: style: The function 'x11_sound_on' is never used. [unusedFunction]

^
unix/d_x11.cpp:2756:0: style: The function 'x11_stack_screen' is never used. [unusedFunction]

^
unix/d_x11.cpp:2539:0: style: The function 'x11_unget_key' is never used. [unusedFunction]

^
unix/d_x11.cpp:2763:0: style: The function 'x11_unstack_screen' is never used. [unusedFunction]

^
unix/d_x11.cpp:1671:0: style: The function 'x11_validate_mode' is never used. [unusedFunction]

^
unix/d_x11.cpp:2534:0: style: The function 'x11_wait_key_pressed' is never used. [unusedFunction]

^
unix/d_x11.cpp:1805:0: style: The function 'x11_window' is never used. [unusedFunction]

^
unix/d_x11.cpp:2274:0: style: The function 'x11_write_span' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

