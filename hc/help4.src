~Topic=Startup Parameters\, Parameter Files
; This topic is online only.

~Format-
    { Summary of all Parameters }
    { Introduction to Parameters }
    { Using the Command Line }
    { Setting Defaults (sstools.ini File) }
    { Parameter Files and the <@> Command }
    { General Parameter Syntax }
    { Startup Parameters }
    { Calculation Mode Parameters }
    { Fractal Type Parameters }
    { Image Calculation Parameters }
    { Passes Parameters }
    { Color Parameters }
    { Doodad Parameters }
    { File Parameters }
    { Sound Parameters }
    { Video Parameters }
    { 3D Parameters }
;
;
~Topic=Summary of all Parameters, Label=HELP_COMMANDS
; This topic is online only.
~Format-
{Startup Parameters}
  @filename[/setname]      Process commands from a file
  [filename=]filename      Start with this saved file (one saved by Id
                           or a generic GIF file [treated as a plasma cloud])
  makepar=parfile[/entry]  Invokes batch facility to copy a GIF to
                           par format with colors.
  maxlinelength=nnn        Sets maximum width of lines written to par files.
  batch=yes                Batch mode run (display image, save-to-disk, exit)
  autokey=play|record      Playback or record keystrokes
  autokeyname=<path>\\filename  File for autokey mode, default auto.key
  makedoc=filename         Create Id documentation file
  maxhistory=<nnn>         Set image capacity of history feature.  A higher
                           number stores more images but uses more memory.
  tempdir=directory        Place temporary files here
  workdir=directory        Directory for miscellaneous written files
  curdir=yes|no            When set to yes, Id checks current directory
                           before default directory when opening files.  Use
                           this command when testing temporary .frm, .l, etc.
                           files in the current directory.
  comment=comment1/comment2/comment3/comment4
                           Inserts comments into par files.
~FF
{Calculation Mode Parameters}
  passes=1|2|3|g|b|d|t|g1..g6|s|o  Select single-pass, dual-pass, triple-pass
                           solid-guessing, solid-guessing stop after pass n,
                           boundary-tracing, diffusion, tesseral,
                           synchronous orbits, or orbits drawing algorithms
  fillcolor=normal|<nnn>   Sets a block fill color for use with Boundary
                           Tracing and Tesseral options
  float=yes                For most functions changes from integer math to fp
  symmetry=xxxx            Force symmetry to None, X axis, Y axis, XY axis,
                           origin, or pi symmetry.  Useful as a speedup.  Only
                           use this feature if the fractal actually has the
                           stated symmetry, otherwise may not work as expected.
  bfdigits=<nnn>           Force nnn digits if arbitrary precision used (not
                           recommended - this is a developer feature.)
  mathtolerance=<nnn>/<nnn> This commands controls the logic that automatically
                           selects one of integer/float/arbitrary precision
                           based on precision requirements of the current zoom
                           depth.  The first number controls the integer/float
                           transition, and the second number controls the
                           float/arbitrary precision transition.
  minstack=<nnn>           For SOI (passes=s).  This controls the minimum amount
                           of stack memory reserved during synchronous orbits.
~FF
{Fractal Type Parameters}
  type=fractaltype         Perform this Fractal Type (default = mandel)
                           See {Fractal Types} for a full list
  params=xxx[/xxx[/...     Begin with these extra Parameter values
                           (Examples: "params=4", "params=-0.480/0.626")
  function=fn1/.../fn4     Allows specification of transcendental functions
                           with types using variable functions.  Values are
                           sin, cos, tan, cotan, sinh, cosh, tanh, cotanh,
                           exp, log, sqr, recip (1/z), ident (identity),
                           conj, flip, zero, one, cosxx (cos with bug), asin,
                           asinh, acos, acosh, atan, atanh, sqrt, abs, cabs,
                           floor, ceil, trunc, round
  formulaname=name         Formula name for "type=formula" fractals
  lname=name               L-System name for "type=lsystem" fractals
  ifs=name                 IFS name for "type=ifs" fractals
  3dmode=monocular|left|right|red-blue  Sets the 3D mode used with julibrot
  julibrot3d=nn[/nn[/nn[/nn[/nn[/nn]]]]]")  Sets julibrot 3D parameters zdots,
                           origin, depth, height, width, and distance
  julibroteyes=nn          Distance between the virtual eyes for julibrot
  julibrotfromto=nn/nn[/nn/nn] "From-to" parameters used for julibrot
  miim=depth|breadth|walk[/left|right] Parameters for MIIM julias.
~FF
{Image Calculation Parameters}
  corners=[xmin/xmax/ymin/ymax[/x3rd/y3rd]]
                           Begin with these coordinates
                           (Example: "corners=-0.739/-0.736/0.288/0.291")
                           With no parameters causes <B> command to output
                           "corners=" instead of center-mag.
  center-mag=[Xctr/Yctr/Mag[/Xmagfactor/Rotation/Skew]]
                           An alternative method of entering corners.
                           (Example: "center-mag=-0.7375/0.2895/300")
                           With no parameters causes <B> command to output
                           "center-mag=" (default) instead of corners.
  maxiter=nnn              Maximum number of iterations (default = 150)
  bailout=nnnn             Use this as the iteration bailout value (instead
                           of the default (4.0 for most fractal types)
  bailoutest=mod|real|imag|or|and|manh|manr  Sets bailout test (default = mod)
  initorbit=nnn/nnn        Sets the value used to initialize Mandelbrot orbits
                           to the given complex number (real and imag parts)
  initorbit=pixel          Sets the value used to initialize Mandelbrot orbits
                           to the complex number corresponding to the screen
                           pixel.  This is the default for most types.
  rseed=nnnnn              Random number seed, for reproducable plasma clouds
  showdot=[auto|bright|medium|dark|nn]/size  Colors the current dot being
                           calculated color nn or an automatically calculated
                           color (-1 disables).  The second parameter is the
                           size of the traveling pointer.
  aspectdrift=nn           How much the aspect ratio can vary from normal due
                           to zooming. (default is 0.02)
{Passes Parameters}
  periodicity=[no|show|nnn] Controls periodicity checking. "no" turns checking
                           off; entering a number nnn controls the tightness
                           of checking (default 1, higher is more stringent)
                           "show" or a neg value colors caught points white.
  orbitdelay=nn            Starts plotting orbits after the nth orbit.
  orbitinterval=nn         Plots every nth orbit point with "passes=o".
  screencoords=yes|no      Maintain screen coordinates constant.
  orbitdrawmode=rect|line  Use rectangular mode or line mode for orbits.
{Color Parameters}
  inside=nnn|maxiter|zmag|bof60|bof61|epscr|star|per|atan|fmod
                           Fractal interior color ("inside=0" for black)
  outside=nnn|iter|real|imag|mult|summ|atan|fmod|tdis
                           Fractal exterior color options
  map=<path>\\filename      Use filename as the default color map
  colors=@filename|colorspec Sets current image color map from file or spec
  recordcolors=auto|comment|yes Sets method of writing colors in par files.
                           Auto causes "colors=@mapfile" to be written if
                           colors came from loading a color map.  Yes and
                           comment force compressed colors always.  Comment
                           also writes map name in a comment if colors came
                           from a map file.  Default is auto.
  cyclerange=nnn/nnn       Range of colors to cycle (default 1/255)
  cyclelimit=nnn           Color-cycler speed-limit (1 to 256, default = 55)
  olddemmcolors=yes|no     Use old coloring scheme with distance estimator
  textcolors=aa/bb/cc/...  Set text screen colors
  textcolors=mono          Set text screen colors to simple black and white
  truecolor=yes            Writes truecolor information to Targa file.
  truemode=def|iter        Writes default color scheme or escape iteration to
                           Targa file.
  nobof=yes|no             Causes "inside=bof60" & bof61 to NOT duplicate the
                           bof images, but function like the other "inside="
                           options.  Default is no.

{Doodad Parameters}
  logmap=yes|old|nn        Yes maps logarithm of iteration to color.  Old uses
                           old method.  >1 compresses, <-1 for quadratic.
  logmode=fly|table|auto   Fly forces on-the-fly calculation of logmap.  Table
                           forces the use of the logmap array.  Auto causes
                           logmap to be recalculated automatically when
                           zooming.
  ranges=nn/nn/nn/...      Ranges of iteration values to map to colors
  distest=nnn/nnn          Distance estimator method
  decomp=nn                Decomposition toggle, value 2 to 256.
  biomorph=nnn             Biomorph Coloring
  potential=nn[/nn[/nn[/16bit]]]  Continuous potential
  invert=nn/nn/nn          Turns on inversion - turns images 'inside out'
  finattract=yes           Look for finite attractor in Julia types
  exitnoask=yes            bypasses the final "are you sure?" exit screen

{Sound Parameters}
  sound=off|beep|x|y|z     Nobody ever plays with fractals at work, do they?
        /pc|fm/quant       x|y|z can be used to add sound to attractor
                           fractals, the orbits command, and reading GIFs.
                           See {Sound Controls}.  The note frequency can be
                           quantized, or rounded to the next proper note.
  hertz=nnn                Base frequency for sound effects
  orbitdelay=nn            Slows up the display of orbits (by nn/10000 sec)
  showorbit=yes|no         Causes orbits to be toggled on at start of image
                           generation.
  orbitsave=sound          Causes sound values of orbits of escape-time
                           fractals and orbit fractals to be saved in a
                           file suitable for post-processing to midi.

{Advanced Sound Controls}
  polyphony=nn             The number of voices audible at one time.
  wavetype=nn              Selects the waveform used by the voices.
  attack=nn                Time for note to reach full volume.
  decay=nn                 Time for note to reach zero volume.
  sustain=nn               Level at which note is maintained on.
  srelease=nn              Time note takes to release.  Note the leading 'S'.
  volume=nn                Volume adjustment.
  attenuate=none|low|mid|high  Attenuation of high pitched notes.
  scalemap=nn/nn/nn/...    Combined with quantization this allows selecting
                           notes on the musical scale.

{File Parameters}
  savename=<path>\\filename Save files using this name (instead of fract001)
  overwrite=no|yes         Don't over-write existing files
  savetime=nnn             Autosave image every nnn minutes of calculation
  gif87a=yes               Save GIF files in the older GIF87a format
                           (with no extension blocks)
  dither=yes               Dither color GIFs read into a b/w display.
  parmfile=<path>\\filename File for <@> and <b> commands, default id.par
  formulafile=<path>\\filename  File for type=formula, default id.frm
  lfile=<path>\\filename    File for type=lsystem, default id.l
  ifsfile=<path>\\filename  File for type=ifs, default id.ifs
  orbitsave=yes            Causes IFS and orbit fractals orbit points to be
                           saved in the file orbits.raw
~FF

{Video Parameters}
  video=xxx                Begin with this video mode (Example: "video=F2")
  askvideo=no              Skip the prompt for video mode when restoring files
  viewwindows=xx[/xx[/yes|no[/nn[/nn]]]]
                           Set the reduction factor, final media aspect ratio,
                           crop starting coordinates (y/n), explicit x size,
                           and explicit y size
  fastrestore=yes|no       If yes, resets viewwindow to "no" prior to restoring
                           a GIF file, and bypasses the warning when
                           restoring a GIF in a video mode other than the
                           one in which the GIF was saved.  Default is no.
                           Feature will be useful when cycling through a
                           group of GIFs in autokey mode.
  virtual=yes|no           If no, disables the check for and the ability to
                           use virtual screen sizes.  Default is yes.

~FF
{3D Parameters}
  3d=yes|overlay           Resets 3D to defaults, starts 3D mode.  If overlay
                           specified, does not clear existing graphics screen
  preview=yes              Turns on 3D preview default mode
  showbox=yes              Turns on 3D showbox default mode
  sphere=yes               Turns on 3D sphere mode
  coarse=nnn               Sets preview coarseness default value
  stereo=nnn               Sets stereo (R/B 3D) option:  0 = none,
                           1 = alternate, 2 = superimpose, 3 = photo,
                           4 = stereo pair
  ray=nnn                  Selects raytrace output file format
  brief=yes                Selects brief or verbose file for DKB output
  usegrayscale=yes         Use grayscale as depth instead of color number
  interocular=nnn          Sets 3D interocular distance default value
  converge=nnn             Sets 3D convergence default value
  crop=nnn/nnn/nnn/nnn     Sets 3D red-left, red-right, blue-left,
                           and blue-right cropping default valuess
  bright=nnn/nnn           Sets 3D red and blue brightness defaults,

  longitude=nn/nn          Longitude minumim and maximum
  latitude=nn/nn           Latitude minimum and maximum
  radius=nn                Radius scale factor
  rotation=nn[/nn[/nn]]    Rotation abount x,y, and z axes
  scalexyz=nn/nn/nn        X, Y, and Z scale factors
  roughness=nn             Same as Z scale factor
  waterline=nn             Colors this number and below will be inside color
  filltype=nn              3D filltype
  perspective=nn           Perspective viewer distance (100 is at the edge)
  xyshift=nn/nn            Shift image in x & y directions (alters viewpoint)
  lightsource=nn/nn/nn     The coordinates of the light source vector
  smoothing=nn             Smooths rough images in light source mode
  transparent=mm/nn        Sets colors mm to nn as transparent
  xyadjust=nnn/nnn         Sets 3D X and Y adjustment defaults,
  randomize=nnn            smoothes 3D color transitions between elevations
  fullcolor=yes            allows creation of full color .TGA image with
                           light source fill types
  ambient=nnn              sets depth of shadows and contrast when using
                           light source fill types
  haze=nnn                 sets haze for distant objects if fullcolor=1
  background=nn/nn/nn      sets the TGA background color as rr/gg/bb
  lightname=filename       fullcolor output file name, default FRACT001.TGA
  stereowidth=nnn          image width in inches (for RDS only so far)
;
;
~Topic=Introduction to Parameters

Id accepts command-line parameters that allow you to start it with a
particular video mode, fractal type, starting coordinates, and just about
every other parameter and option.

These parameters can also be specified in a sstools.ini file, to set them
every time you run Id.

They can also be specified as named groups in a .par (parameter) file
which you can then call up while running Id by using the <@>
command.

In all three cases (command line, sstools.ini, and parameter file) the
parameters use the same syntax, usually a series of keyword=value commands
like sound=off.  Each parameter is described in detail in subsequent
sections.
;
;
~Topic=Using the Command Line

You can specify parameters when you start Id by using a command like:

    id sound=off filename=myimage.gif

The individual parameters are separated by one or more spaces (an
parameter itself may not include spaces).  Upper or lower case may be
used, and parameters can be in any order.

Id has a special command you can use when you have a lot of startup
parameters (or have a set of parameters you use frequently):

    id @myfile

When @filename is specified on the command line, Id reads parameters
from the specified file as if they were keyed on the command line.  You
can create the file with a text editor, putting one "keyword=value"
parameter on each line.
;
;
~Topic=Setting Defaults (sstools.ini File)
Every time Id runs, it searches the current directory, and then the
directories in your PATH, for a file named sstools.ini.  If it finds
this file, it begins by reading parameters from it.  This file is useful
for setting parameters you always want.

The file sstools.ini is divided into sections belonging to particular
programs.  Each section begins with a label in brackets.  Id looks for
the label [id], and ignores any lines it finds in the file belonging to
any other label.  If an sstools.ini file looks like this:

  [id]\
  sound=off      ; (for home use only)\
  inside=0       ; using "traditional" black\
  [startrek]\
  warp=9.5       ; Captain, I dinna think the engines can take it!\

Id will use only the second and third lines of the file.
(Why use a convention like that when Id is the only program you know
of that uses an sstools.ini file?  Because there are other programs (such
as Lee Crocker's PICLAB) that now use the same file, and there may one day
be other, sister programs to Id using that file.)
;
;
~Topic=Parameter Files and the <@> Command

You can change parameters on-the-fly while running Id by using the
<@> or <2> command and a parameter file.  Parameter files contain named
groups of parameters, looking something like this:

  quickdraw \{      ; a set of parameters named quickdraw\
     maxiter=150\
     float=no\
  }\
  slowdraw \{       ; another set of parameters\
     maxiter=2000\
     float=yes\
  }\

If you use the <@> or <2> command and select a parameter file containing the
above example, Id will show two choices: quickdraw and slowdraw.  You
move the cursor to highlight one of the choices and press <Enter> to set
the parameters specified in the file by that choice.

The default parameter file name is id.par.  A different file can be
selected with the "parmfile=" option, or by using <@> or <2> and then hitting
<F6>.

You can create parameter files with a text editor, or for some uses, by
using the <B> command.  Parameter files can be used in a number of ways,
some examples:

  o To save the parameters for a favorite image.  Id can do this for
    you with the <B> command.

  o To save favorite sets of 3D transformation parameters.  Id can do
    this for you with the <B> command.

  o To set up different sets of parameters you use occasionally.

  o To save image parameters for later use in batch mode - see
    {Batch Mode}.

Formulas, ifs, and lsystem entries referred to in a parameter entry can
be included in a .par file by adding the prefix frm:, ifs:, or lsys:
respectively, for example frm:myformula \{rest of that formula}.
Note that the prefix is a label, not part of the formula name, so the
reference in the image entry would be formulaname=myformula.  The
formula, ifs, and lsystem entries added to a parfile are accessed only
when the image entry in the parfile is run.  To make these formulas generally
accessible, they must be added to a .frm, .ifs or .l file (without the
identifying prefix, of course).

See {"Parameter Save/Restore Commands"} for details about the <@> and
<B> commands.
;
;
~Topic=General Parameter Syntax

Parameters must be separated by one or more spaces.

Upper and lower case can be used in keywords and values.  In the
parameter reference that follows, the name is shown in upper case.
When mentioned in other contexts the name is generally shown in
lower case.

Anything on a line following a ; (semi-colon) is ignored, i.e. is a
comment.

In parameter files and sstools.ini:\
  o Individual parameters can be entered on separate lines.\
  o Long values can be split onto multiple lines by ending a line with a \\
    (backslash) - leading spaces on the following line are ignored, the
    information on the next line from the first non-blank character onward
    is appended to the prior line.

Some terminology:\
  KEYWORD=nnn              enter a number in place of "nnn"\
  KEYWORD=[filename]       you supply filename\
  KEYWORD=yes|no|whatever  choose one of "yes", "no", or "whatever"\
  KEYWORD=1st[/2nd[/3rd]]  the slash-separated parameters "2nd" and
                           "3rd" are optional
;
;
~Topic=Startup Parameters

@FILENAME\
Causes Id to read "filename" for parameters.  When it finishes, it
resumes reading its own command line -- i.e., "id maxiter=250
@myfile passes=1" is legal.  This option is only valid on the command
line, as Id is not clever enough to deal with multiple indirection.

@FILENAME/groupname\
Like @FILENAME, but reads a named group of parameters from a parameter
file.  See {"Parameter Files and the <@> Command"}.

TEMPDIR=[directory]\
This command allows to specify the directory where Id writes temporary
files.

WORKDIR=[directory]\
This command sets the directory where miscellaneous Id files get
written, including makemig.bat and debugging files.

~ONLINEFF
FILENAME=[name]\
Causes Id to read the named file, which must either have been saved
from an earlier Id session or be a generic GIF file, and use that as
the starting point, bypassing the initial information screens.  The
filetype is optional and defaults to .gif.  Non-Id GIF files are
restored as fractal type "plasma".

On the command line you may omit filename= and just give the file name.

CURDIR=yes\
Id uses directories set by various commands, possibly in the
sstools.ini file.  If you want to try out some files in the current directory,
such as a modified copy of id.frm, you won't Id to read the copy
in your official FRM directory.  Setting curdir=yes at the command line will
cause Id to look in the current directory for requested files first
before looking in the default directory set by the other commands.  Warning:
<tab> screen may not reflect actual file opened in cases where the file was
opened in the current directory.

~ONLINEFF
MAKEPAR=parfile/entryname\
This command invokes a batch facility to copy fractal and color information
stored in GIF files to par format.  The syntax is:\
     id filename.gif makepar=parfile.par/entryname >> makepar.log\
The entryname is optional and defaults to the name of the GIF filename if
absent.  Other parameters can appear before the makepar= command, but
anything after will ignored.  If the parfile and entryname exist, the entry
will replace the previous entry.  If the entry doesn't exist, it will be
added.  If the parfile doesn't exist it will be created.
Redirection of output to a log file is possible in the DOS version because
all screen output is written to the standard output.

If you leave the GIF filename out of the command lime but add a map= command,
then the makepar command will write a PAR named for the color map with only
the colors in the PAR entry.  This is a handy tool for converting maps
into compressed PAR colors entry.  For example, you could type:\
     id map=lyapunov.map makepar=mycolors >> makepar.log\
This adds a colors-only PAR entry called lyapunov.map to mycolors.par.

MAXLINELENGTH=nnn\
This command sets the maximum width of lines in a PAR entry.

~ONLINEFF
~Label=@COMMENTS
COMMENT=[comment1]/[comment2]/[comment3]/[comment4]\
Inserts comments into PAR files.  These comments can include
variables that are expanded at the time the PAR file is created.  Variables are
indicated by $varname$.  Underscore characters are expanded to blanks.
If you want to include the special characters '$', '_', or '\\' in a comment,
precede the character with '\\'.  Supported variables are:\

Variable   Expands to   Example     Variable   Expands to   Example
===============================     ===============================\
$year$     time:year    1996        $date$     mo. day, yr  Aug 17, 1996\
$month$    time:month   Aug         $calctime$ h:m:s        4:34:45.3\
$day$      time:day     12          $version$  version      1940\
$hour$     time:hour    21          $patch$    patch number 2\
$min$      time:minute  34          $xdots$    horiz rez    640\
$sec$      time:sec     14          $ydots$    vertical rez 480\
$time$     time:h:m:s   21:34:14    $vidkey$   video key    SF4\

You can leave any of the four comment fields unchanged by leaving that
position blank.  For example, the command comment=//Created_$date$ inserts
the text "Created Aug 17, 1996" into the third comment.

BATCH=yes\
See {Batch Mode}.

AUTOKEY=play|record\
Specifying "play" runs Id in playback mode - keystrokes are read
from the autokey file (see next parameter) and interpreted as if they're
being entered from the keyboard.\

Specifying "record" runs in recording mode - all keystrokes are recorded
in the autokey file.\

See also {Autokey Mode}.

AUTOKEYNAME=[filename]\
Specifies the file name to be used in autokey mode.  The default file name
is AUTO.KEY.

MAKEDOC[=filename]\
Create Id documentation file (for printing or viewing with a text
editor) and then exit.  Filename defaults to id.txt.
There's also a function in Id's online help which can be used to
produce the documentation file -
~Doc-
see {Printing Id Documentation}.
~Doc+,Online-
use "Printing Id Documentation" from the main help index.
~Online+

MAXHISTORY=<nnn>\
Id maintains a list of parameters of the past 10 images that you
generated in the current Id session.  You can revisit these images
using the <h> and <Ctrl+H> commands.  The maxhistory command allows you
to set the number of image parameter sets stored in memory.  The tradeoff
is between the convenience of storing more images and memory use.  Each
image in the circular history buffer takes up over 1200 bytes, so the
default value of ten images uses up 12,000 bytes of memory.  If your memory
is very tight, and some memory-intensive Id operations are giving
"out of memory" messages, you can reduce maxistory to 2 or even zero.  Keep
in mind that every time you color cycle or change from integer to float or
back, another image parameter set is saved, so the default ten images are
used up quickly.
;
;
~Topic=Calculation Mode Parameters
PASSES=1|2|3|g|g1|g2|g3|g4|g5|g6|b|t|s|o\
Selects single-pass, dual-pass, triple-pass, solid-Guessing mode,
solid-Guessing stop after pass n, Boundary Tracing, Tesseral,
Synchronous Orbits, or the Orbits algorithm.  See {Drawing Method} and
{Passes Parameters}.

FILLCOLOR=normal|<nnn>\
Sets a color to be used for block fill by Boundary Tracing and Tesseral
algorithms.  See {Drawing Method}.

FLOAT=yes\
Most fractal types have both a fast integer math and a floating point
version.  The faster, but possibly less accurate, integer version is the
default.  The default is to use integer math, but in this age of pentium
(amd later) CPUS we now recommend your making float=yes the default by
adding this line to your sstools.ini file.
Also see {"Limitations of Integer Math (And How We Cope)"}.

SYMMETRY=xxx\
Forces symmetry to None, Xaxis, Yaxis, XYaxis, Origin, or Pi symmetry.
Useful as a speedup for symmetrical fractals.  This is not a kaleidoscope
feature for imposing symmetry where it doesn't exist.  Use only when the
fractal actual exhibits the symmetry, or else results may not be
satisfactory.

BFDIGITS=<nnn>\
Forces nnn digits if arbitrary precision used.  You can use this if Id's
precision detection changes to arbitrary precision too late and regular double
precision is used with poor results.

MATHTOLERANCE=<nnn>/<nnn>\
This commands controls the logic that automatically selects one of
integer/float/arbitrary precision based on precision requirements of the
current zoom depth.  The first number controls the integer/float transition,
and the second number controls the float/arbitrary precision transition.  The
default value of .05 for both means that the ratio between the exact and
calculated width and height is between .95 and 1.05.  A larger value than .05
(say .10) makes the test looser so that the lower precision math is used
longer.  A value <= 0 means the test is always failed and the higher precision
math type is used.  A value >= 1 means that the test is always passed and the
lower precision math type is used.

MINSTACK=<nnn>\
This sets the minimum number of stack bytes required for passes=s in order to
do another SOI recursion.  If you get bad results, try setting this to a
value above the default value of 1100.  If the value is too large, the image
will be OK but generation will be slower.
;
;
~Topic=Fractal Type Parameters

TYPE=[name]\
Selects the fractal type to calculate.  The default is type "mandel".

PARAMS=n/n/n/n...\
Set optional (required, for some fractal types) values used in the
calculations.  These numbers typically represent the real and imaginary
portions of some startup value, and are described in detail as needed in
{Fractal Types}.\
(Example: "id type=julia params=-0.48/0.626" would wait at the opening
screen for you to select a video mode, but then proceed straight to the
Julia set for the stated x (real) and y (imaginary) coordinates.)

FUNCTION=[fn1[/fn2[/fn3[/fn4]]]]\
Allows setting variable functions found in some fractal type formulae.
Possible values are sin, cos, tan, cotan, sinh, cosh, tanh, cotanh, exp,
log, sqr, recip (i.e. 1/z), ident (i.e. identity), cosxx (cos with a
pre version 16 bug), flip, zero, one, asin, asinh, acos, acosh, atan, atanh,
sqrt, abs (abs(x)+i*abs(y)), cabs (sqrt(x*x+y*y)).  New additions are
the various rounding-to-integer functions: floor (round down), ceil
(round up), trunc (round toward zero), and round (round to nearest).

FORMULANAME=[formulaname]\
Specifies the default formula name for type=formula fractals.  (I.e. the
name of a formula defined in the FORMULAFILE.) Required if you want to
generate one of these fractal types in batch mode, as this is the only way
to specify a formula name in that case.

LNAME=[lsystemname]\
Specifies the default L-System name. (I.e. the name of an entry in the
LFILE.) Required if you want to generate one of these fractal types in
batch mode, as this is the only way to specify an L-System name in that
case.

IFS=[ifsname]\
Specifies the default IFS name. (I.e. the name of an entry in the
IFSFILE.) Required if you want to generate one of these fractal types in
batch mode, as this is the only way to specify an IFS name in that case.
;
;
~Topic=Image Calculation Parameters
MAXITER=nnn\
Reset the iteration maximum (the number of iterations at which the program
gives up and says 'OK, this point seems to be part of the set in question
and should be colored [insidecolor]') from the default 150.  Values range
from 2 to 2,147,483,647 (super-high iteration limits like 200000000 are useful
when using logarithmic palettes).  See {The Mandelbrot Set} for a description
of the iteration method of calculating fractals.\
"maxiter=" can also be used to adjust the number of orbits plotted for
3D "attractor" fractal types such as lorenz3d and kamtorus.

CORNERS=[xmin/xmax/ymin/ymax[/x3rd/y3rd]]\
Example: corners=-0.739/-0.736/0.288/0.291\
Begin with these coordinates as the range of x and y coordinates, rather
than the default values of (for type=mandel) -2.0/2.0/-1.5/1.5.  When you
specify four values (the usual case), this defines a rectangle: x-
coordinates are mapped to the screen, left to right, from xmin to xmax, y-
coordinates are mapped to the screen, bottom to top, from ymin to ymax.
Six parameters can be used to describe any rotated or stretched
parallelogram:  (xmin,ymax) are the coordinates used for the top-left
corner of the screen, (xmax,ymin) for the bottom-right corner, and
(x3rd,y3rd) for the bottom-left.
Entering just "CORNERS=" tells Id to use this form
rather than CENTER-MAG (see below) when saving
parameters with the <B> command.

~Label=@CENTERMAG
CENTER-MAG=[Xctr/Yctr/Mag[/Xmagfactor/Rotation/Skew]]\
This is an alternative way to enter corners as a center point and a
magnification that is popular with some fractal programs and publications.
Entering just "CENTER-MAG=" tells Id to use this form
(the default mode) rather than CORNERS (see above) when saving parameters
with the <B> command.
The <TAB> status
display shows the "corners" in both forms.  When you specify three values
(the usual case), this defines a rectangle:  (Xctr, Yctr) specifies the
coordinates of the center of the image while Mag indicates the amount of
magnification to use.  Six parameters can be used to describe any rotated
or stretched parallelogram:  Xmagfactor tells how many times bigger the
x-magnification is than the y-magnification, Rotation indicates how many
degrees the image has been turned, and Skew tells how many degrees the
image is leaning over.  Positive angles will rotate and skew the image
counter-clockwise.

BAILOUT=nnn\
Over-rides the default bailout criterion for escape-time fractals.  Can
also be set from the parameters screen after selecting a fractal type.
See description of bailout in {The Mandelbrot Set}.

BAILOUTEST=mod|real|imag|or|and|manh|manr\
Specifies the {Bailout Test} used to determine when the fractal calculation
has exceeded the bailout value.  The default is mod and not all fractal types
can utilize the additional tests.

RESET\
Causes Id to reset all calculation related parameters to their
default values.  Non-calculation parameters such as "sound=", and
"savename=" are not affected.  RESET should be specified at the start
of each parameter file entry (used with the <@> command) which defines an
image, so that the entry need not describe every possible parameter - when
invoked, all parameters not specifically set by the entry will have
predictable values (the defaults).

INITORBIT=pixel\
INITORBIT=nnn/nnn\
Allows control over the value used to begin each Mandelbrot-type orbit.
"initorbit=pixel" is the default for most types; this command initializes
the orbit to the complex number corresponding to the screen pixel.  The
command "initorbit=nnn/nnn" uses the entered value as the initializer.  See
the discussion of the {Mandellambda Sets} for more on this topic.

RSEED=nnnn\
The initial random-number "seed" for plasma clouds is taken from your PC's
internal clock-timer.  This argument forces a value (which you can see in
the <Tab> display), and allows you to reproduce plasma clouds.  A detailed
discussion of why a TRULY random number may be impossible to define, let
alone generate, will have to wait for "Iterated Dynamics: The 3-MB Doc File."

SHOWDOT=[auto|bright|medium|dark|<nnn>[/<size>]]\
Colors the current dot being calculated color <nnn> or an automatically
calculated color taken from the current palette.  The second parameter is
the size of the traveling pointer in units of pixels of 1/1024th of a screen.

The travelling pointer strobes with fast fractals because of interaction with
the monitor's vertical refresh.  The orbitdelay parameter can be used to
introduce a per-pixel delay when showdot is turned on.  Try orbitdelay=1000
with showdot=b/20 to get a feel for how the showdot triangle works.

ASPECTDRIFT=<nn>\
When zooming in or out, the aspect ratio (the width to height ratio) can
change slightly due to rounding and the noncontinuous nature of pixels.
If the aspect changes by a factor less than <nn>, then the aspect is set
to it's normal value, making the center-mag Xmagfactor parameter equal to 1.
(see CENTER-MAG above.)  The default is 0.01.  A larger
value adjusts more often.  A value of 0 does no adjustment at all.
;
;
~Topic=Passes Parameters
PERIODICITY=no|show|nnn\
Controls periodicity checking (see {Periodicity Logic}).
"no" turns it off, "show" lets
you see which pixels were painted as "inside" due to being caught
by periodicity.  Specifying a number causes a more conservative
periodicity test (each increase of 1 divides test tolerance by 2).
Entering a negative number lets you turn on "show" with that number.  Type
lambdafn function=exp needs periodicity turned off to be accurate -- there
may be other cases.

A non-zero value of the "periodicity=" option causes "passes=o" to not
plot orbits that have reached the bailout conditions or where an orbit goes
off the visible area of the image.  A zero value of periodicity will plot
all orbits except as modified by orbitdelay and orbitinterval.

ORBITDELAY=<nn>\
This option controls how many orbits are computed before the orbits
are displayed on the screen when using the "passes=o" option, or the
fractal types mandelcloud and dynamic.  This allows the orbits to settle
down before plotting starts.

This option also slows down the display of orbits using the <O> command
for folks with hot new computers.  Units are in 1/10000 seconds per
orbit point.  ORBITDELAY=10 therefore allows you to see each pixel's
orbit point for about one millisecond.  For best display of orbits,
try passes=1 and a moderate resolution such as 320x200.  Note that
the first time you press the <O> key with the orbitdelay function
active, your computer will pause for a half-second or so to calibrate
a high-resolution timer.

ORBITINTERVAL=<nn>\
This parameter causes "passes=o" to plot every nth orbit point ranging from
1, which plots every orbit, to 255, which plots every 255th orbit.  This
value must be lower than the value of maxit to make any sense.

SCREENCOORDS=yes|no\
This parameter maintains the screen coordinates and lets you zoom into an image
changing the coordinates of the line or rectangle used to generate the
image, but keeps the display coordinates the same.  The screen coordinates
can be zoomed, rotated, and skewed using the <F2> {Screen Coordinates Screen}.
If set to no, the screen and image coordinates are maintained the same
when an image is zoomed.
~ONLINEFF
ORBITDRAWMODE=rect|line\
The rect(angle) method plots the orbits in a rectangle that can be
zoomed, rotated, and skewed using the <F6> {Image Coordinates Screen}, and
the straight line method plots the orbits between two points specified
on the <F6> image coordinates screen.
;
;
~Topic=Color Parameters
INSIDE=nnn|maxiter|bof60|bof61|zmag|epscross|startrail|period|atan|fmod\
Set the color of the interior: for
example, "inside=0" makes the M-set "lake" a stylish basic black.  A setting of
inside=maxiter makes the inside color the same as the value of maxiter.

Eight more options reveal hidden structure inside the lake.  Inside=bof60 and
inside=bof61, are named after the figures on pages 60 and 61 of "Beauty of
Fractals".  Inside=zmag is a method of coloring based on the magnitude of Z
after the maximum iterations have been reached.  The affect along the edges
of the Mandelbrot is like thin-metal welded sculpture.  Inside=fmod is a
method of coloring based on the magnitude of the last orbit within a set
distance from the origin.  Inside=period colors
pixels according to the period of their eventual orbit.  Inside=atan
colors by determining the angle in degrees the last iterated value has with
respect to the real axis, and using the absolute value.
See {Inside=bof60|bof61|zmag|fmod|period|atan} for a brilliant explanation
of what these do!

Inside=epscross colors pixels green or yellow according to whether their
orbits swing close to the Y-axis or X-axis, respectively.  Inside=startrail
has a coloring scheme based on clusters of points in the orbits.  Best with
outside=<nnn>.  For more information, see {Inside=epscross|startrail}.

Note that the "Look for finite attractor" option on the <Y> options screen
will override the selected inside option if an attractor is found - see
{Finite Attractors}.

OUTSIDE=nnn|iter|real|imag|summ|mult|atan|fmod|tdis\
The classic method of coloring outside
the fractal is to color according to how many iterations were required before
Z reached the bailout value, usually 4.  This is the method used when
OUTSIDE=iter.

However, when Z reaches bailout the real and imaginary components can be at
very diferent values.  OUTSIDE=real and OUTSIDE=imag color using the iteration
value plus the real or imaginary values.  OUTSIDE=summ uses the sum of all
these values.  These options can give a startling 3D quality to otherwise flat
images and can change some boring images to wonderful ones.  OUTSIDE=mult
colors by multiplying the iteration by real divided by imaginary.  There was no
mathematical reason for this, it just seemed like a good idea.  OUTSIDE=atan
colors by determining the angle in degrees the last iterated value has with
respect to the real axis, and using the absolute value.

OUTSIDE=fmod colors pixels according to the magnitude of the last orbit point
which is within a set distance from the origin.  Then:\
  color = magnitude * colors / closeprox\
The magnitude used for the comparison is now based on the same calculation as
is used for the bailout test.  The value of closeprox can be varied
interactively.  This feature was contributed by Iain Stirling.  There is a
problem with the mandel fractal type when outside=fmod is used
with inside=bof6x and bailoutest=real, imag, or manr.  This is likely due
to changes made in the code so that bof images could be reproduced.  Select
a different fractal type that produces the default mandel image to explore
using these parameters.

OUTSIDE=tdis colors the pixels according to the total distance traveled by the
orbit.  This feature was suggested by Steve Robinson.

Outside=nnn sets the color of the exterior to some number of your choosing:
for example, "OUTSIDE=1" makes all points not INSIDE the fractal set to color
1 (blue).  Note that defining an OUTSIDE color forces any image to be a
two-color one: either a point is INSIDE the set, or it's OUTSIDE it.

MAP=[filename]\
Reads in a replacement color map from [filename].  This map replaces the
default color map of your video adapter.  Requires a VGA or higher adapter.
The difference
between this argument and an alternate map read in via <L> in color-
command mode is that this one applies to the entire run.
See {Color Maps}.

COLORS=@filename|colorspecification\
Sets colors for the current image, like the <L> function in color cycling
and palette editing modes.  Unlike the MAP= parameter, colors set with
COLORS= do not replace the default - when you next select a new fractal
type, colors will revert to their defaults.\

COLORS=@filename tells Id to use a color map file named "filename".
See {Color Maps}.\

COLORS=colorspecification specifies the colors directly.  The value of
"colorspecification" is rather long (768 characters for 256 color modes),
and its syntax is not documented here.  This form of the COLORS= command
is not intended for manual use - it exists for use by the <B> command
when saving the description of a nice image.

~Label=@RECORDCOLORS
RECORDCOLORS=auto|comment|yes\
Controls the method of writing colors in PAR files.  Auto causes the colors
to be written in the colors=@mapfile form if the colors were loaded from
a map.  Use this mode if you manage your colors using map files.  If you
share PAR files with others, and have trouble remembering to send them the
map file, use RECORDCOLORS=comment or yes.  These modes force the writing
of compressed color maps in the PAR file in all cases.  The only difference is
that the comment option also writes the mapfile name in a comment so you
can remember where the colors came from.
~Doc-
 See {Color Specification}.
~Doc+

CYCLERANGE=nnn/nnn\
Sets the range of color numbers to be animated during color cycling.  The
default is 1/255, i.e. just color number 0 (usually black) is not cycled.

CYCLELIMIT=nnn\
Sets the speed of color cycling.  Technically, the number of DAC registers
updated during a single vertical refresh cycle.  Legal values are 1 - 256,
default is 55.

TEXTCOLORS=mono\
Set text screen colors to simple black and white.

TEXTCOLORS=aa/bb/cc/...\
Set text screen colors.  Omit any value to use the default (e.g.
textcolors=////50 to set just the 5th value).  Each value is a 2 digit
hexadecimal value; 1st digit is background color (from 0 to 7), 2nd digit
is foreground color (from 0 to F).\
~Format-
Color values are:
    0 black     8 gray
    1 blue      9 light blue
    2 green     A light green
    3 cyan      B light cyan
    4 red       C light red
    5 magenta   D light magenta
    6 brown     E yellow
    7 white     F bright white

31 colors can be specified, their meanings are as follows:
  heading:
    1  Iterated Dynamics version info
    2  heading line development info (not used in released version)
  help:
    3  sub-heading
    4  main text
    5  instructions at bottom of screen
    6  hotlink field
    7  highlighted (current) hotlink
  menu, selection boxes, parameter input boxes:
    8  background around box and instructions at bottom
    9  emphasized text outside box
   10  low intensity information in box
   11  medium intensity information in box
   12  high intensity information in box (e.g. heading)
   13  current keyin field
   14  current keyin field when it is limited to one of n values
   15  current choice in multiple choice list
   16  speed key prompt in multiple choice list
   17  speed key keyin in multiple choice list
  general (tab key display, IFS parameters, "thinking" display):
   18  high intensity information
   19  medium intensity information
   20  low intensity information
   21  current keyin field
  disk video:
   22  background around box
   23  high intensity information
   24  low intensity information
  diagnostic messages:
   25  error
   26  information
  credits screen:
   27  bottom lines
   28  high intensity divider line
   29  low intensity divider line
   30  primary authors
   31  contributing authors
The default is
   textcolors=1F/1A/2E/70/28/71/31/78/70/17/1F/1E/2F/3F/5F/07/
              0D/71/70/78/0F/70/0E/0F/4F/20/17/20/28/0F/07
(In a real command file, all values must be on one line.)
~Format+

OLDDEMMCOLORS=yes|no\
Sets the coloring scheme used with the distance estimator method to the
pre-version 16 scheme.

TRUECOLOR=yes\
You can save either the default color scheme or the iteration escape value
to a file called FRACTxxx.TGA.  This will allow experimentation with
truecolor algorithms.  A C language source file that reads the file when
iterates are used, is provided.  Someday we'll have REAL truecolor support ...

TRUEMODE=def|iter\
Determines whether the FRACTxxx.TGA file produced when TRUECOLOR=yes contains
the iteration value or the default coloring scheme.

NOBOF=yes|no\
Setting this parameter to yes causes the bof60 and bof61 inside options to
function the same as the other inside options by making the per pixel
initialization the same.  The per pixel initialization is normally different
for the bof60 and bof61 options to reproduce the images in the book,
"The Beauty of Fractals".  The default is no.
;
;
~Topic=Color Specification
~Format-,Online-
COLOR SPECIFICATION
~Format+,Online+

The colors= parameter in a PAR entry is a set of triplets.  Each triplet
represents a color in the saved palette.  The triplet is made from the red
green and blue components of the color in the palette entry.  The current
limitations of Id's palette handling capabilities restrict the palette
to 256 colors.  Each triplet rgb component is a 6 bit value from 0 to 63.
These values are encoded using the following scheme:\

  rgb value  =>  encoded value\
   0  -   9  =>  0  -  9\
  10  -  35  =>  A  -  Z\
  36  -  37  =>  _  -  `\
  38  -  63  =>  a  -  z\

In addition, Pieter Branderhorst has incorporated a way to compress the
encoding when the image has smooth-shaded ranges.  These ranges are written
as <nn> with the nn representing the number of entries between the
preceeding triplet and the following triplet.  The routine for finding the
smooth-shaded range works something like this.  The current triplet's color
values are compared to the current-1 triplet's color values.  The difference
is saved and then the current triplet's color values are compared to the
current-2 triplet's color values.  The difference is saved and then this
difference is compared to the first one.  If the differences are the same, a
shaded range has been found.  If the differences are off by one, this is
saved as the one exceptable alternative difference.  Up to four previous
triplets will be looked at for the current triplet.  If the color "slope" of
the range is not sharp, meaning the colors change slowly, the current range
is broken into more ranges to stop "drift" when loading and storing the PAR.
;
;
~Topic=Doodad Parameters

LOGMAP=yes|old|n\
Selects a compressed relationship between escape-time iterations and
palette colors.  See {"Logarithmic Palettes and Color Ranges"} for details.

LOGMODE=fly/table|auto\
Forces the use of the on-the-fly routine or the logarithm table for the
calculation of log palettes.  Not normally needed.  The auto option cannot
be used at the same time as the other two.  Auto causes the logmap value to
be automatically recalculated when zooming.  Changing almost anything will
turn this feature off.  Set logmode=auto from the <g> screen prompt.

RANGES=nn/nn/nn/...\
Specifies ranges of escape-time iteration counts to be mapped to each
color number.  See {"Logarithmic Palettes and Color Ranges"} for details.

DISTEST=nnn/nnn\
A nonzero value in the first parameter enables the distance estimator
method.  The second parameter specifies the "width factor", defaults to 71.
See {"Distance Estimator Method"} for details.

DECOMP=2|4|8|16|32|64|128|256\
Invokes the corresponding decomposition coloring scheme.
See {Decomposition} for details.

BIOMORPH=nnn\
Turn on biomorph option; set affected pixels to color nnn.
See {Biomorphs} for details.

POTENTIAL=maxcolor[/slope[/modulus[/16bit]]]\
Enables the "continuous potential" coloring mode for all fractal types
except plasma clouds, attractor types such as lorenz, and IFS.  The four
arguments define the maximum color value, the slope of the potential
curve, the modulus "bailout" value, and whether 16 bit values are to be
calculated.  Example: "POTENTIAL=240/2000/40/16bit".  The Mandelbrot and
Julia types ignore the modulus bailout value and use their own hardwired
value of 4.0 instead.  See {Continuous Potential} for details.

INVERT=nn/nn/nn\
Turns on inversion.  The parameters are radius of inversion, x-coordinate
of center, and y-coordinate of center. -1 as the first parameter sets the
radius to 1/6 the smaller screen dimension; no x/y parameters defaults to
center of screen.  The values are displayed with the <Tab> command.
See {Inversion} for details.

FINATTRACT=no|yes\
Another option to show coloring inside some Julia "lakes" to show escape
time to finite attractors.  Works with lambda, magnet types, and possibly
others.  See {Finite Attractors} for more information.

EXITNOASK=yes\
This option forces Id to bypass the final "are you sure?" exit
screen when the ESCAPE key is pressed from the main image-generation
screen.  Added at the request of Ward Christensen.  It's his funeral <grin>.
;
;
~Topic=File Parameters

In Id you can use various filename variables to specify files, set
default directories, or both.  For example, in the SAVENAME description below,
[name] can be a filename, a directory name, or a fully qualified pathname
plus filename.  You can specify default directories using these variables
in your sstools.ini file.

SAVENAME=[<path>\\][name]\
Set the path and/or filename to use when you <S>ave a screen.  The default
filename is FRACT001.  The .GIF extension is optional (Example:
SAVENAME=myfile)

OVERWRITE=no|yes\
Sets the savename overwrite flag (default is no).  If yes, saved files
will over-write existing files from previous sessions; otherwise the
automatic incrementing of FRACTnnn.GIF will find the first unused
filename.

SAVETIME=nnn\
Tells Id to automatically do a save every nnn minutes while a
calculation is in progress.  This is mainly useful with long batches - see
{Batch Mode}.

~ONLINEFF
GIF87a=yes\
Backward-compatibility switch to force creation of GIF files in the GIF87a
format.  As of version 14, Id defaults to the new GIF89a format which
permits storage of fractal information within the format.  GIF87a=YES is
only needed if you wish to view Id images with a GIF decoder that
cannot accept the newer format.  See {GIF Save File Format}.

DITHER=yes\
Dither a color file into two colors for display on a b/w display.  This give
a poor-quality display of gray levels.  Note that if you have a 2-color
display, you can create a 256-color GIF with disk video and then read it
back in dithered.

PARMFILE=[<path>\\][parmfilename]\
Specifies the default parameter path and/or file to be used by the <@> (or <2>)
and <B> commands.  If not specified, the default is id.par.

FORMULAFILE=[<path>\\][formulafilename]\
Specifies the formula path and/or file for type=formula fractals (default is
id.frm).  Handy if you want to generate one of these fractal types
in batch mode.

LFILE=[<path>\\][lsystemfile]\
Specifies the default L-System path and/or file for type=lsystem fractals
(default is id.l).

IFSFILE=[<path>\\][ifsfilename]\
Specifies the default path and/or file for type=ifs fractals (default is
id.ifs).

FILENAME=[.suffix]\
Sets the default file extension used for the <r> command.
When this parameter is omitted, the
default file mask shows .GIF and .POT files.  You might want to specify
this parameter and the SAVENAME= parameter in your sstools.ini file if you
keep your fractal images separate from other .GIF files by using a
different suffix for them.

ORBITSAVE=yes\
Causes the file ORBITS.RAW to be opened and the points generated by orbit
fractals or IFS fractals to be saved in a raw format.  This file can be read
by the Acrospin program which can rotate and scale the image rapidly in
response to arrow key commands.  The filename ORBITS.RAW is fixed and will
be overwritten each time a new fractal is generated with this option.\
(see {Barnsley IFS Fractals} {Orbit Fractals} {=@ACROSPIN Acrospin}).
;
~Topic=Video Parameters

VIDEO=xxx\
Set the initial video mode (and bypass the informational screens).  Handy
for batch runs. (Example: VIDEO=F4 for IBM 16-color VGA.)
You can obtain the current VIDEO= values (key assignments) from the
"select video mode" screens inside Id.  If you want to do a batch run
with a video mode which isn't currently assigned to a key, you'll have to
modify the key assignments - see {"Video Mode Function Keys"}.

ASKVIDEO=yes|no\
If "no," this eliminates the prompt asking you if a file to be restored is
OK for your current video hardware.\
WARNING: every version of Id so far has had a bigger, better, but
shuffled-around video table.  Since calling for a mode your hardware
doesn't support can leave your system in limbo, be careful about leaving
the above two parameters in a command file to be used with future versions
of Id, particularly for the super-VGA modes.

VIEWWINDOWS=xx[/xx[/yes|no[/nn[/nn]]]]\
Set the reduction factor, final media aspect ratio, crop starting
coordinates (y/n), explicit x size, and explicit y size, see {"View Window"}.

~Label=@FASTRESTORE
FASTRESTORE=yes|no\
If YES, resets viewwindow to "no" prior to restoring a GIF file.  Otherwise,
images saved in full view will be drawn in reduced view if viewwindows has
been set to "yes" previously.  Also, when YES, bypasses the warning when
restoring a GIF in a video mode other than the one in which the GIF was
saved.  Default is NO.  Feature will be useful when cycling through a group
of gifs in autokey mode.  When combined with askvideo=no, allows loading
images with the last successfully used video mode.  This is handy when
viewing 1600x1200 images when you only have 1024x768 available.

VIRTUAL=yes|no\
With a suitable video adapter it is possible to set virtual screen modes
using the {"View Window"} options.  With certain video adapters it may be
necessary to disable the check for virtual screen modes if this check
prevents Id from loading correctly.  The default is "yes".  Setting
this to "no" disables the check for and the ability to use virtual screen
sizes.
;
;
~Topic=Sound Parameters

SOUND=off|beep|x|y|z/pc|fm/quant\
We're all MUCH too busy to waste time with Id at work, and no doubt
you are too, so "sound=off" is included only for use at home, to avoid
waking the kids or your Significant Other, late at night. (By the way,
didn't you tell yourself "just one more zoom on LambdaSine" an hour ago?)
Suggestions for a "boss" hot-key will be cheerfully ignored, as this
sucker is getting big enough without including a spreadsheet screen too.
The "sound=x|y|x" options are for the "attractor" fractals, like the
Lorenz fractals - they play with the sound on your PC speaker as they are
generating an image, based on the X or Y or Z co-ordinate they are
displaying at the moment.

The scope of the sound command has been extended.  You can now hear the
sound of fractal orbits--just turn on sound from the command line, the
<X> menu, or the <cntl-F> menu, fire up a fractal, and try the <O>rbits
command (or set showorbit=yes).  Use the orbitdelay=<nnn> command (also
on the <cntl-F> menu) to dramatically alter the effect, which ranges from
an unearthly scream to a series of discrete tones.  Not recommended when
people you have to live with are nearby!  Remember, we don't promise that
it will sound beautiful!

The sound output can now be directed to the PC speaker, a sound card with
OPL-3 support, or both at the same time.  There is also an option to
quantize the notes generated by Id.  See {Sound Controls}.

You can also "hear" any image that Id can decode; turn on sound
before using <R> to read in a GIF file.  We have no idea if this feature
is useful.  It was inspired by the comments of an on-line friend who is
blind.  We solicit feedback and suggestions from anyone who finds these
sound features interesting or useful.  The orbitdelay command also affects
the sound of decoding images.

HERTZ=<nnn>\
Adjusts the sound produced by the "sound=x|y|z" option.  Limits on legal
values have been removed in version 19.3.  The actual sounds produced are
limited to the range of 20-5000 Hz.  Setting a negative Hertz value allows
shifting the range of sounds produced down into the bass range.  This also
eliminates some of the notes since anything under 20 Hz or over 5000 Hz
will not be played.

ORBITDELAY=<nn>\
Slows up the display of orbits using the <O> command
for folks with hot new computers.  Units are in 1/10000 seconds per
orbit point.  ORBITDELAY=10 therefore allows you to see each pixel's
orbit point for about one millisecond.  For best display of orbits,
try passes=1 and a moderate resolution such as 320x200.  Note that
the first time you press the <O> key with the orbitdelay function
active, your computer will pause for a half-second or so to calibrate
a high-resolution timer.

SHOWORBIT=yes|no\
Causes the during-generation orbits feature, toggled by the <O> command, to
start off in the "on" position each time a new fractal calculation starts.

ORBITSAVE=sound\
This option causes the hertz value played through the PC speaker with
sound=x|y|z option to be written to a file "sound.txt" in the current
directory.  Bill Jemison has made some intriguing music with this option.
;
;
~Topic=3D Parameters

To stay out of trouble, specify all the 3D parameters, even if you want to
use what you think are the default values.  It takes a little practice to
learn what the default values really are.  The best way to create a set of
parameters is to use the <B> command on an image you like and then use an
editor to modify the resulting parameter file.

3D=Yes\
3D=Overlay\
Resets all 3D parameters to default values.  If FILENAME= is given, forces
a restore to be performed in 3D mode (handy when used with "batch=yes" for
batch-mode 3D images).  If specified, 3D=Yes should come before any other
3D parameters on the command line or in a parameter file entry.  The form
3D=Overlay is identical except that the previous graphics screen is not
cleared, as with the <#> (<shift+3> on some keyboards) overlay command.
Useful for building parameter files that use the 3D overlay feature.\

The options below override the 3D defaults:
~Format-
PREVIEW=yes                Turns on 3D preview default mode
SHOWBOX=yes                Turns on 3D showbox default mode
COARSE=nn                  Sets Preview coarseness default value
SPHERE=yes                 Turns on spherical projection mode
STEREO=n                   Selects the type of stereo image creation
RAY=nnn                    selects raytrace output file format
BRIEF=yes                  selects brief or verbose file for DKB output
USEGRAYSCALE=yes           use grayscale as depth instead of color number

INTEROCULAR=nn             Sets the interocular distance for stereo
CONVERGE=nn                Determines the overall image separation
CROP=nn/nn/nn/nn           Trims the edges off stereo pairs
BRIGHT=nn/nn               Compensates funny glasses filter parameters
LONGITUDE=nn/nn            Longitude minimum and maximum
LATITUDE=nn/nn             Latitude minimum and maximum
RADIUS=nn                  Radius scale factor
ROTATION=nn[/nn[/nn]]      Rotation about x,y, and z axes
SCALEZYZ=nn/nn/nn          X,y,and z scale factors
ROUGHNESS=nn               Same as z scale factor
WATERLINE=nn               Colors nn and below will be "inside" color
FILLTYPE=nn                3D filltype
PERSPECTIVE=nn             Perspective distance
XYSHIFT=nn/nn              Shift image in x and y directions with
                            perspective
LIGHTSOURCE=nn/nn/nn       Coordinates for light-source vector
SMOOTHING=nn               Smooths images in light-source fill modes
TRANSPARENT=min/max        Defines a range of colors to be treated as
                            "transparent" when <#>Overlaying 3D images.
XYADJUST=nn/nn             This shifts the image in the x/y dir without
                            perspective
~Format+

Below are commands that support Marc Reinig's terrain features.

RANDOMIZE=nnn (0 - 100)\
This feature randomly varies the color of a pixel to near by colors.
Useful to minimize map banding in 3D transformations.  Usable with all
FILLTYPES. 0 disables, max values is 7.  Try 3 - 5.

AMBIENT=nnn (0 - 100)\
Set the depth of the shadows when using full color and light source
filltypes. "0" disables the function, higher values lower the contrast.

FULLCOLOR=yes\
Valid with any light source FILLTYPE.  Allows you to create a Targa-24 file
which uses the color of the image being transformed or the map you select
and shades it as you would see it in real life.  Well, its better than B&W.
A good map file to use is topo

HAZE=nnn (0 - 100)\
Gives more realistic terrains by setting the amount of haze for distant
objects when using full color in light source FILLTYPES.  Works only in the
"y" direction currently, so don't use it with much y rotation.  Try
"rotation=85/0/0". 0 disables.

BACKGROUND=nn/nn/nn\
Sets the background color of the Targa-24 file by setting the red, green,
and blue values (rr/gg/bb).

LIGHTNAME=<filename>\
The name of the Targa-24 file to be created when using full color with
light source.  Default is light001.tga.  If overwrite=no (the default), the
file name will be incremented until an unused filename is found.
Background in this file will be the color set by background=r/g/b, the
default is sky blue.

MONITORWIDTH=<nnn>\
This parameter allows you to specify the width in inches of the image on
your monitor for the purpose of getting the correct stereo effect when
viewing RDS images.  See {Random Dot Stereograms (RDS)}.
;
;
;
~Topic=Batch Mode

It IS possible, believe it or not, to become so jaded with the screen
drawing process, so familiar with the types and options, that you just
want to hit a key and do something else until the final images are safe on
disk.  To do this, start Id with the BATCH=yes parameter.  To set up
a batch run with the parameters required for a particular image you might:
  o Find an interesting area.  Note the parameters from the <Tab> display.
    Then use an editor to write a batch file.
  o Find an interesting area.  Set all the options you'll want in the
    batch run.  Use the <B> command to store the parameters in a file.
    Then use an editor to add the additional required batch mode
    parameters (such as VIDEO=) to the generated parameter file entry.
    Then run the batch using "id @myname.par/myentry" (if you told
    the <B> command to use file "myname" and to name the entry "myentry").

Another approach to batch mode calculations, using "FILENAME=" and resume,
is described later.

When modifying a parameter file entry generated by the <B> command, the
only parameters you must add for a batch mode run are "BATCH=yes", and
"VIDEO=xxx" to select a video mode.  You might want to also add
"SAVENAME=[name]" to name the result as something other than the default
FRACT001.GIF.  Or, you might find it easier to leave the generated
parameter file unchanged and add these parameters by using a command like:
   id @myname.par/myentry batch=y video=AF3 savename=mygif

"BATCH=yes" tells Id to run in batch mode -- that is, Id draws
the image using whatever other parameters you specified, then acts as if
you had hit <S> to save the image, then exits.

"FILENAME=" can be used with "BATCH=yes" to resume calculation of an
incomplete image.  For instance, you might interactively find an image you
like; then select some slow options (a high resolution disk video mode,
distance estimator method, high maxiter, or whatever);  start the
calculation;  then interrupt immediately with a <S>ave.  Rename the save
file (fract001.gif if it is the first in the session and you didn't name
it with the <X> options or "savename=") to xxx.gif.  Later you can run
Id in batch mode to finish the job:\
    id batch=yes filename=xxx savename=xxx

"SAVETIME=nnn" is useful with long batch calculations, to store a
checkpoint every nnn minutes.  If you start a many hour calculation with
say "savetime=60", and a power failure occurs during the calculation,
you'll have lost at most an hour of work on the image.  You can resume
calculation from the save file as above.  Automatic saves triggered by
SAVETIME do not increment the save file name.  The same file is overwritten
by each auto save until the image completes.  But note that Id does
not directly over-write save files.  Instead, each save operation writes a
temporary file id.tmp, then deletes the prior save file, then
renames id.tmp to be the new save file.  This protects against power
failures which occur during a save operation - if such a power failure
occurs, the prior save file is intact and there's a harmless incomplete
id.tmp on your disk.

If you want to spread a many-hour image over multiple bits of free machine
time you could use a command like:\
    id batch=yes filename=xxx savename=xxx savetime=60 video=F3\
While this batch is running, hit <S> (almost any key actually) to tell
Id to save what it has done so far and give your machine back.  A status
code of 2 is returned by Id to the batch file.  Kick off the batch
again when you have another time slice for it.

When the savetime parameter is negative, Id will save the image after
the requested time and exit.  This is useful in batch files where you want to
generate several images with a time limit on each image.

While running a batch file, pressing any key will cause Id to exit
with an errorlevel = 2.  Any error that interrupts an image save to disk
will cause an exit with errorlevel = 2.  Any error that prevents an image
from being generated will cause an exit with errorlevel = 1.

The SAVETIME= parameter, and batch resumes of partial calculations, only
work with fractal types which can be resumed.  See
{"Interrupting and Resuming"} for information about non-resumable types.
;
;
;
~Topic="Disk-Video" Modes

These "video modes" do not involve a video adapter at all.  They use (in
order or preference) your expanded memory, your extended memory, or your
disk drive (as file id.$$$) to store the fractal image.  These modes
are useful for creating images beyond the capacity of your video adapter
right up to the current internal limit of 32767 x 32767 x 256,
e.g. for subsequent printing.
They're also useful for
background processing under multi-tasking DOS managers - create an image
in a disk-video mode, save it, then restore it in a real video mode.

While you are using a disk-video mode, your screen will display text
information indicating whether memory or your disk drive is being used,
and what portion of the "screen" is being read from or written to.  A
"Cache size" figure is also displayed. 64K is the maximum cache size.  If
you see a number less than this, it means that you don't have a lot of
memory free, and that performance will be less than optimum.  With a very
low cache size such as 4 or 6k, performance gets considerably worse in
cases using solid guessing, boundary tracing, plasma, or anything else
which paints the screen non-linearly.  If you have this problem, all we
can suggest is having fewer TSR utilities loaded before starting Id,
or changing in your config.sys file, such as reducing a very high BUFFERS
value.

The zoom box is disabled during disk-video modes (you couldn't see where
it is anyway).  So is the orbit display feature.

{=@ColorCycling Color Cycling} can be used during disk-video modes,
but only to load or save a color palette.

When using real disk for your disk-video, Id previously would not
generate some "attractor" types (e.g.  Lorenz) nor "IFS" images.  These stress
disk drives with intensive reads and writes, but with the caching algorithm
performance may be acceptable.  Currently Id gives you a warning message
but lets you proceed.  You can end the calculation with <Esc> if you think your
hard disk is getting too strenuous a workout.

When using a real disk, and you are not directing the file to a RAM disk,
and you aren't using a disk caching program on your machine, specifying
BUFFERS=10 (or more) in your config.sys file is best for performance.
BUFFERS=10,2 or even BUFFERS=10,4 is also good.  It is also best to keep
your disk relatively "compressed" (or "defragmented") if you have a
utility to do this.

In order to use extended memory, you must have HIMEM.SYS or an equivalent
that supports the XMS 2.0 standard or higher.  Also, you can't have a
VDISK installed in extended memory.  Himem.sys is distributed with
Microsoft Windows 286/386 and 3.0.  If you have problems using the
extended memory, try rebooting with just himem.sys loaded and see if that
clears up the problem.

If you are running background disk-video fractals under Windows 3, and you
don't have a lot of real memory (over 2Mb), you might find it best to
force Id to use real disk for disk-video modes.  (Force this by
using a .pif file with extended memory and expanded memory set to zero.)
Try this if your disk goes crazy when generating background images, which
are supposedly using extended or expanded memory.  This problem can occur
because, to multi-task, sometimes Windows must page an application's
expanded or extended memory to disk, in big chunks.  Id's own cached
disk access may be faster in such cases.
;
;
;
~Topic=Customized Video Modes\, id.cfg

If you have a favorite adapter/video mode that you would like to add to
Id... if you want some new sizes of disk-video modes... if you want
to remove table entries that do not apply to your system... if you want to
specify different "textsafe=" options for different video modes... relief
is here, and without even learning "C"!

You can do these things by modifying the id.cfg file with your text
editor.  Saving a backup copy of id.cfg first is of course highly
recommended!

Id uses a video adapter table for most of what it needs to know
about any particular adapter/mode combination.  The table is loaded from
id.cfg each time Id is run.  It can contain information for
up to 300 adapter/mode combinations.  The table entries, and the function
keys they are tied to, are displayed in the "select video mode" screen.

This table makes adding support for various third-party video cards and
their modes much easier, at least for the ones that pretend to be
standard with extra dots and/or colors.  There is even a special
"roll-your-own" video mode (mode 19) enabling those of you with "C"
compilers and a copy of the Id source to generate video modes
supporting whatever adapter you may have.

The table as currently distributed begins with nine standard and several
non-standard IBM video modes that have been exercised successfully with a
PS/2 model 80.  These entries, coupled with the descriptive comments in the
table definition and the information supplied (or that should have been
supplied!) with your video adapter, should be all you need to add your own
entries.

After the IBM and quasi-pseudo-demi-IBM modes, the table contains an ever-
increasing number of entries for other adapters.  Almost all of these
entries have been added because someone like you sent us spec sheets, or
modified Id to support them and then informed us about it.

Lines in id.cfg which begin with a semi-colon are treated as comments.
The rest of the lines must have eleven fields separated by commas.
The fields are defined as:

~Format-
1. Key assignment.  F2 to F10, SF1 to SF10, CF1 to CF10, or AF1 to AF10.
   Blank if no key is assigned to the mode.
2. The name of the adapter/video mode (25 chars max, no leading blanks).
   The adapter is set up for that mode via INT 10H, with:
3. AX = this,
4. BX = this,
5. CX = this, and
6. DX = this (hey, having all these registers wasn't OUR idea!)
7. An encoded value describing how to write to your video memory in that
   mode.  Currently available codes are:
  1) Use the BIOS (INT 10H, AH=12/13, AL=color) (last resort - SLOW!)
  2) Pretend it's a (perhaps super-res) EGA/VGA
  3) Pretend it's an MCGA
  4) SuperVGA 256-Color mode using the Tseng Labs chipset
  5) SuperVGA 256-Color mode using the Paradise chipset
  6) SuperVGA 256-Color mode using the Video-7 chipset
  7) Non-Standard IBM VGA 360 x 480 x 256-Color mode
  8) SuperVGA 1024x768x16 mode for the Everex chipset
  9) TARGA video modes
 10) HERCULES video mode
 11) Non-Video, i.e. "disk-video"
 12) 8514/A video modes
 13) CGA 320x200x4-color and 640x200x2-color modes
 14) Reserved for Tandy 1000 video modes
 15) SuperVGA 256-Color mode using the Trident chipset
 16) SuperVGA 256-Color mode using the Chips & Tech chipset
 17) SuperVGA 256-Color mode using the ATI VGA Wonder chipset
 18) SuperVGA 256-Color mode using the EVEREX chipset
 19) Roll-your-own video mode (as you've defined it in YOURVID.C)
 20) SuperVGA 1024x768x16 mode for the ATI VGA Wonder chipset
 21) SuperVGA 1024x768x16 mode for the Tseng Labs chipset
 22) SuperVGA 1024x768x16 mode for the Trident chipset
 23) SuperVGA 1024x768x16 mode for the Video 7 chipset
 24) SuperVGA 1024x768x16 mode for the Paradise chipset
 25) SuperVGA 1024x768x16 mode for the Chips & Tech chipset
 26) SuperVGA 1024x768x16 mode for the Everex Chipset
 27) SuperVGA Auto-Detect mode (we poke around looking for your adapter)
 28) VESA modes
 29) True Color Auto-Detect (currently only Targa+ supported)
Add 100, 200, 300, or 400 to this code to specify an over-ride "textsafe="
 option to be used with the mode.  100=yes, 200=no, 300=bios, 400=save.
 E.g. 428 for a VESA mode with textsafe=save forced.
8. The number of pixels across the screen (X - 2 to 2048)
9. The number of pixels down the screen (Y - 2 to 2048)
10. The number of available colors (2, 4, 16, or 256)
11. A comment describing the mode (25 chars max, leading blanks are OK)
~Format+

NOTE that the AX, BX, CX, and DX fields use hexadecimal notation (fifteen
==> 'f', sixteen ==> '10'), because that's the way most adapter
documentation describes it.  The other fields use standard decimal
notation.

If you look closely at the default entries, you will notice that the IBM
VGA entries labeled "tweaked" and "non standard" have entries in the table
with AX = BX = CX = 0, and DX = some other number.  Those are special flags
that we used to tell the program to custom-program the VGA adapter, and
are NOT undocumented BIOS calls.  Maybe they should be, but they aren't.

If you have a fancy adapter and a new video mode that works on it, and it
is not currently supported, PLEASE GET THAT INFORMATION TO US!  We will
add the video mode to the list on our next release, and give you credit
for it.  Which brings up another point: If you can confirm that a
particular video adapter/mode works (or that it doesn't), and the program
says it is UNTESTED, please get that information to us also.  Thanks in
advance!
;
;
;
