;
; HELP.SRC
;
;
~HdrFile=HELPDEFS.H
~HlpFile=id.hlp
~Version=100
~FormatExclude=8
;
;
;
~Topic=Main Help Index, Label=IDHELP_MENU
~Label=IDHELP_INDEX

~Format-
   { Using Help }                           { Fractals and the PC }
   { Introduction }                         { Distribution of Fractint }
   { Conditions on Use }                    { Contacting the Authors }
   { Getting Started }                      { The Stone Soup Story }
   { New Features in 20.4.X }               { A Word About the Authors }
                                          { Other Fractal Products }
   { Display Mode Commands }
   { Color Cycling Commands }               { Fractint on Unix }
   { Palette Editing Commands }             { Using Fractint With a Mouse }
                                          { Video Adapter Notes }
   { Summary of Fractal Types }             { GIF Save File Format }

   { Doodads\, Bells\, and Whistles }         { Common Problems }
   { "3D" Images }
   { Palette Maps }                         { Bibliography }
                                          { Other Programs }
   { Startup Parameters\, Parameter Files }  { Revision History }
   { Batch Mode } 
   { "Disk-Video" Modes }                   { Printing Fractint Documentation }

~Format+
;
;
;
~DocContents
{     , 0, "New Features in 20.4.X", FF}
{     , 0, "Introduction", "Conditions on Use", FF}

{1.   , 0, Fractint Commands, FF}
{1.1  , 1, "Getting Started"}
{1.2  , 1, "Plotting Commands"}
{1.3  , 1, "Zoom box Commands"}
{1.4  , 1, "Color Cycling Commands"}
{1.5  , 1, "Palette Editing Commands"}
{1.6  , 1, "Image Save/Restore Commands"}
{1.7  , 1, "Print Command"}
{1.8  , 1, "Parameter Save/Restore Commands"}
{1.9  , 1, "\"3D\" Commands"}
{1.10 , 1, "Interrupting and Resuming"}
{1.11 , 1, "Orbits Window"}
{1.12 , 1, "View Window"}
{1.13 , 1, "Video Mode Function Keys"}
{1.14 , 1, "Browse Commands"}
{1.15 , 1, "Evolver Commands"}
{1.16 , 1, "RDS Commands"}
{1.17 , 1, "Hints"}
{1.18 , 1, "Fractint on Unix"}

{2.   , 0, "Fractal Types", FF}
{2.1  , 1, "The Mandelbrot Set"}
{2.2  , 1, "Julia Sets"}
{2.3  , 1, "Julia Toggle Spacebar Commands"}
{2.4  , 1, "Inverse Julias"}
{2.5  , 1, "Newton domains of attraction"}
{2.6  , 1, "Newton"}
{2.7  , 1, "Complex Newton"}
{2.8  , 1, "Lambda Sets"}
{2.9  , 1, "Mandellambda Sets"}
{2.10 , 1, "Circle"}
{2.11 , 1, "Plasma Clouds"}
{2.12 , 1, "Lambdafn"}
{2.13 , 1, "Mandelfn"}
{2.14 , 1, "Barnsley Mandelbrot/Julia Sets"}
{2.15 , 1, "Barnsley IFS Fractals"}
{2.16 , 1, "Sierpinski Gasket"}
{2.17 , 1, "Quartic Mandelbrot/Julia"}
{2.18 , 1, "Distance Estimator"}
{2.19 , 1, "Pickover Mandelbrot/Julia Types"}
{2.20 , 1, "Pickover Popcorn"}
{2.21 , 1, "Peterson Variations"}
{2.22 , 1, "Unity"}
{2.23 , 1, "Scott Taylor / Lee Skinner Variations"}
{2.24 , 1, "Kam Torus"}
{2.25 , 1, "Bifurcation"}
{2.26 , 1, "Orbit Fractals"}
{2.27 , 1, "Lorenz Attractors"}
{2.28 , 1, "Rossler Attractors"}
{2.29 , 1, "Henon Attractors"}
{2.30 , 1, "Pickover Attractors"}
{2.31 , 1, "Gingerbreadman"}
{2.32 , 1, "Martin Attractors"}
{2.33 , 1, "Icon"}
{2.34 , 1, "Test"}
{2.35 , 1, "Formula"}
{2.36 , 1, "Julibrots"}
{2.37 , 1, "Diffusion Limited Aggregation"}
{2.38 , 1, "Magnetic Fractals"}
{2.39 , 1, "L-Systems"}
{2.40 , 1, "Lyapunov Fractals"}
{2.41 , 1, "fn||fn Fractals"}
{2.42 , 1, "Halley"}
{2.43 , 1, "Dynamic System"}
{2.44 , 1, "Mandelcloud"}
{2.45 , 1, "Quaternion"}
{2.46 , 1, "HyperComplex"}
{2.47 , 1, "Cellular Automata"}
{2.48 , 1, "Ant Automaton"}
{2.49 , 1, "Phoenix"}
{2.50 , 1, "Frothy Basins"}
{2.51 , 1, "Volterra-Lotka Fractals"}
{2.52 , 1, "Escher-Like Julia Sets"}
{2.53 , 1, "Latoocarfian"}
;{2.54 , 1, "Mandelbrot Mix 4"}

{3.   , 0, Doodads\, Bells\, and Whistles, FF}
{3.1  , 1, "Drawing Method"}
{3.2  , 1, "Palette Maps"}
{3.3  , 1, "Autokey Mode"}
{3.4  , 1, "Distance Estimator Method"}
{3.5  , 1, "Inversion"}
{3.6  , 1, "Decomposition"}
{3.7  , 1, "Logarithmic Palettes and Color Ranges"}
{3.8  , 1, "Biomorphs"}
{3.9  , 1, "Continuous Potential"}
{3.10 , 1, "Starfields"}
{3.11 , 1, "Bailout Test"}
{3.12 , 1, "Parameter Explorer/Evolver"}
{3.13 , 1, "Random Dot Stereograms (RDS)"}
{3.14 , 1, "Freestyle mode tutorial"}

{4.   , 0, "\"3D\" Images", "3D Overview", FF}
{4.1  , 1, "3D Mode Selection"}
{4.2  , 1, "Select Fill Type Screen"}
{4.3  , 1, "Stereo 3D Viewing"}
{4.4  , 1, "Rectangular Coordinate Transformation"}
{4.5  , 1, "3D Color Parameters"}
{4.6  , 1, "Light Source Parameters"}
{4.7  , 1, "Spherical Projection"}
{4.8  , 1, "3D Overlay Mode"}
{4.9  , 1, "Special Note for CGA or Hercules Users"}
{4.10 , 1, "Making Terrains"}
{4.11 , 1, "Making 3D Slides"}
{4.12 , 1, "Interfacing with Ray Tracing Programs"}

{5.   , 0, Command Line Parameters\, Parameter Files\, Batch Mode, "Introduction to Parameters", FF}
{5.1  , 1, "Using the DOS Command Line"}
{5.2  , 1, "Setting Defaults (SSTOOLS.INI File)"}
{5.3  , 1, "Parameter Files and the <@> Command"}
{5.4  , 1, "General Parameter Syntax"}
{5.5  , 1, "Startup Parameters"}
{5.6  , 1, "Calculation Mode Parameters"}
{5.7  , 1, "Fractal Type Parameters"}
{5.8  , 1, "Image Calculation Parameters"}
{5.9  , 1, "Color Parameters"}
{5.10 , 1, "Doodad Parameters"}
{5.11 , 1, "File Parameters"}
{5.12 , 1, "Video Parameters"}
{5.13 , 1, "Sound Parameters"}
{5.13.1,2, "Sound Controls"}
{5.13.2,2, "Advanced Sound Controls"}
{5.13.3,2, "Envelopes"}
{5.14 , 1, "Printer Parameters"}
{5.15 , 1, "PostScript Parameters"}
{5.16 , 1, "PaintJet Parameters"}
{5.17 , 1, "Plotter Parameters"}
{5.18 , 1, "3D Parameters"}
{5.19 , 1, "Batch Mode"}
{5.20 , 1, "Browser Parameters"}
{5.21 , 1, "Passes Parameters"}
{5.22 , 1, "Screen Coordinates Screen"}
{5.23 , 1, "Image Coordinates Screen"}

{6.   , 0, Hardware Support, FF}
{6.1  , 1, Notes on Video Modes\, \"Standard\" and Otherwise,
                    "Video Adapter Notes", "EGA", "Tweaked VGA", "Super-VGA",
                    "8514/A", "XGA", "Targa", "Targa+"}
{6.2  , 1, "\"Disk-Video\" Modes"}
{6.3  , 1, "Customized Video Modes\, FRACTINT.CFG"}

{7.   , 0, "Common Problems", FF}

{8.   , 0, "Fractals and the PC", FF}
{8.1  , 1, A Little History}
{8.1.1, 2, "Before Mandelbrot"}
{8.1.2, 2, "Who Is This Guy\, Anyway?"}
{8.2  , 1, A Little Code}
{8.2.1, 2, "Periodicity Logic"}
{8.2.2, 2, "Limitations of Integer Math (And How We Cope)"}
{8.2.3, 2, "Arbitrary Precision and Deep Zooming"}
{8.2.4, 2, "The Fractint \"Fractal Engine\" Architecture"}

{Appendix A, 0, Mathematics of the Fractal Types,
                   "Summary of Fractal Types",
                   "Inside=bof60|bof61|zmag|fmod|period|atan",
                   "Inside=epscross|startrail",
                   "Finite Attractors",
                   "Trig Identities",
                   "Quaternion and Hypercomplex Algebra",FF}

{Appendix B, 0, Stone Soup With Pixels: The Authors,
                   "The Stone Soup Story",
                   "A Word About the Authors",
                   "Distribution of Fractint",
                   "Contacting the Authors", FF}

{Appendix C, 0, "GIF Save File Format", FF}

{Appendix D, 0, "Other Fractal Products", FF}

{Appendix E, 0, "Bibliography", FF}

{Appendix F, 0, "Other Programs", FF}

{Appendix G, 0, "Revision History", FF}

;
; End of DoContents
;
;
;
~Topic=Using Help
; This topic is online only.
Use the following keys in help mode:

   F1              Go to the main help index.

   PgDn/PgUp       Go to the next/previous page.

   Backspace       Go to the previous topic.

   Escape          Exit help mode.

   Enter           Select (go to) highlighted hot-link.

   Tab/Shift-Tab   Move to the next/previous hot-link.

   \24 \25 \27 \26         Move to a hot-link.

   Home/End        Move to the first/last hot-link.
;
;
;
~Topic=Printing Fractint Documentation
You can generate a text file containing full Fractint documentation by
selecting the "Generate FRACTINT.DOC now" hot-link below and pressing
Enter, or by using the DOS command "fractint makedoc=filename" ("filename"
is the name of the file to be written; it defaults to FRACTINT.DOC.)

All information in the documentation file is also available in the online
help, so extracting it is a matter of preference - you can print the
file (e.g.  DOS command "print fractint.doc" or "copy fractint.doc prn")
or read it with a text editor.  It contains over 200 pages of information,
has a table of contents, and is cross-referenced by page number.

  {=-101 Exit without generating FRACTINT.DOC}

  {=-100 Generate FRACTINT.DOC now}

Fractint's great (and pioneering but no longer unique) online help and
integrated documentation file software was written by Ethan Nagel.
;
;
;
~Topic=New Features in 20.4.X
This is a developer's "incremental" release. These incremental releases
typically have a short life and are updated frequently. They may have
bug fixes, and thus be more stable, but they may also have new features
which very likely have new bugs.

Version 20.4.5 is an update of Fractint 20.0 based on the developer's
  version 20.4.4.  New features include:

Patch 5 to Version 20.4.0\

Tim's changes (5/29/2006)\
  Moved version 20.0 change history to revision history to make room
  in help.src.
  
  Changed help screen to show just two main authors - decided
  better not to show inactive authors.
  
  Removed commented out complex macros in fractals.c.
  
  Added commented out bf version of Mandelbrot in fractalp.c. Giving 
  thought to offerring bfmath as an option to bnmath, but if we fix the 
  current bignum problems, this may be moot.
  
  Added interation to <tab> screen.

  Added code to force periodicity=0 when the inside=atan feature is used.

Jonathan's changes\
  Fixed the logic for calculating when to switch from using a grid to using
  the on-the-fly calculation of an image's pixels.  The logic was not
  handling disk video images sized above 2048x2048 with floating point enabled.

  Added the savename to the disk video status screen.

  Fixed bug in the compare routine of bn_math that fixes long standing problem
  with periodicity checking in deep zoomed images.

  Resurrected the documentation for ap_math that was at the beginning of bignum.c.

Patch 4 to Version 20.4.0\
Added minor changes so that Xfractint would compile under Cygwin.

  Added lines to the Xfractint makefile (commented out) for compiling in a
  64-bit environment.

  Fixed Xfractint so that built in calls to a different map file would
  work.
  
  Modified the logic for calculating when to switch from using a grid
  to using the on-the-fly calculation of an image's pixels.  This affects
  how large an image can be made when using integer math.  The switch is
  now made when (xdots + ydots) * sizeof(long) > 32768.

  Pulled the WinFract version 18.21 source into the CVS repository source
  tree.  This code now runs but still has many many bugs.

Patch 3 to Version 20.4.0\
Started the cleanup of the docs.  Cleaned up the map directory.

  Fixed the Xfractint Makefile so that install would run.  Added an
  uninstall.

  Fixed Xfractint so that it can be run from an arbitrary directory and
  still use the directory settings in sstools.ini.

Patch 2 to Version 20.4.0\
Fixed the display coordinates so they won't change, after an image had been
  zoomed, when the maintain screen coordinates parameter is set to yes.

  Fixed the corner parameter screen and image parameter screen so that
  rotating and/or skewing now doesn't get reset when changes are made.

Patch 1 to Version 20.4.0\
Added the mathtolerance and orbit_delay parameters to values written
  to PARs and GIFs.

  Fixed how a mathtolerance parameter with a slash and a second number, but
  no first number is read in.  The slash was being interpreted as a double.

  Stole the <p> key for use by passes options.  If you are brave enough to
  try it, printing is still available using <ctl-p>.

  Put periodicity and orbit delay on the new <p> screen.  There are currently
  two drawing modes available for the passes=orbits option.  The rect(angle)
  method plots the orbits in a rectangle that can be zoomed, rotated, and
  skewed using the <F6> corner parameter screen, and the straight line method
  plots the orbits between two points specified on the <F6> corner parameter
  screen.  The orbit interval parameter plots every nth orbit.  The maintain
  screen coordinates parameter lets you zoom into an image changing the
  coordinates of the line or rectangle used to generate the image, but keeps
  the display coordinates, set on the <F2> screen, the same.

  Updated the docs for center-mag and corners because center-mag is now the
  default.

  Restructured the source to make it easier to maintain.

Version 20.4.0\
Incremented the version number to accommodate backwards compatibility for
  the mandel based per-pixel routines that were not setting the Y variable.

  Added a passes=o option that draws an image by plotting the orbits of the
  escape time fractals and leaving them on the screen.  This technique uses
  the same coordinates to draw an image as the other passes options, sets
  "passes=1" and no symmetry, and then plots the orbits for each pixel.
  See {Drawing Method}.

Xfractint fixes:
  Fixed the newton and newtbasin types in Xfractint so they would work
  without using the FPU=387 option.

  Fixed the Xfractint mandelbrot code in calmanfp.c so that the image
  generated matched the one produced by the StandardFractal() routine.

  Fixed the outside=sum option when used with the mandel fractal type.

  Fixed the command line option -geometry, which broke at 20.2.05.

Patch 2 to Version 20.3.0\
Fixed the inability to reload a PAR created from an arbitrary precision
  fractal with a large magnification. 

  Fixed the problem with a left mouse click not bringing up the zoom box
  after an image is completed.

  Incorporated Gerald Dobiasovsky's fix for the julibrot type when used
  with quat and hypercomplex.

  Fixed the display of subdirectories in Xfractint.

  Replaced control characters in realdos.c with the equivalent ascii values
  to quiet complaints by CVS.

Patch 1\
Fixed the float bailout for the lambdafn fractal type when the EXP function
  is used so the float and integer images match.
  
  Jan Andres contributed Xfractint fixes that allow compiling with newer
  versions of gcc because varargs.h is no longer supported.  Enabled the
  use of the long double type on Solaris.  Moved the getwd() macro definition
  in prompts1.c after the #include lines, to avoid the mess that happens when
  the prototype for getwd() is included but it's already defined as a macro.
  Added some Solaris-specific comments to the Makefile.

  Fixed the sound in Xfractint so the beep turns off now.

  Changed lsys.c to use inline1 instead of the reserved word inline.

Version 20.3.0\
Incremented the version number to accommodate backwards compatibility for
  the inside=atan and outside=atan options.
  
  Fixed inside=atan and outside=atan to use the full color palette instead
  of limiting to 180 colors.

  Added Charlie Chernohorsky's virtual screen zoombox fix.  See {View Window}.

  Added Gerald Dobiasovsky's fixes for the demo key files needed because
  of menu prompt changes and pan/zoom size changes.

  Fixed evolver parameter entry.

  Fixed hypercomplex fractal type to turn off symmetry when a cj parameter
  is used.

  Fixed the plasma type to show the value of the parameter that is actually
  used in the image generation.

  Fixed the plasma type so that a parameter file uses the colors included
  in the parameter entry instead of the default colors.

  Revised the plasma type prompt to reflect the values that can actually be
  used.

  Increased the Lsystem line length from 160 characters to 255 characters.

  Fixed the browser so that it recognized the fractal type stored in images.

  Fixed the Xfractint FPUcplxdiv and FPUcplxlog routines in fpu087.c to
  match the Fractint assembler code.

  Modified the Xfractint resume code to remove the Xfractint specific
  sections since they are no longer needed (gcc macros match MSC macros).

Patch 5\
Made changes to allow Xfractint to find files that use upper case letters.

  Fixed a problem with the Cellular type that prevented entering an initial
  row of greater than 32767 from working.  Added a message about not being
  able to resume after interrupting prior to rows being displayed on screen.

  Fixed an evolver bug which caused setting evolver parameters to turn
  evolving on, even though evolving was actually turned off.

  Added Charlie Chernohorsky's truecolor speed up and his implementation
  of virtual screen sizes for the VESA modes (dotmode=28).  This feature
  does not work consistently between different video cards, so it may be
  turned off by using the startup command "virtual=n".
  Use the <V> screen to set the desired virtual screen size.  See
  {View Window}.  Please remember that if either X or Y is greater than 2048,
  solid guessing is turned off.  This is for multiple reasons, so it is
  likely it will NOT get fixed soon.  There is also a problem with the
  colorbars that appear when saving an image leaving bits of corruption
  on the screen.  This occurs in all the VESA truecolor modes.

  Added Charlie to the scrolling list of contributors.

  Added Charlie's fix for the l-system type which occurred when a push-pop
  combination was on two different lines.

  Fixed the PAGE-UP/PAGE-DN zoombox in Xfractint so that it now appears on
  the screen.  Fixed ranges= in Xfractint so GIFs save correctly and
  program doesn't end abruptly.

Patch 4\
Modified the Xfractint makefile and source files to allow compiling
  without an assembler.

Patch 3\
This patch ran the Xfractint code through -Wall to clear up most of the
  warnings.  Updated the Xfractint man page.  Turned on compiler
  optimizations.

  Fixed the documentation for the Latoocarfian fractal type thanks to
  comments by Pierre Desjardins on the Fractint Bug List.

Patch 2\
This patch adds the assembly language version of the mandelbrot code to
  Xfractint.  To use it, it is necessary to place the command line switch
  fpu=387 in your sstools.ini file.  The NASM assembler was used, but if you
  don't have it available, not to worry, the object file is included.

  Modified the Xfractint C mandelbrot code to match the assembly version.

Patch 1\
Made a small change to the quickcalc logic used to recalculate the inside
  pixels only when the iteration count is increased with a completed image.
  Interrupting and resuming the calculation was leaving extra pixels on the
  screen.

  Patched the Xfractint fractint.h file to match the DOS version.

  Fixed an Xfractint problem with color depths greater than 16 bits per pixel.

Version 20.2.0\
Incremented the version number to accommodate backwards compatibility for
  the logmap option.

  Modified the logmap routine so that the color with index # 2 would be
  displayed.

  Added a logmode=auto command line option that causes the logmap to adjust
  automatically when zooming.  Changing almost anything will turn this
  feature off.  It is best set using the <g> screen prompt.

  Edited the help docs to document the move of the development area from
  Compuserve to the web.

Patch 13\
Added parameters p4 and p5 to the evolver.  This required splitting the
  tweak central screen into two pages.

  Fixed an evolver bug that was causing the evolver to not exit cleanly.

  Changed the compile options on evolve.c to eliminate aliasing, which
  started to cause problems with this patch.

Patch 12\
Fixed a problem with a finished image not redrawing if the maxiter was
  increased and another parameter was changed.

  Added checks for p3, p4, and p5 to the browser for determining similar
  images.

Xfractint fixes:
  Fixed the command line -disk segmentation fault.

  Fixed the Shell to Linux/Unix segmentation fault and the displayed prompt.

  Fixed the bug causing colors= data to be incorrect when in a truecolor mode.

  Removed or commented out extra lines of code and some experimental
  routines.  Some of this code was stealing key strokes.

  Changed the prompt for getting to the second <TAB> screen.

Patch 11\
Fixed a bug that caused a panned image to miss part of a line when the
  image was panned while the first row was being generated.

  Adjusted the time for keyboard checks when the showdot feature is used.  Now
  the iterations stop much quicker when a key is pressed.

  Fixed a problem with the float-only version that appeared when an incomplete
  image was saved and restarted in the standard version.

  Fixed a problem in Xfractint pointed out by Ken on the Fractint bug list.

Patch 10\
Took out a sanity check in the VESA detection routines that certain graphics
  cards don't pass, but work fine anyway.

Patch 9\
Fixed evolver bug that occurred when some formula functions were evolved
  and others were not being evolved.

  Fixed a bug in the float-only version which truncated the image
  coordinates when saved to a PAR.

Patch 8\
Added truecolor support to Fractint thanks to Bert Tyler.  While in a
  truecolor mode, the following features are disabled/changed:\
    Color Cycling\
    Palette Editor brings up the contents of the MAP directory\
    Saving the image still only produces a 256 color GIF\

  Removed Bert's truecolor test code used with the test fractal type.

Patch 7\
Fixed a bug which caused the float only version to omit the name of the
  formula/lsystem/ifs in saved GIFs.  Fixed the julia_inverse fractal type
  broken with the first patch to version 20.0.

  Incorporated Gerald Dobiasovsky's fix to make the background= command work.

  Added truecolor support to Xfractint thanks to Richard Thomson and
  Jean-Pierre Demailly.

  Additional Xfractint fixes include the mandelcloud type and outside=atan
  when used with type=mandel.

Patch 6\
Once again fixed the assignment of hotkeys to video modes so that the
  fractint.cfg file is no longer corrupted.  This problem was caused by
  the section of code dealing with the true-color video modes.

Patch 5\
Updated the disk video help docs.  The limit of disk video has been
  32767x32767 since version 20.0.

  Fixed the tab and evolver screens so that not using formula parameters
  consecutively starting with p1 now displays the parameters properly.
  The p4 and p5 parameters have still not been added to the evolver.

  Setting directories in sstools.ini can now be done relative to the
  current directory.  For example: .\\frm\\fract200.frm

Patch 4\
Modified the per image startup code for the circle type to turn off the
  inside= option if startrail is used.  Since the inside=startrail option
  was locking up Fractint, no backwards compatibility is available.

  Made changes to the code for how sizeof() was being used.  This fixes a
  long standing problem with the cellular type in Xfractint.

  Modified the hard coded reading of GIF files in Xfractint to eliminate
  the error message received after patch 3 changed the fractal_info
  structure.

  Fixed a problem with the Xfractint parameter, formula, and lsystem screens.

Patch 3\
Fixed the incremental redraw so that interrupting the redraw no longer sets
  passes=1.

  Added a command line option, nobof=yes, which allows the inside=bof60 and
  bof61 options to function like the rest of the inside options.  With
  nobof=yes the images in "The Beauty of Fractals" are no longer reproduced.

  Increased the usable bailout values when using arbitrary precision math.
  This is the best I can do with my minimal understanding of the ap-math
  routines.  If you are seeing extraneous pixels on your ap-math images when
  you use a high bailout, lower the bailout until they go away.

  Made a change to the tab display routine to correct a problem with
  displaying parameters when returning from the F6 and control-tab screens.

Patch 2\
Backed out the changes to the savegraphics() and restoregraphics() routines.

Patch 1\
Fixed the <TAB> display screen so the video memory doesn't get overwritten.
  This clears up the problem with extraneous dots with some fractal types.
  It should be possible to remove the textsafe=save from your sstools.ini
  file.

  Added Iain Stirling to the scrolling credits screen for his contribution
  of the inside=fmod and outside=fmod options.

  Reworded the error message received when more memory is requested than
  is available on your disk drive.

  The background= parameter, for 3D TGA files, is now saved to a PAR entry.

  Fixed the error message that appears when a parsing error occurs on
  startup.

  Cleaned up the savegraphics() and restoregraphics() routines.  This should
  make them faster.

Version 20.1.0\
Incremented the version number to accommodate backwards compatibility for
  the inside=fmod option.

  Fixed the assignment of hotkeys to video modes so that the fractint.cfg
  file is no longer corrupted.  Made the showdot= feature reset with <INS>
  if it is entered using the <g> screen.  Added a check for the video size
  before invoking the palette editor.  Too small a size would crash Fractint.

  Fixed an extraseg conflict which occurred with arbitrary precision when
  the <tab> key was used with various screens open (x,y,b).  This conflict
  also occurred when loading an ap math image at the video selection screen.
  Cleaned up some of the ap math initialization code.

  Fixed an obscure bug that left memory allocated when an unfinished image
  was being reloaded, but a video mode was not selected (escape was pressed).

  Added outside=fmod option.  This is an extension of the inside=fmod option.
  The magnitude used for the comparison is now based on the same calculation as
  is used for the bailout test.  This feature was contributed by Iain Stirling.
  There is a problem with the mandel fractal type when outside=fmod is used
  with inside=bof6x and bailoutest=real, imag, or manr.  This is likely due
  to changes made in the code so that bof images could be reproduced.  Select
  a different fractal type that produces the default mandel image to explore
  using these parameters.

  Added outside=tdis option.  This colors the pixels according to the total
  distance traveled by the orbit.  This feature was suggested by Steve Robinson
  on the Fractint Wish List.

  Modified the inside and outside prompts on the <x> screen.  They are now
  split into two separate prompts.  One for entering a color number and the
  other for changing the option.  The left and right arrow keys can now be
  used to change the inside and outside options.

  Fixed a bug that was causing a crash when mathtolerance= was used and
  fractal types ifs, ifs3d, or lsystem were selected.

  Increased the minimum stack requirement for passes=s (SOI) to eliminate
  crashes when the tab key was pressed.

Patch 15\
Added a prompt for the periodicity= option to the <y> Extended Options
  screen.

  Fixed another prompt problem with the stereogram prompt screen.
  Put back in the evolver grid size limit based on screen resolution.

  Fixed an evolver save problem when a zoom box was present just prior to
  the save.  Note that the center image cannot be recreated once the
  zoom box has been activated.  This is not a problem if you are working
  from a saved image, just restore it.

  Modified the routine that reports a view window that is too large so that
  along with the full screen being used, the X and Y dimensions on the <v>
  screen reflect the full screen dimensions.

  The <v> screen can now be used to set the resolution of disk video
  modes.  The limit is 32767x32767.  First select a disk video mode using
  <del>.  Then on the <v> screen enter both an X and a Y value.  If you go
  back to the <del> screen to see if the entry has been modified (it hasn't),
  you will get strange results if you don't select a video mode.

Patch 14\
Fixed the generation of random numbers used by the evolver subimages.
  Fixed the bug causing completed evolver images to regenerate when
  restored.

Patch 13\
Added parameters p4 and p5 to the formula parser.  Fixed the symmetry
  for cases where XAXIS_NOREAL and XAXIS_NOIMAG are used with the formula
  parser and multiple parameters are used.  Each parameter is now checked.

Patch 12\
Fixed a 3D error introduced with patch 11.  Fixed the stereogram screen
  prompts to prevent out of bounds array accesses.

Patch 11\
Fixed an off by one error in the Xfractint type=julia code.  Fixed the case
  where the second image would not finish generating when the 3D parameter
  Stereo=photo or stereo pair was used with an orbit type such as Lorenz.

Patch 10\
Fixed some user interface prompts that were wrong in Xfractint. Merged the
  Xfractint version system with Fractint's. Thanks to Scott Boyd for 
  these changes.

Patch 9\
Fixed a bug that occurred when maxhistory=0 was used.  Fixed a bug that
  occurred when ismand was used in a formula and ctrl <o> was pressed.

Patch 8\
Fixed a bug causing a lock up with lsystem and ifs fractal types when using
  a disk video mode with an X or Y resolution greater than 2048.

Patch 7\
Updated Xfractint, copyright notice.

Patch 6\
Fixed fractint.cfg problems with extra commas or long lines. This allows
  the output of makefcfg from certain video boards to be used without
  editing.

Added center, magxmag, and rotskew constants to parser. See 
  {=@PREDEFCENTERMAG Center-Mag Predefined Variables}

Patch 5\
Added new command truemode=iter, which is used to switch the ouput to the
  truecolor Targa file to the number of iterates for each pixel.

Made selecting the evolver feature turn off truecolor=yes.  Each subimage was
  being generated as a separate blank Targa file.

Patch 4\
Fixed the type=test bug.

Patch 3\
Fixed a bug in the pentium mandelbrot code that affected periodicity
  checking.  Fixed a problem with skewed zoom boxes leaving dots on the
  screen.  This also fixed browser boxes with the same problem.  Fixed
  the zoom box so it is visible in 2-color modes.

Patch 2\
Fixed a bug in the formula parser.

Patch 1\
Fixed the 2 and 16 color disk-video modes.  Using truecolor=yes now
  results in writing a fractxxx.tga file instead of iterates.tga.  This
  is not the same thing, so if somebody wants the output of the iterates.tga
  file, let us know.  Fixed the 3D targa modes.

~OnlineFF

For information on previous versions, see { Revision History }.
;
;
;
~Topic=Introduction
FRACTINT plots and manipulates images of "objects" -- actually, sets of
mathematical points -- that have fractal dimension.
See {"Fractals and the PC"} for some
historical and mathematical background on fractal geometry, a discipline
named and popularized by mathematician Benoit Mandelbrot. For now, these
sets of points have three important properties:

1) They are generated by relatively simple calculations repeated over and
over, feeding the results of each step back into the next -- something
computers can do very rapidly.

2) They are, quite literally, infinitely complex: they reveal more and
more detail without limit as you plot smaller and smaller areas. Fractint
lets you "zoom in" by positioning a small box and hitting <Enter> to
redraw the boxed area at full-screen size; its maximum linear
"magnification" is over a trillionfold.

3) They can be astonishingly beautiful, especially using PC color
displays' ability to assign colors to selected points, and (with VGA
displays or EGA in 640x350x16 mode) to "animate" the images by quickly
shifting those color assignments.
~OnlineFF

For a demonstration of some of Fractint's features, run the demonstration
file included with this release (DEMO.BAT) by typing "demo" at the DOS
prompt. You can stop the demonstration at any time by pressing <Esc>.

The name FRACTINT was chosen because the program generates many of its
images using INTeger math, rather than the floating point calculations
used by most such programs. That means that you don't need a math co-
processor chip (aka floating point unit or FPU), although for a few
fractal types where floating point math is faster, the program recognizes
and automatically uses an 80x87 chip if it's present. It's even faster on
systems using Intel's 80386 and 80486 microprocessors, where the integer
math can be executed in their native 32-bit mode.

Fractint works with many adapters and graphics modes from CGA to the
1024x768, 256-color XGA mode. Even "larger" images, up to 32767x32767x256,
can be plotted to expanded memory, extended memory, or disk: this bypasses
the screen and allows you to create images with higher resolution than
your current display can handle, and to run in "background" under multi-
tasking control programs such as DESQview and Windows 3.
~OnlineFF

Fractint is an experiment in collaboration. Many volunteers have joined
Bert Tyler, the program's first author, in improving successive versions.
Through electronic mail messages, CompuServe's GO GRAPHICS forums,
new versions are hacked out and debugged a little at a time.
Fractint was born fast, and none of us has seen any other fractal plotter
close to the present version for speed, versatility, and all-around
wonderfulness. (If you have, tell us so we can steal somebody else's ideas
instead of each other's.)
See {The Stone Soup Story} and {A Word About the Authors} for information
about the authors, and see {Contacting the Authors} for how to contribute
your own ideas and code.
;
;
;
~Topic=Conditions on Use

Fractint is freeware. The copyright is retained by the Stone Soup Group.

Fractint may be freely copied and distributed in unmodified form but may
not be sold. (A nominal distribution fee may be charged for media and
handling by freeware and shareware distributors.) Fractint may be used
personally or in a business - if you can do your job better by using
Fractint, or using images from it, that's great! It may not be given away
with commercial products without explicit permission from the Stone Soup
Group.

There is no warranty of Fractint's suitability for any purpose, nor any
acceptance of liability, express or implied.

 **********************************************************************\
 * Contribution policy: Don't want money. Got money. Want admiration. *\
 **********************************************************************
~OnlineFF

Source code for Fractint is also freely available - see
{Distribution of Fractint}.
See the FRACTSRC.DOC file included with the source for conditions on use.
(In most cases we just want credit.)
;
;
;
~Topic=Getting Started

To start the program, enter FRACTINT at the DOS prompt. The program
displays an initial "credits" screen. If Fractint doesn't start properly,
please see {Common Problems}.

Hitting <Enter> gets you from the initial screen to the main menu. You can
select options from the menu by moving the highlight with the cursor arrow
keys
~Doc-
(\24 \25 \27 \26)
~Doc+
and pressing <Enter>, or you can enter commands directly.

As soon as you select a video mode, Fractint begins drawing an image - the
"full" Mandelbrot set if you haven't selected another fractal type.

For a quick start, after starting Fractint try one of the following:\
  If you have MCGA, VGA, or better:  <F3>\
  If you have EGA:                   <F9>\
  If you have CGA:                   <F5>\
  Otherwise, monochrome:             <F6>

After the initial Mandelbrot image has been displayed, try zooming
into it (see {Zoom Box Commands}) and color cycling (see
{Color Cycling Commands}).
Once you're comfortable with these basics, start exploring other
functions from the main menu.

Help is available from the menu and at most other points in Fractint by
pressing the <F1> key.

AT ANY TIME, you can hit
~Doc-
one of the keys described in {Display Mode Commands}
~Doc+,Online-
a command key
~Online+
to select a function. You do not need to wait for a calculation
to finish, nor do you have to return to the main menu.

When entering commands, note that for the "typewriter" keys, upper and
lower case are equivalent, e.g. <B> and <b> have the same result.

Many commands and parameters can be passed to FRACTINT as command-line
arguments or read from a configuration file;
~Doc-
see {Startup Parameters\, Parameter Files} for details.
~Doc+,Online-
see "Command Line Parameters, Parameter Files, Batch Mode" for details.
~Online+
;
;
;
~Topic=Display Mode Commands
;
; This topic is online only

~Format-
   { Summary of Commands }
   { Plotting Commands}
   { Zoom Box Commands }
   { Image Save/Restore Commands }
   { Print Command }
   { Parameter Save/Restore Commands }
   { Interrupting and Resuming }
   { Orbits Window }
   { View Window }
   { \"3D\" Commands }
   { Video Mode Function Keys }
   { Browse Commands }
   { Evolver Commands }
   { RDS Commands }
   { Hints }
;
;
;
~Topic=Summary of Commands, Label=IDHELP_MAIN
; This topic is online only
~Doc-

Hit any of these keys at the menu or while drawing or viewing a fractal.
Commands marked with an '*' are also available at the credits screen.

~Format-
{Plotting Commands}
 * Delete,F2,F3,.. Select a Video Mode and draw (or redraw) current fractal
 * F1              HELP! (Enter help mode)
   Esc or m        Go to main menu
   h               Redraw previous screen (you can 'back out' recursively)
   Ctrl-H          Redraw next screen in history circular buffer
   Tab             Display information about the current fractal image
 * t               Select a new fractal type and parameters
 * x               Set a number of options and doodads
 * y               Set extended options and doodads
 * z               Set fractal type-specific parameters
   p               Set passes options
   c or + or -     Enter Color-Cycling Mode (see {=IDHELP_COLOR_CYCLING Color Cycling Commands})
   e               Enter Palette-Editing Mode (see {=IDHELP_PALETTE_EDITING Palette Editing Commands})
   Spacebar        Mandelbrot/Julia Set toggle.
   Enter           Continue an interrupted calculation (e.g. after a save)
 * f               toggle the floating-point algorithm option ON or OFF
 * i               Set parameters for 3D fractal types
 * Insert          Restart the program (at the credits screen)
   a               Convert the current image into a fractal 'starfield'
   Ctrl-A          Turn on screen-eating ant automaton
   Ctrl-S          Convert current image to a Random Dot Stereogram (RDS)
   o               toggles 'orbits' option on and off during image generation
 * d               Shell to DOS (type 'exit' at the DOS prompt to return)
   Ctrl-X          Flip the current image along the screen's X-axis
   Ctrl-Y          Flip the current image along the screen's Y-axis
   Ctrl-Z          Flip the current image along the screen's Origin

{Image Save/Restore Commands}
   s               Save the current screen image to disk
 * r               Restore a saved (or .GIF) image ('3' or 'o' for 3-D)

{Orbits Window}
   o               Turns on Orbits Window mode after image generation
   ctrl-o          Turns on Orbits Window mode

{View Window}
 * v               Set view window parameters (reduction, aspect ratio)

{Print Command}
   ctrl-p          Print the screen (command-line options set printer type)

{Parameter Save/Restore Commands}
   b               Save commands describing the current image in a file
                   (writes an entry to be used with @ command)
 * @ or 2          Run a set of commands (in command line format) from a file
   g               Give a startup parameter: {Summary of all Parameters}

{\"3D\" Commands}
 * 3               3D transform a saved (or .GIF) image
   # (shift-3)     same as 3, but overlay the current image

{Zoom Box Commands}
   PageUp          When no Zoom Box is active, bring one up
                   When active already, shrink it
   PageDown        Expand the Zoom Box
                   Expanding past the screen size cancels the Zoom Box
   \24 \25 \27 \26         Pan (Move) the Zoom Box
   Ctrl- \24 \25 \27 \26   Fast-Pan the Zoom Box (may require an enhanced keyboard)
   Enter           Redraw the Screen or area inside the Zoom Box
   Ctrl-Enter      'Zoom-out' - expands the image so that your current
                   image is positioned inside the current zoom-box location.
   Ctrl-Pad+/Pad-  Rotate the Zoom Box
   Ctrl-PgUp/PgDn  Change Zoom Box vertical size (change its aspect ratio)
   Ctrl-Home/End   Change Zoom Box shape
   Ctrl-Ins/Del    Change Zoom Box color

{Interrupting and Resuming}

{Video Mode Function Keys}

{Browse Commands}
  L(ook)                   Enter Browsing Mode

{Evolver Commands}
  Ctrl-E                   Bring up {=IDHELP_EVOLVER explorer/evolver} control screen
  Alt-1 ... Alt-7          Enter evolver mode with selected level of
                           mutation: Alt-1 = low level, Alt-7 = maximum.
                           (dont use the keypad, just the 'top row' numbers)
                           When in evolve mode then just plain 1..7 also work

{RDS Commands}
  Ctrl-S                   Access RDS parameter screen

~Doc+
;
;
;
~Topic=Plotting Commands
Function keys & various combinations are used to select a video mode and
redraw the screen.  For a quick start try one of the following:\
  If you have MCGA, VGA, or better:  <F3>\
  If you have EGA:                   <F9>\
  If you have CGA:                   <F5>\
  Otherwise, monochrome:             <F6>\

<F1>\
Display a help screen. The function keys available in help mode are
displayed at the bottom of the help screen.

<M> or <Esc>\
Return from a displayed image to the main menu.

<Esc>\
From the main menu, <Esc> is used to exit from Fractint.

<Delete>\
Same as choosing "select video mode" from the main menu.
Goes to the "select video mode" screen.  See {Video Mode Function Keys}.

<h>\
Redraw the previous image in the circular history buffer, revisiting fractals
you previously generated this session in reverse order. Fractint saves
the last ten images worth of information including fractal type, coordinates,
colors, and all options. Image information is saved only when some item
changes. After ten images the circular buffer wraps around and earlier
information is overwritten. You can set image capacity of the history feature
using the maxhistory=<nnn> command. About 1200 bytes of memory is required
for each image slot.

<Ctrl-h>\
Redraw the next image in the circular history buffer. Use this to return to
images you passed by when using <h>.

<Tab>\
Display the current fractal type, parameters, video mode, screen or (if
displayed) zoom-box coordinates, maximum iteration count, and other
information useful in keeping track of where you are.  The Tab function is
non-destructive - if you press it while in the midst of generating an
image, you will continue generating it when you return.  The Tab function
tells you if your image is still being generated or has finished - a handy
feature for those overnight, 1024x768 resolution fractal images.  If the
image is incomplete, it also tells you whether it can be interrupted and
resumed.  (Any function other than <Tab> and <F1> counts as an
"interrupt".)

The Tab screen also includes a pixel-counting function, which will count
the number of pixels colored in the inside color.  This gives an estimate
of the area of the fractal.  Note that the inside color must be different
from the outside color(s) for this to work; inside=0 is a good choice.

<T>\
Select a fractal type. Move the cursor to your choice (or type the first
few letters of its name) and hit <Enter>. Next you will be prompted for
any parameters used by the selected type - hit <Enter> for the defaults.
See {Fractal Types} for a list of supported types.

<F>\
Toggles the use of floating-point algorithms
(see {"Limitations of Integer Math (And How We Cope)"}).
Whether floating point is in
use is shown on the <Tab> status screen.  The floating point option can
also be turned on and off using the "X" options screen.
If you have a non-Intel floating point chip which supports the full 387
instruction set, see the "FPU=" command in {Startup Parameters}
to get the most out of your chip.

<X>\
Select a number of eXtended options. Brings up a full-screen menu of
options, any of which you can change at will.  These options are:\
  "passes=" - see {Drawing Method}\
  Floating point toggle - see <F> key description below\
  "maxiter=" - see {Image Calculation Parameters}\
  "inside=" and "outside=" - see {Color Parameters}\
  "savename=" filename - see {File Parameters}\
  "overwrite=" option - see {File Parameters}\
  "sound=" option - see {Sound Parameters}\
  "logmap=" - see {Logarithmic Palettes and Color Ranges}\
  "biomorph=" - see {Biomorphs}\
  "decomp=" - see {Decomposition}\
  "fillcolor=" - see {Drawing Method}\

<Y>\
More options which we couldn't fit under the <X> command:\
  "finattract=" - see {Finite Attractors}\
  "potential=" parameters - see {Continuous Potential}\
  "invert=" parameters - see {Inversion}\
  "distest=" parameters - see {Distance Estimator Method}\
  "cyclerange=" - see {Color Cycling Commands}\

<P>\
Options that apply to the Passes feature:\
  "periodicity=" - see {Periodicity Logic}\
  "orbitdelay=" - see {Passes Parameters}\
  "orbitinterval=" - see {Passes Parameters}\
  "screencoords=" - see {Passes Parameters}\
  "orbitdrawmode=" - see {Passes Parameters}\

<Z>\
Modify the parameters specific to the currently selected fractal type.
This command lets you modify the parameters which are requested when you
select a new fractal type with the <T> command, without having to repeat
that selection. You can enter "e" or "p" in column one of the input fields
to get the numbers e and pi (2.71828... and 3.14159...).\
From the fractal parameters screen, you can press <F6> to bring up a
sub parameter screen for the coordinates of the image's corners.
With selected fractal types, <Z> allows you to change the {Bailout Test}.
; With the IFS fractal type, <Z> brings up the IFS editor (see
; {=IDHELP_IFS Barnsley IFS Fractals}).

<+> or <->\
Switch to color-cycling mode and begin cycling the palette
by shifting each color to the next "contour."  See {Color Cycling Commands}.\

<C>\
Switch to color-cycling mode but do not start cycling.
The normally black "overscan" border of the screen changes to white.
See {Color Cycling Commands}.

<E>\
Enter Palette-Editing Mode.  See {Palette Editing Commands}.

<Spacebar>\
Toggle between Mandelbrot set images and their corresponding Julia-set
images. Read the notes in {=IDHELP_JULIA Fractal Types, Julia Sets}
before trying this option if you want to see anything interesting.

<J>\
Toggle between Julia escape time fractal and the Inverse Julia orbit
fractal. See {=IDHELP_INVERSE_JULIA Inverse Julias}

<Enter>\
Enter is used to resume calculation after a pause. It is only
necessary to do this when there is a message on the screen waiting to be
acknowledged, such as the message shown after you save an image to disk.

<I>\
Modify 3D transformation parameters used with 3D fractal types such as
"Lorenz3D" and 3D "IFS" definitions, including the selection of
{=IDHELP_3D_GLASSES "funny glasses"} red/blue 3D.

<A>\
Convert the current image into a fractal 'starfield'.  See {Starfields}.

<Ctrl-A>\
Unleash an image-eating ant automaton on current image. See {Ant Automaton}.

<Ctrl-S> (or <k>)\
Convert the current image into a Random Dot Stereogram (RDS).
See {Random Dot Stereograms (RDS)}.

<O> (the letter, not the number)\
If pressed while an image is being generated, toggles the display of
intermediate results -- the "orbits" Fractint uses as it calculates values
for each point. Slows the display a bit, but shows you how clever the
program is behind the scenes. (See "A Little Code" in
{"Fractals and the PC"}.)

<D>\
Shell to DOS. Return to Fractint by entering "exit" at a DOS prompt.

<Insert>\
Restart at the "credits" screen and reset most variables to their initial
state.  Variables which are not reset are: savename, lightname, video,
startup filename.

<L>\
Enter Browsing Mode.  See {Browse Commands}.

<Ctrl-E>\
Enter Explorer/Evolver Mode.  See {Evolver Commands}.
;
;
;
~Topic=Zoom Box Commands, Label=IDHELP_ZOOM

Zoom Box functions can be invoked while an image is being generated or when
it has been completely drawn.  Zooming is supported for most fractal types,
but not all.

The general approach to using the zoom box is:  Frame an area using
the keys described below,
then <Enter> to expand what's in the frame to fill the
whole screen (zoom in); or <Ctrl><Enter> to shrink the current image into
the framed area (zoom out). With a mouse, double-click the left button to
zoom in, double click the right button to zoom out.

<Page Up>, <Page Down>\
Use <Page Up> to initially bring up the zoom box. It starts at full screen
size. Subsequent use of these keys makes the zoom box smaller or larger.
Using <Page Down> to enlarge the zoom box when it is already at maximum
size removes the zoom box from the display. Moving the mouse away from you
or toward you while holding the left button down performs the same
functions as these keys.

Using the cursor "arrow" keys
~Doc-
(\24 \25 \27 \26)
~Doc+
or moving
the mouse without holding any buttons down, moves the zoom box.

Holding <Ctrl> while pressing cursor "arrow" keys moves the box 5 times
faster.  (This only works with enhanced keyboards.)

Panning: If you move a fullsize zoombox and don't change anything else
before performing the zoom, Fractint just moves what's already on the
screen and then fills in the new edges, to reduce drawing time. This
feature applies to most fractal types but not all.  A side effect is that
while an image is incomplete, a full size zoom box moves in steps larger
than one pixel.  Fractint keeps the box on multiple pixel boundaries, to
make panning possible.  As a multi-pass (e.g. solid guessing) image
approaches completion, the zoom box can move in smaller increments.

In addition to resizing the zoom box and moving it around, you can do some
rather warped things with it.  If you're a new Fractint user, we recommend
skipping the rest of the zoom box functions for now and coming back to
them when you're comfortable with the basic zoom box functions.

<Ctrl><Keypad->, <Ctrl><Keypad+>\
Holding <Ctrl> and pressing the numeric keypad's + or - keys rotates the
zoom box. Moving the mouse left or right while holding the right button
down performs the same function.

<Ctrl><Page Up>, <Ctrl><Page Down>\
These commands change the zoom box's "aspect ratio", stretching or
shrinking it vertically. Moving the mouse away from you or toward you
while holding both buttons (or the middle button on a 3-button mouse) down
performs the same function. There are no commands to directly stretch or
shrink the zoom box horizontally - the same effect can be achieved by
combining vertical stretching and resizing.

<Ctrl><Home>, <Ctrl><End>\
These commands "skew" the zoom box, moving the top and bottom edges in
opposite directions. Moving the mouse left or right while holding both
buttons (or the middle button on a 3-button mouse) down performs the same
function. There are no commands to directly skew the left and right edges
- the same effect can be achieved by using these functions combined with
rotation.

<Ctrl><Insert>, <Ctrl><Delete>\
These commands change the zoom box color. This is useful when you're
having trouble seeing the zoom box against the colors around it. Moving
the mouse away from you or toward you while holding the right button down
performs the same function.

You may find it difficult to figure out what combination of size, position
rotation, stretch, and skew to use to get a particular result.  (We do.)\
A good way to get a feel for all these functions is to play with the
Gingerbreadman fractal type. Gingerbreadman's shape makes it easy to
see what you're doing to him. A warning though: Gingerbreadman will run
forever, he's never quite done! So, pre-empt with your next zoom when he's
baked enough.

If you accidentally change your zoom box shape or rotate and
forget which way is up, just use <PageDown> to make it bigger until it
disappears, then <PageUp> to get a fresh one.  With a
mouse, after removing the old zoom box from the display release and
re-press the left button for a fresh one.

If your screen does not have a 4:3 "aspect ratio" (i.e. if the visible
display area on it is not 1.333 times as wide as it is high), rotating and
zooming will have some odd effects - angles will change, including the
zoom box's shape itself, circles (if you are so lucky as to see any with a
non-standard aspect ratio) become non-circular, and so on. The vast
majority of PC screens *do* have a 4:3 aspect ratio.

Zooming is not implemented for the plasma and diffusion fractal types, nor
for overlayed and 3D images. A few fractal types support zooming but
do not support rotation and skewing - nothing happens when you try it.
;
;
;
~Topic=Image Save/Restore Commands, Label=IDHELP_SAVE_RESTORE

<S> saves the current image to disk. All parameters required to recreate
the image are saved with it. Progress is marked by colored lines moving
down the screen's edges.

The default filename for the first image saved after starting Fractint is
FRACT001.GIF;  subsequent saves in the same session are automatically
incremented 002, 003... Use the "savename=" parameter or <X> options
screen to change the name. By default, files left over from previous
sessions are not overwritten - the first unused FRACTnnn name is used.
Use the "overwrite=yes" parameter or <X> options screen) to overwrite
existing files.

A save operation can be interrupted by pressing any key. If you interrupt,
you'll be asked whether to keep or discard the partial file.

<R> restores an image previously saved with <S>, or an ordinary GIF file.
After pressing <R> you are shown the file names in the current directory
which match the current file mask. To select a file to restore, move the
cursor to it (or type the first few letters of its name) and press
<Enter>.

Directories are shown in the file list with a \"\\\" at the end of the name.
When you select a directory, the contents of that directory are shown. Or,
you can type the name of a different directory (and optionally a different
drive) and press <Enter> for a new display. You can also type a mask such
as "*.XYZ" and press <Enter> to display files whose name ends with the
matching suffix (XYZ).

You can use <F6> to switch directories to the default fractint directory
or to your own directory which is specified through the DOS environment
variable "FRACTDIR".

Once you have selected a file to restore, a summary description of the
file is shown, with a video mode selection list. Usually you can just
press <Enter> to go past this screen and load the image. Other choices
available at this point are:\
  Cursor keys: select a different video mode\
  <Tab>: display more information about the fractal\
  <F1>: for help about the "err" column in displayed video modes\
If you restore a file into a video mode which does not have the same pixel
dimensions as the file, Fractint will make some adjustments:  The view
window parameters (see <V> command) will automatically be set to an
appropriate size, and if the image is larger than the screen dimensions,
it will be reduced by using only every Nth pixel during the restore.
;
;
;
~Topic=Print Command

<Ctrl><P>\

Print the current fractal image on your (Laserjet, Paintjet, Epson-
compatible, PostScript, or HP-GL) printer.

See {"Setting Defaults (SSTOOLS.INI File)"} and {"Printer Parameters"}
for how to let Fractint know about your printer setup.

{"Disk-Video" Modes} can be used to
generate images for printing at higher resolutions than your screen
supports.
;
;
;
~Topic=Parameter Save/Restore Commands, Label=IDHELP_PARAMETER_FILES

Parameter files can be used to save/restore all options and settings
required to recreate particular images.  The parameters required to
describe an image require very little disk space, especially compared with
saving the image itself.

<@> or <2>

The <@> or <2> command loads a set of parameters describing an image.
(Actually, it can also be used to set non-image parameters such as SOUND,
but at this point we're interested in images. Other uses of parameter
files are discussed in {"Parameter Files and the <@> Command"}.)

When you hit <@> or <2>, Fractint displays the names of the entries in the
currently selected parameter file.  The default parameter file,
FRACTINT.PAR, is included with the Fractint release and contains
parameters for some sample images.

After pressing <@> or <2>, highlight an entry and press <Enter> to load it,
or press <F6> to change to another parameter file.

Note that parameter file entries specify all calculation related
parameters, but do not specify things like the video mode - the image will
be plotted in your currently selected mode.

<B>

The <B> command saves the parameters required to describe the currently
displayed image, which can subsequently be used with the <@> or <2> command
to recreate it.

After you press <B>, Fractint prompts for:

  Parameter file:  The name of the file to store the parameters in.  You
  should use some name like "myimages" instead of fractint.par, so that
  your images are kept separate from the ones released with new versions
  of Fractint. You can use the PARMFILE= command in SSTOOLS.INI
  to set the default parameter file name to "myimages" or whatever.
  (See {"Setting Defaults (SSTOOLS.INI File)"} and "parmfile=" in
  {"File Parameters"}.)

  Name:  The name you want to assign to the entry, to be displayed when
  the <@> or <2> command is used.

  Main comment:  A comment to be shown beside the entry in the <@> command
  display.

  Second, Third, and Fourth comment:  Additional comments to store in the
  file with the entry. These comments go in the file only, and are not
  displayed by the <@> command. You can set these comments from the
  command line - see {=@COMMENTS Comment= Command}.

  Record colors?:  Whether color information should be included in the
  entry. Usually the default value displayed by Fractint is what you want.
  Allowed values are:\
  "no" - Don't record colors.\
  "@mapfilename" - When these parameters are used, load colors from the
     named color map file. This is the default if you are currently using
     colors from a color map file.\
  "yes" - Record the colors in detail. This is the default when you've
     changed the display colors by using the palette editor or by color
     cycling. The only reason that this isn't what Fractint always does
     for the <B> command is that color information can be bulky - up to
     nearly 3K of disk space per map - which adds up to a lot for many
     images. Smooth-shaded ranges of colors are compressed, so if that's 
     used a lot in an image the color information won't be as bulky.\
  "only" - Record only the colors in the PAR file, without any other
     parameters. This is useful for converting color maps to PAR entries.

  # of colors:  This only matters if "Record colors?" is set to "yes".  It
  specifies the number of colors to record. Recording less colors will
  take less space. Usually the default value displayed by Fractint is what
  you want. You might want to increase it in some cases, e.g. if you are
  using a 256 color mode with maxiter 150, and have used the palette
  editor to set all 256 possible colors for use with color cycling, then
  you'll want to set the "# of colors" to 256.

  See the {=@RECORDCOLORS Recordcolors} command, which controls when mapfiles
  are used and when compressed colors are written to PAR files.

  maxlinelength: This number controls the maximum width of a parameter
  entry in a PAR file. The default is 72 characters.

  At the bottom of the input screen are inputs for Fractint's "pieces"
  divide-and-conquer feature. You can create multiple PAR entries that
  break an image up into pieces so that you can generate the image pieces
  one by one. There are two reasons for doing this. The first is in case the
  fractal is very slow, and you want to generate parts of the image at the
  same time on several computers. The second is that you might want to make
  an image greater than 2048 x 2048, the old pixel limit for Fractint. The 
  parameters for this feature are:
     X Multiples - How many divisions of final image in the x direction\
     Y Multiples - How many divisions of final image in the y direction\
     Video mode  - Fractint video mode for each piece (e.g. "F3")\

  The last item defaults to the current video mode. If either X Multiples or
  Y Multiples are greater than 1, then multiple numbered PAR entries for the
  pieces are added to the PAR file, and a MAKEMIG.BAT file is created that
  builds all of the component pieces and then stitches them together into
  a "multi-image" GIF.  The current limitations of the "divide and conquer"
  algorithm are 36 or fewer X and Y multiples (so you are limited to "only"
  36x36=1296 component images), and a final resolution limit in both the
  X and Y directions of 65,535 (a limitation of "only" four billion pixels
  or so).

  The final image generated by MAKEMIG is a "multi-image" GIF file called
  FRACTMIG.GIF.  In case you have other software that can't handle
  multi-image GIF files, MAKEMIG includes a final (but commented out) call
  to SIMPLGIF, a companion program that reads a GIF file that may contain
  little tricks like multiple images and creates a simple GIF from it.
  Fair warning: SIMPLGIF needs room to build a composite image while it
  works, and it does that using a temporary disk file equal to the size
  of the final image - and a 64Kx64K GIF image requires a 4GB temporary
  disk file!

<G>

The <G> command lets you give a startup parameter interactively.
;
;
;
~Topic=<X> Options Screen, Label=IDHELP_TOGGLES
; This topic is online context-sensitive only.

   Passes - see {Drawing Method}\
   Fillcolor - see {Drawing Method}\
   Floating Point Algorithm - see notes below\
   Maximum Iterations - see {Image Calculation Parameters}\
   Inside and Outside colors - see {Color Parameters}\
   Savename and File Overwrite - see {File Parameters}\
   Sound option - see {Sound Parameters}\
   Log Palette - see {Logarithmic Palettes and Color Ranges}\
   Biomorph Color - see {Biomorphs}\
   Decomp Option - see {Decomposition}\

You can toggle the use of floating-point algorithms on this screen (see
{"Limitations of Integer Math (And How We Cope)"}).  Whether floating
point is in use is shown on the <Tab> status screen.  If you have a
non-Intel floating point chip which supports the full 387 instruction set,
see the "FPU=" command in {Startup Parameters} to get the most out of your
chip.
;
;
~Topic=<Y> Options Screen, Label=IDHELP_TOGGLES2
; This topic is online context-sensitive only.

   Finite attractor - see{ Finite Attractors }\

   Potential parameters - see{ Continuous Potential }\

   Distance Estimator parameters - see{ Distance Estimator Method }\

   Inversion parameters - see{ Inversion }\

   Color cycling range - see{ Color Cycling Commands }\
;
;
~Topic=<P> Options Screen, Label=IDHELP_PASSES_OPTIONS
; This topic is online context-sensitive only.

   Periodicity - see{ Passes Parameters }\

   Orbit Delay - see{ Passes Parameters }\

   Orbit Interval - see{ Passes Parameters }\

   Maintain Screen Coordinates - see{ Passes Parameters }\

   Orbit Draw Mode - see{ Passes Parameters }\
;
;
~Topic=Image Coordinates Screen, Label=IDHELP_IMAGE_COORDINATES
; This topic is online context-sensitive only.

You can directly enter corner coordinates on this screen instead of
using the zoom box to move around.  You can also use <F4> to reset
the coordinates to the defaults for the current fractal type.

There are two formats for the display: corners or center-mag.  You can
toggle between the two by using <F7>.

In corners mode, corner coordinate values are entered directly.  Usually
only the top-left and bottom-right corners need be specified - the
bottom left corner can be entered as zeros to default to an ordinary
unrotated rectangular area.  For rotated or skewed images, the bottom
left corner must also be specified.

In center-mag mode the image area is described by entering the coordinates
for the center of the rectangle, and its magnification factor.  Usually
only these three values are needed, but the user can also specify the amount
that the image is stretched, rotated and skewed.
;
;
~Topic=Screen Coordinates Screen, Label=IDHELP_SCREEN_COORDINATES
; This topic is online context-sensitive only.

You can directly enter corner coordinates on this screen for use with the
passes='o' option.  You can also use <F4> to reset the coordinates to the
defaults for the current fractal type.

There are two formats for the display: corners or center-mag.  You can
toggle between the two by using <F7>.

In corners mode, corner coordinate values are entered directly.  Usually
only the top-left and bottom-right corners need be specified - the
bottom left corner can be entered as zeros to default to an ordinary
unrotated rectangular area.  For rotated or skewed images, the bottom
left corner must also be specified.

In center-mag mode the screen area is described by entering the coordinates
for the center of the rectangle, and its magnification factor.  Usually
only these three values are needed, but the user can also specify the amount
that the image is stretched, rotated and skewed.
;
;
;
~Topic=Interrupting and Resuming

Fractint command keys can be loosely grouped as:

 o Keys which suspend calculation of the current image (if one is being
   calculated) and automatically resume after the function.  <Tab>
   (display status information) and <F1> (display help), are the only
   keys in this group.

 o Keys which automatically trigger calculation of a new image.
   Examples:  selecting a video mode (e.g. <F3>);  selecting a fractal
   type using <T>;  using the <X> screen to change an option such as
   maximum iterations.

 o Keys which do something, then wait for you to indicate what to do
   next.  Examples:  <M> to go to main menu;  <C> to enter color cycling
   mode;  <PageUp> to bring up a zoom box.  After using a command in this
   group, calculation automatically resumes when you return from the
   function (e.g. <Esc> from color cycling, <PageDn> to clear zoom box).
   There are a few fractal types which cannot resume calculation, they
   are noted below.  Note that after saving an image with <S>, you must
   press <Enter> to clear the "saved" message from the screen and resume.

An image which is <S>aved before it completes can later be <R>estored and
continued. The calculation is automatically resumed when you restore such
an image.

When a slow fractal type resumes after an interruption in the third
category above, there may be a lag while nothing visible happens.  This is
because most cases of resume restart at the beginning of a screen line.
If unsure, you can check whether calculation has resumed with the <Tab>
key.

The following fractal types cannot (currently) be resumed: plasma, 3d
transformations, julibrot, and 3d orbital types like lorenz3d.  To check
whether resuming an image is possible, use the <Tab> key while it is
calculating.  It is resumable unless there is a note under the fractal
type saying it is not.

The {Batch Mode} section discusses how to resume in batch mode.

To <R>estore and resume a "formula", "lsystem", or "ifs" type fractal your
"formulafile", "lfile", or "ifsfile" must contain the required name.
;
;
;
~Topic=Orbits Window, Label=IDHELP_ORBITS
The <O> key turns on the Orbit mode.  In this mode a cursor appears
over the fractal. A window appears showing the orbit used in the
calculation of the color at the point where the cursor is. Move the
cursor around the fractal using the arrow keys or the mouse and watch
the orbits change. Try entering the Orbits mode with View Windows (<V>)
turned on. The following keys take effect in Orbits mode.\
<c>         Circle toggle - makes little circles with radii inversely\
            proportional to the iteration. Press <c> again to toggle\
            back to point-by-point display of orbits.\
<l>         Line toggle - connects orbits with lines (can use with <c>)\
<n>         Numbers toggle - shows complex coordinates & color number of\
            the cursor on the screen. Press <n> again to turn off numbers.\
<p>         Enter pixel coordinates directly\
<h>         Hide fractal toggle. Works only if View Windows is turned on\
            and set for a small window (such as the default size.) Hides the\
            fractal, allowing the orbit to take up the whole screen. Press\
            <h> again to uncover the fractal.\
<s>         Saves the fractal, cursor, orbits, and numbers as they\
            appear on the screen.\
<<> or <,>  Zoom orbits image smaller\
<>> or <.>  Zoom orbits image larger\
<z>         Restore default zoom.\
;
;
;
~Topic=View Window, Label=IDHELP_VIEW_WINDOW

The <V> command is used to set the view window parameters described below.
These parameters can be used to:\
 o Define a small window on the screen which is to contain the generated
   images. Using a small window speeds up calculation time (there are
   fewer pixels to generate). You can use a small window to explore
   quickly, then turn the view window off to recalculate the image at
   full screen size.
 o Generate an image with a different "aspect ratio"; e.g. in a square
   window or in a tall skinny rectangle.
 o View saved GIF images which have pixel dimensions different from any
   mode supported by your hardware. This use of view windows occurs
   automatically when you restore such an image.
 o Define a disk video mode up to 32767x32767.  First select a disk video
   mode using <del>.  Then on the <v> screen enter both an X and a Y value
   at the Virtual Screen Total Pixels prompts.
 o Define a virtual video mode up to the size that fits in video memory.
   First select a VESA video mode (dotmode=28) using <del>.  Then on the
   <v> screen enter both an X and a Y value at the Virtual Screen Total
   Pixels prompts.  The Keep Aspect prompt is used if the asked for virtual
   screen is larger than video memory.  If set, the X and Y values will both
   be reduced such that the ratio between them is maintained.  If not set,
   just the Y value will be reduced.

"Preview display"\
Set this to "yes" to turn on view window, "no" for full screen display.
While this is "no", the only view parameter which has any affect is "final
media aspect ratio". When a view window is being used, all other Fractint
functions continue to operate normally - you can zoom, color-cycle, and
all the rest.

"Reduction factor"\
When an explicit size is not given, this determines the view window size,
as a factor of the screen size.  E.g. a reduction factor of 2 makes the
window 1/2 as big as the screen in both dimensions.

"Final media aspect ratio"\
This is the height of the final image you want, divided by the width. The
default is 0.75 because standard PC monitors have a height:width ratio of
3:4. E.g. set this to 2.0 for an image twice as high as it is wide. The
effect of this parameter is visible only when "preview display" is
enabled.  If the explicit size of both x and y are set, setting this value
to 0 will cause the appropriate value to be calculated based on x and y.

"Crop starting coordinates"\
This parameter affects what happens when you change the aspect ratio. If
set to "no", then when you change aspect ratio, the prior image will be
squeezed or stretched to fit into the new shape. If set to "yes", the
prior image is "cropped" to avoid squeezing or stretching.

"Explicit size"\
Setting these to non-zero values over-rides the "reduction factor" with
explicit sizes in pixels. If only the "x pixels" size is specified, the "y
pixels" size is calculated automatically based on x and the aspect ratio.

The following option is available when using disk video or virtual screen
modes:

"Virtual screen"\
Setting these allow defining a virtual screen as large as the available
video memory will permit.

The following options are available when using virtual screen modes:

"Keep aspect"\
If this is set, when the asked for virtual screen is larger than video
memory the X and Y values will both be reduced such that the ratio between
them is maintained.  If not set, just the Y value will be reduced.

"Zoombox scrolling"\
The fixed setting tries to maintain the zoombox in the center of the
screen by moving the virtual image.  The relaxed setting moves the virtual
image when the zoombox reached the edges of the screen.

More about final aspect ratio:  If you want to produce a high quality
hard-copy image which is say 8" high by 5" down, based on a vertical
"slice" of an existing image, you could use a procedure like the
following. You'll need some method of converting a GIF image to your final
media (slide or whatever) - Fractint can only do the whole job with a
PostScript printer, it does not preserve aspect ratio with other printers.
 o restore the existing image\
 o set view parameters: preview to yes, reduction to anything (say 2),
   aspect ratio to 1.6, and crop to yes
 o zoom, rotate, whatever, till you get the desired final image\
 o set preview display back to no\
 o trigger final calculation in some high res disk video mode, using the
   appropriate video mode function key
 o print directly to a PostScript printer, or save the result as a GIF
   file and use external utilities to convert to hard copy.
;
;
;
~Topic=\"3D\" Commands

See {\"3D\" Images} for details of these commands.

<3>\
Restore a saved image as a 3D "landscape", translating its color
information into "height". You will be prompted for all KINDS of options.

<#>\
Restore in 3D and overlay the result on the current screen.
;
;
;
~Topic=Video Mode Function Keys, Label=IDHELP_VIDEO_MODE

Fractint supports *so* many video modes that we've given up trying to
reserve a keyboard combination for each of them.

Any supported video mode can be selected by going to the "Select Video Mode"
screen (from main menu or by using <Delete>), then using the cursor up and down
arrow keys and/or <PageUp> and <PageDown> keys to highlight the desired mode,
then pressing <Enter>.

Up to 39 modes can be assigned to the keys F2-F10, SF1-SF10 <Shift>+<Fn>),
CF1-CF10 (<Ctrl>+<Fn>), and AF1-AF10 (<Alt>+<Fn>).  The modes assigned to
function keys can be invoked directly by pressing the assigned key, without
going to the video mode selection screen.

30 key combinations can be reassigned:  <F1> to <F10> combined with any of
<Shift>, <Ctrl>, or <Alt>.
The video modes assigned to <F2> through <F10> can not be
changed - these are assigned to the most common video modes, which might
be used in demonstration files or batches.

To reassign a function key to a mode you often use, go to the "select
video mode" screen, highlight the video
mode, press the keypad (gray) <+> key, then press the desired
function key or key combination.  The new key assignment will be remembered
for future runs.

To unassign a key (so that it doesn't invoke any video
mode), highlight the mode currently selected by the key and press the
keypad (gray) <-> key.

A note about the "select video modes" screen:
the video modes which are displayed with a 'B' suffix in the number
of colors are modes which have no custom programming - they use the BIOS
and are S-L-O-W ones.

See {"Video Adapter Notes"} for comments about particular adapters.

See {"Disk-Video" Modes} for a description of these non-display modes.

See {"Customized Video Modes\, FRACTINT.CFG"} for information about
adding your own video modes.
;
;
;
~Topic=Browse Commands, Label=IDHELP_BROWSE

The following keystrokes function while browsing an image:\

<ARROW KEYS>     Step through the outlines on the screen.\
<ENTER>          Selects the image to display.\
<\\>,<h>          Recalls the last image selected.\
<D>              Deletes the selected file.\
<R>              Renames the selected file.\
<s>              Saves the current image with the browser boxes\
                 displayed.\
<ESC>,<l>        Toggles the browse mode off.\
<Ctrl-b>         Brings up the {Browser Parameters} screen.\
<Ctrl-Ins/Del>   Change the browser boxes color.\

This is a "visual directory", here is how it works...\
When 'L' or 'l' is pressed from a fractal display the current directory is
searched for any saved files that are deeper zooms of the current image and
their position shown on screen by a box (or crosshairs if the box would be
too small). See also {Browser Parameters} for more on how this is done.

One outline flashes, the selected outline can be changed by using the
cursor keys.  At the moment the outlines are selected in the order that
they appear in your directory, so don't worry if the flashing window jumps
all over the place!

When enter is pressed, the selected image is loaded. In this mode a stack
of the last sixteen selected filenames is maintained and the '\\' or 'h' key
pops and loads the last image you were looking at.  Using this it is
possible to set up sequences of images that allow easy exploration of your
favorite fractal without having to wait for recalc once the level of zoom
gets too high, great for demos! (also useful for keeping track of just
exactly where fract532.gif came from :-) )

You can also use this facility to tidy up your disk: by typing UPPER CASE 'D'
when a file is selected the browser will delete the file for you, after
making sure that you really mean it, you must reply to the "are you sure"
prompts with an UPPER CASE 'Y' and nothing else, otherwise the command is
ignored. Just to make absolutely sure you don't accidentally wipe out the
fruits of many hours of cpu time the default setting is to have the browser
prompt you twice, you can disable the second prompt within the parameters
screen, however, if you're feeling overconfident :-).

To complement the Delete function there is a rename function, use the UPPER
CASE 'R' key for this. You need to enter the FULL new file name, no .GIF is
implied.

It is possible to save the current image along with all of the displayed
boxes indicating subimages by pressing the 's' key.  This exits the browse
mode to save the image and the boxes become a permanent part of the image.
Currently, the screen image ends up with stray dots colored after it is
saved.

Esc backs out of image selecting mode.\

The browser can now use expanded memory or extended memory.  If you have
more than 4 MB of expanded/extended memory available, you can use either.
If you don't have 4 MB of expanded/extended memory available, use expanded
memory as it will allocate as much as possible.  The extended memory support
will silently fail and default to the use of far memory if 4 MB of extended
memory is not available.

Here's a tip on how to zoom out beyond your starting point when browsing:
Suppose you restore a fractal deeply-zoomed down in a directory of
related zoomed images, and then bring up the browser.  How do you zoom
out? You can't use "\\" because you started with the zoomed image, and
there is no browser command to detect the next outer image. What you
can do is exit the browser, press PgUp until the zoom box won't get any
smaller, zoom out with Ctrl-Enter, and before any image starts to
develop, call up the browser again, locate your zoomed image that you
started with, and see if there is another image that contains it - if
so, restore it with the browser.  You can also use a view window <v> to load
the first image, and then use the browser.

POSSIBLE ERRORS:

"Sorry..I can't find anything"\
The browser can't locate any files which match the file name mask.
See {Browser Parameters}  This is also displayed if you have less than
10K of far memory free when you run Fractint.

"Sorry....  no more space"\
At the moment the browser can only cope with 450 sub images at one time.
Any subsequent images are ignored.  Make sure that the minimum image size
isn't set too small on the parameters screen.

~OnlineFF
"Sorry .... out of memory"\
The browser has run out of far, expanded, or extended memory in which to
store the pixels covered by the sub image boxes.  Try again with the main
image at lower resolution, and/or reduce the number of TSRs resident in
memory when you start Fractint.  Make sure you have expanded or extended
memory available.

"Sorry...it's a read only file, can't del <filename>"\
"Sorry....can't rename"\
The file which you were trying to delete or rename has the read only
attribute set, you'll need to reset this with your operating system before
you can get rid of it.
;
;
;
~Topic=Browser Parameters, Label=IDHELP_BROWSER_PARAMETERS

This Screen enables you to control Fractint's built in file browsing utility.
If you don't know what that is see {Browse Commands}.  This screen is
selected with <Ctrl-B> from just about anywhere.

"Autobrowsing"\
Select yes if you want the loaded image to be scanned for sub images
immediately without pressing 'L' every time.

"Ask about GIF video mode"\
Allows turning on and off the display of the video mode table when loading
GIFs.  This has the same effect as the askvideo= command.

"Type/Parm check"\
Select whether the browser tests for fractal type or parms when deciding
whether a file is a sub image of the current screen or not. DISABLE WITH
CAUTION! or things could get confusing. These tests can be switched off
to allow such situations as wishing to display old images that were
generated using a formula type which is now implemented as a built in
fractal type.
~OnlineFF
"Confirm deletes"\
Set this to No if you get fed up with the double prompting that the browser
gives when deleting a file.  It won't get rid of the first prompt however.

"Smallest window"\
This parameter determines how small the image would have to be onscreen
before the browser decides not to include it in the selection of files.  The size
is entered in decimal pixels so, for instance, this could be set to 0.2 to
allow images that are up to around three maximum zooms away (depending on
the current video resolution) to be loaded instantly.  Set this to 0 to
enable all sub images to be detected.  This can lead to a very cluttered
screen!  The primary use is in conjunction with the search file mask (see
below) to allow location of high magnification images within an overall
view (like the whole Mset).

"Smallest box"\
This determines when the image location is shown as crosshairs rather than
a rather small box.  Set this according to how good your eyesight is
(probably worse than before you started staring at fractals all the time :-))
or the resolution of your screen.  WARNING the crosshairs routine centers
the cursor on one corner of the image box at the moment so this looks
misleading if set too large.
~OnlineFF
"Search Mask"\
Sets the file name pattern which the browser searches, this can be used
to search out the location of a file by setting this to the filename and
setting smallest image to 0 (see above).
;
;
;
~Topic=RDS Commands, Label=IDHELP_RANDOM_DOT_STEREOGRAM_COMMANDS
The following keystrokes function while viewing an RDS image:\

<Enter> or <Space>   -- Toggle calibration bars on and off.\
<Ctrl-s> or <k>      -- Return to RDS Parameters Screen.\
<s>                  -- Save RDS image, then restore original.\
<c>, <+>, <->        -- Color cycle RDS image.\
Other keys           -- Exit RDS mode, restore original image, and pass\
                        keystroke on to main menu.\

For more about RDS, see {Random Dot Stereograms (RDS)}
;
;
;

~Topic=Hints

Remember, you do NOT have to wait for the program to finish a full screen
display before entering a command. If you see an interesting spot you want
to zoom in on while the screen is half-done, don't wait -- do it! If you
think after seeing the first few lines that another video mode would look
better, go ahead -- Fractint will shift modes and start the redraw at
once. When it finishes a display, it beeps and waits for your next
command.

In general, the most interesting areas are the "border" areas where the
colors are changing rapidly. Zoom in on them for the best results. The
first Mandelbrot-set (default) fractal image has a large, solid-colored
interior that is the slowest to display; there's nothing to be seen by
zooming there.

Plotting time is directly proportional to the number of pixels in a
screen, and hence increases with the resolution of the video mode.
You may want to start in a low-resolution mode for quick progress while
zooming in, and switch to a higher-resolution mode when things get
interesting. Or use the solid guessing mode and pre-empt with
a zoom before it finishes. Plotting time also varies with the maximum
iteration setting, the fractal type, and your choice of drawing mode.
Solid-guessing (the default) is fastest, but it can be wrong:
perfectionists will want to use dual-pass mode (its first-pass preview is
handy if you might zoom pre-emptively) or single-pass mode.

When you start systematically exploring, you can save time (and hey, every
little bit helps -- these "objects" are INFINITE, remember!) by <S>aving
your last screen in a session to a file, and then going straight to it the
next time by using the command FRACTINT FRACTxxx (the .GIF extension is
assumed), or by starting Fractint normally and then using the <R> command
to reload the saved file. Or you could hit <B> to create a parameter file
entry with the "recipe" for a given image, and next time use the <@>
command to re-plot it.
;
;
;
~Topic=Fractint on Unix

Fractint has been ported to Unix to run under X Windows.  This version is
called "Xfractint".  Xfractint may be obtained by anonymous ftp,
see {Distribution of Fractint}.

Xfractint is still under development and is not as reliable as the IBM PC
version.

Contact xfractint@fractint.org for more information on Xfractint.
~FF
Xfractint is a straight port of the IBM PC version.  Thus, it uses the
IBM user interface.  If you do not have function keys, or Xfractint does
not accept them from your keyboard, use the following key mappings:

     IBM             Unix\
     F1 to F10       Shift-1 to Shift-0\
     INSERT          I\
     DELETE          D\
     PAGE_UP         U\
     PAGE_DOWN       N\
     LEFT_ARROW      H\
     RIGHT_ARROW     L\
     UP_ARROW        K\
     DOWN_ARROW      J\
     HOME            O\
     END             E\
     CTL_PLUS        \}\
     CTL_MINUS       \{

Xfractint takes the following options:

-onroot\
Puts the image on the root window.

-fast\
Uses a faster drawing technique.

-disk\
Uses disk video.

-geometry WxH[\{+-X}\{+-Y}]\
Changes the geometry of the image window.

-display displayname\
Specifies the X11 display to use.

-private\
Allocates the entire colormap (i.e. more colors).

-share\
Shares the current colormap.

-fixcolors n\
Uses only n colors.

-slowdisplay\
Prevents Xfractint from hanging on the title page with slow displays.

-simple\
Uses simpler keyboard handling, which makes debugging easier.

Common problems:

If you get the message "Couldn't find id.hlp", you can\
a) Do "setenv FRACTDIR /foo", replacing /foo with the directory containing
id.hlp.\
b) Run Xfractint from the directory containing id.hlp, or\
c) Copy id.hlp to /usr/local/bin/X11/fractint

If you get the message "Invalid help signature", the problem is due to
byteorder.  You are probably using a Sun help file on a Dec machine or
vice versa.

If Xfractint doesn't accept input, try typing into both the graphics window
and the text window.  On some systems, only one of these works.

If you are using Openwindows and can't get Xfractint to accept input, add
to your .Xdefaults file:\
OpenWindows.FocusLenience:      True

If you cannot view the GIFs that Xfractint creates, the problem is that
Xfractint creates GIF89a format and your viewer probably only handles
GIF87a format.  Run "xfractint gif87a=y" to produce GIF87a format.

Because many shifted characters are used to simulate IBM keys, you can't
enter capitalized filenames.
;
;
;
~Topic=Color Cycling Commands, Label=@ColorCycling

~Doc-
See {=IDHELP_COLOR_CYCLING Color Cycling Command Summary} for a summary of commands.

~Doc+
Color-cycling mode is entered with the 'c', '+', or '-' keys from an image,
or with the 'c' key from Palette-Editing mode.

The color-cycling commands are available ONLY for VGA adapters and EGA
adapters in 640x350x16 mode.  You can also enter color-cycling while
using a disk-video mode, to load or save a palette - other functions are
not supported in disk-video.

Note that the colors available on an EGA adapter (16 colors at a
time out of a palette of 64) are limited compared to those of VGA, super-
VGA, and MCGA (16 or 256 colors at a time out of a palette of 262,144). So
color-cycling in general looks a LOT better in the latter modes. Also,
because of the EGA palette restrictions, some commands are not available
with EGA adapters.

Color cycling applies to the color numbers selected by the "cyclerange="
command line parameter (also changeable via the <Y> options screen and via
the palette editor).  By default, color numbers 1 to 255 inclusive are
cycled.  On some images you might want to set "inside=0" (<X> options or
command line parameter) to exclude the "lake" from color cycling.

When you are in color-cycling mode, you will either see the screen colors
cycling, or will see a white "overscan" border when paused, as a reminder
that you are still in this mode.  The keyboard commands available once
you've entered color-cycling. are described below.

<F1>\
Bring up a HELP screen with commands specific to color cycling mode.

<Esc>\
Leave color-cycling mode.

<Home>\
Restore original palette.

<+> or <->\
Begin cycling the palette by shifting each color to the next "contour."
<+> cycles the colors in one direction, <-> in the other.

'<' or '>'\
Force a color-cycling pause, disable random colorizing, and single-step
through a one color-cycle.  For "fine-tuning" your image colors.

Cursor up/down\
Increase/decrease the cycling speed. High speeds may cause a harmless
flicker at the top of the screen.

<F2> through <F10>\
Switches from simple rotation to color selection using randomly generated
color bands of short (F2) to long (F10) duration.

<1> through <9>\
Causes the screen to be updated every 'n' color cycles (the default is 1).
Handy for slower computers.

<Enter>\
Randomly selects a function key (F2 through F10) and then updates ALL the
screen colors prior to displaying them for instant, random colors.  Hit
this over and over again (we do).

<Spacebar>\
Pause cycling with white overscan area. Cycling restarts with any command
key (including another spacebar).

<Shift><F1>-<F10>\
Pause cycling and reset the palette to a preset two color "straight"
assignment, such as a spread from black to white. (Not for EGA)

<Ctrl><F1>-<F10>\
Pause & set a 2-color cyclical assignment, e.g. red->yellow->red (not EGA).

<Alt><F1>-<F10>\
Pause & set a 3-color cyclical assignment, e.g. green->white->blue (not EGA).

<R>, <G>, <B>\
Pause and increase the red, green, or blue component of all colors by a
small amount (not for EGA). Note the case distinction of this vs:

<r>, <g>, <b>\
Pause and decrease the red, green, or blue component of all colors by a
small amount (not for EGA).

<D> or <A>\
Pause and load an external color map from the files DEFAULT.MAP or
ALTERN.MAP, supplied with the program.

<L>\
Pause and load an external color map (.MAP file).  Several .MAP files are
supplied with Fractint.  See {Palette Maps}.

<S>\
Pause, prompt for a filename, and save the current palette to the named
file (.MAP assumed).  See {Palette Maps}.
;
;
;
~Topic=Color Cycling Command Summary, Label=IDHELP_COLOR_CYCLING
; This topic is online only

~Format-
  See {Color Cycling Commands} for full documentation.

  F1               HELP! (Enter help mode and display this screen)
  Esc              Exit from color-cycling mode
  + or -           (re)-set the direction of the color-cycling
  Home             Restore original palette
~Doc-
  \27 \26              (re)-set the direction of the color-cycling (just like +/-)
  \24 \25              SpeedUp/SlowDown the color cycling process
~Doc+,Online-
  Right/Left Arrow (re)-set the direction of the color-cycling (just like +/-)
  Up/Down Arrow    SpeedUp/SlowDown the color cycling process
~Online+
  F2 thru F10      Select Short--Medium--Long (randomly-generated) color bands
  1  thru 9        Cycle through 'nn' colors between screen updates (default=1)
  Enter            Randomly (re)-select all new colors  [TRY THIS ONE!]
  Spacebar         Pause until another key is hit
  < or >           Pause and single-step through one color-cycle
* SF1 thru AF10    Pause and reset the Palette to one of 30 fixed sequences
  d or a           pause and load the palette from DEFAULT.MAP or ALTERN.MAP
  l                load palette from a map file
  s                save palette to a map file
* r or g or b or   force a pause and Lower (lower case) or Raise (upper case)
* R or G or B      the Red, Green, or Blue component of the fractal image
;
;
;
~Topic=Palette Editing Commands

~Doc-
See {=IDHELP_PALETTE_EDITING Palette Editing Command Summary} for a summary of commands.

~Doc+
Palette-editing mode provides a number of tools for modifying the colors
in an image.  It can be used only with MCGA or higher adapters, and only
with 16 or 256 color video modes.
Many thanks to Ethan Nagel for creating the palette editor.

Use the <E> key to enter palette-editing mode from a displayed image or
from the main menu.

When this mode is entered, an empty palette frame is displayed. You can
use the cursor keys to position the frame outline, and <Pageup> and
<Pagedn> to change its size.  (The upper and lower limits on the size
depend on the current video mode.)  When the frame is positioned where you
want it, hit Enter to display the current palette in the frame.

Note that the palette frame shows R(ed) G(reen) and B(lue) values for two
color registers at the top.  The active color register has a solid frame,
the inactive register's frame is dotted.  Within the active register, the
active color component is framed.

With a video mode of 640x400 or higher, a status area appears between the
two color registers.  This status area shows:

  nnn  = color number at the cursor location\
  A    = Auto mode\
  X, Y = exclusion modes\
  F    = freesyle mode\
  T    = stripe mode is waiting for #\

Using the commands described below, you can assign particular colors to
the registers and manipulate them.  Note that at any given time there are
two colors "X"d - these are pre-empted by the editor to display the
palette frame. They can be edited but the results won't be visible. You
can change which two colors are borrowed ("X"d out) by using the <v>
command.

Once the palette frame is displayed and filled in, the following commands
are available:

<F1>\
Bring up a HELP screen with commands specific to palette-editing mode.

<Esc>\
Leave palette-editing mode

<H>\
Hide the palette frame to see full image; the cross-hair remains visible
and all functions remain enabled; hit <H> again to restore the palette
display.

Cursor keys\
Move the cross-hair cursor around. In 'auto' mode (the default) the color
under the center of the cross-hair is automatically assigned to the active
color register. Control-Cursor keys move the cross-hair faster. A mouse
can also be used to move around.

<R> <G> <B>\
Select the Red, Green, or Blue component of the active color register for
subsequent commands

<Insert> <Delete>\
Select previous or next color component in active register

~onlineFF
<+> <->\
Increase or decrease the active color component value by 1  Numeric keypad
(gray) + and - keys do the same.

<Pageup> <Pagedn>\
Increase or decrease the active color component value by 5; Moving the
mouse up/down with left button held is the same

<0> <1> <2> <3> <4> <5> <6>\
Set the active color component's value to 0 10 20 ... 60

<Space>\
Select the other color register as the active one.  In the default 'auto'
mode this results in the now-inactive register being set to remember the
color under the cursor, and the now-active register changing from whatever
it had previously remembered to now follow the color.

<,> <.>\
Rotate the palette one step.  By default colors 1 through 255 inclusive
are rotated.  This range can be over-ridden with the "cyclerange"
parameter, the <Y> options screen, or the <O> command described below.

"<" ">"\
Rotate the palette continuously (until next keystroke)

<O>\
Set the color cycling range to the range of colors currently defined by
the color registers.

<C>\
Enter Color-Cycling Mode.  When you invoke color-cycling from here, it
will subsequently return to palette-editing when you <Esc> from it.
See {Color Cycling Commands}.

<=>\
Create a smoothly shaded range of colors between the colors selected by
the two color registers.

<M>\
Specify a gamma value for the shading created by <=>.

<D>\
Duplicate the inactive color register's values to the active color
register.

<T>\
Stripe-shade - create a smoothly shaded range of colors between the two
color registers, setting only every Nth register.  After hitting <T>, hit
a numeric key from 2 to 9 to specify N.  For example, if you press <T>
<3>, smooth shading is done between the two color registers, affecting
only every 3rd color between them.  The other colors between them remain
unchanged.

<W>\
Convert current palette to gray-scale.  (If the <X> or <Y> exclude ranges
described later are in force, only the active range of colors is converted
to gray-scale.)

<Shift-F2> ... <Shift-F9>\
Store the current palette in a temporary save area associated with the
function key.  The temporary save palettes are useful for quickly
comparing different palettes or the effect of some changes - see next
command.  The temporary palettes are only remembered until you exit from
palette-editing mode.\
Starting with version 19.6, when palette editing mode is entered, the
original palette is stored in the area associated with F2.

<F2> ... <F9>\
Restore the palette from a temporary save area.  If you haven't previously
saved a palette for the function key, you'll get a simple grey scale.

<L>\
Pause and load an external color map (.MAP file).  See {Palette Maps}.

<S>\
Pause, prompt for a filename, and save the current palette to the named
file (.MAP assumed).  See {Palette Maps}.

<I>\
Invert frame colors.  With some colors the palette is easier to see when
the frame colors are interchanged.

<\\>\
Move or resize the palette frame.  The frame outline is drawn - it can
then be repositioned and sized with the cursor keys, <Pageup> and
<Pagedn>, just as was done when first entering palette-editing mode.  Hit
Enter when done moving/sizing.

<V>\
Use the colors currently selected by the two color registers for the
palette editor's frame.  When palette editing mode is entered, the last
two colors are "X"d out for use by the palette editor; this command can be
used to replace the default with two other color numbers.

<A>\
Toggle 'auto' mode on or off.  When on (the default), the active color
register follows the cursor; when off, <Enter> must be pressed to set the
active register to the color under the cursor.

<Enter>\
Only useful when 'auto' is off, as described above; double clicking the
left mouse button is the same as Enter.

<X>\
Toggle 'exclude' mode on or off - when toggled on, only those image pixels
which match the active color are displayed.

<Y>\
Toggle 'exclude' range on or off - similar to <X>, but all pixels matching
colors in the range of the two color registers are displayed.

<N>\
Make a negative color palette - will convert only current color if in 'x'
mode or range between editors in 'y' mode or entire palette if in "normal"
mode.

<!>\
<@>     <\">       (English keyboard)  <u-grave> (French keyboard)\
<#>  <pound sign> (English keyboard)     <$>    (French keyboard)\
Swap R<->G, G<->B, and R<->B columns. <!>, <@>, and <#> are shifted 1, 2,
and 3, which you may find easier to remember.

<U>\
Undoes the last palette editor command.  Will undo all the way to the
beginning of the current session.

<E>\
Redoes the undone palette editor commands.

<F>\
Toggles "Freestyle mode" on and off (Freestyle mode changes a range of
palette values smoothly from a center value outward).
With your cursor inside the palette box, press the <F> key to enter
Freestyle mode.  A default range of colors will be selected for you
centered at the cursor (the ends of the color range are noted by putting
dashed lines around the corresponding palette values). While in Freestyle
mode:

 Moving the mouse changes the location of the range of colors that are
 affected.

 Control-Insert/Delete or the shifted-right-mouse-button changes the
 size of the affected palette range.

 The normal color editing keys (R,G,B,1-6, etc) set the central color
 of the affected palette range.

 Pressing ENTER or double-clicking the left mouse button makes the
 palette changes permanent (if you don't perform this step, any
 palette changes disappear when you press the <F> key again to exit
 freestyle mode).

 For more details see {Freestyle mode tutorial}
;
;
~Topic=Freestyle mode tutorial
It can be confusing working out what's going on in freestyle mode
so here's a quick walk through...\

Freestyle palette editing is intended to be a way of colouring an image in
an intuitive fashion with the minimum of keyboard usage. In fact everything is
controllable with the mouse, as the following shows:

To start with, generate a plasma type fractal as it has all 256 colours on
screen at once. Now bring up the palette editor and press 'w' to set up
a greyscale palette as a blank canvas on which to splash some colour.
Pressing 'f' puts us in freestyle mode... crosshairs appear on the screen and
a colour band is applied, centred on the cursor. Although, at the moment,
the colour of this band is grey and you won't see much!

In order to change the colour of the band, hold down the left mouse button and
drag up and down.  This changes the amount of red in the band. You'll see the
values change in the status box above the palette grid. Double clicking the
right mouse button changes the colour component that's varied in an r-g-b-r-
cycle.... try it out and conjure up any shade you like!

To vary the width of the band, drag up and down with the right button held down.
Slower machines may show some 'lag' during this operation, especially if they
have no math co-processor, so watch out as the mouse movements get buffered.

Once you've got the band in a satisfactory position then double click the left
button to fix it in place.
Continue like this for as long as you like, adding different colours to the
grey palette.
You'll notice how the band relates to the existing colour, the RGB values give
the middle colour which are then smoothly shaded out to the colours at the ends
of the band. This can lead to some sudden jumps in the shading as the band is
moved about the screen and the edges come to overlap different areas of colour.

For really violent jumps in shading try starting with an image that has areas
that change chaotically, such as a Mandlbrot set. You'll see what I mean when
you move the cross hairs into an area close to the 'lake' where the change in
value from one pixel to the next is sudden, chaotic and large. Watch out! the
strobing effect can be somewhat disturbing. This is nothing to worry about but
just a consequence of the manipulation of the palette and the way in which
the colour bands are calculated.

I hope that you'll find this a useful tool in colouring an image. Remember that
the 'h' key can be used to hide the palette box and expose the whole image.

;
~Topic=Palette Editing Command Summary, Label=IDHELP_PALETTE_EDITING
; This topic is online only.

~Format-
  See {Palette Editing Commands} for full documentation.

  F1               HELP! (Enter help mode and display this screen)
  Esc              Exit from palette editing mode
  h                Hide/unhide the palette frame
  \24 \25 \27 \26          Move the cross-hair cursor around. Control-Cursor keys
                   move faster. A mouse can also be used to move around.
  r or g or b      Select the the Red, Green, or Blue component of the
                   active color register for subsequent commands
  Insert or Delete Select previous or next color component in active register
  + or -           Increase or decrease the active color component by 1
  Pageup or Pagedn Increase or decrease the active color component by 5;
                   Moving the mouse up/down with left button held is the same
  0 1 2 3 4 5 6    Set active color component to 0 10 20 ... 60
  Space            Select the other color register as the active one
  , or .           Rotate the palette one step
  < or >           Rotate the palette continuously (until next keystroke)
  c                Enter Color-Cycling Mode (see {=IDHELP_COLOR_CYCLING Color Cycling Commands})
  =                Create a smoothly shaded range of colors
  m                Set the gamma value for '='.
~FF
  d                Duplicate the inactive color register in active color
  t                Stripe-shade; after hitting 't', hit a number from 2 to 9
                   which is used as stripe width
  Shift-F2,F3,..F9 Store the current palette in a temporary save area
                   associated with the function key
  F2,F3,...,F9     Restore the palette from a temporary save area
  w                Convert palette (or current exclude range) to gray-scale
  \\                Move or resize the palette frame
  i                Invert frame colors, useful with dark colors
  a                Toggle 'auto' mode on or off - when on, the active color
                   register follows the cursor; when off, Enter must be hit
                   to set the register to the color under the cursor
  Enter            Only useful when 'auto' is off, as described above; double
                   clicking the left mouse button is the same as Enter
  x                Toggle 'exclude' mode on or off
  y                Toggle 'exclude' range on or off
  o                Set the 'cyclerange' (range affected by color cycling
                   commands) to the range of the two registers
  n                Make a negative color palette
  u                Undoes the last command
  e                Redoes the last undone command
~FF
  !                Swap red and green columns
  @ \" or u-grave   Swap green and blue columns
  # pound or $     Swap red and blue columns
  f                Toggle Freestyle Palette-Editing Mode.  See
                   {Palette Editing Commands} for details.

;
;
~Topic=Parameter Explorer/Evolver, Label=IDHELP_EVOLVER

 Since fractint is such a wonderfully complex program it has more than a few
 parameters to tweak and options to select. To the inexperienced 
 user the choice is bewildering.  Even for the experts the chaotic nature of
 the mathematical processes involved make it difficult to know what to
 change in order to achieve the desired effect.
 
 In order to help with this situation the Fractint parameter evolver has been
 developed.  It varies those parameters for you and puts the results
 on screen as a grid of small images. You can then choose the one which you
 like best and regenerate it full screen, or if you don't like any of the
 variations, you can try again to see if anything better turns up!

 Enough explanations for now, lets see how easy it is to use:
 
 With the default Mandlebrot set on the screen simply hold down the 'Alt' key
 and press the '1' key on the top row (DON'T use the numeric keypad to the
 right, it won't work). You'll see a screen full of images generated starting
 from the middle and spiraling outwards. The perfect Mandlebrot set will be
 in the middle and the others will be warped and distorted by having had the
 initial value of Z perturbed at random... but you don't need to know that
 (which is the whole point really!).

 'Alt-1' produces a low level of mutation of the fractal, only 'mild'
 parameters are changed, those which have a more subtle effect. For much
 wilder variations try pressing 'Alt-7' now. This give the maximum available
 mutation with just about everything being twiddled and fiddled to rather
 dramatic effect as you should now be seeing.

 To select an image for full screen display simply bring up a zoombox by
 pressing 'Page-up' once. The center image will now have a white box around
 it. Hold down the 'Ctrl' key and use the arrow keys to move this box around
 until it's outlining an image you like. Pressing 'B' will now exit from
 evolver mode and redraw the selected image full size. If, rather than exiting
 from evolver mode, you just press 'enter', then a whole new set of images
 is generated, all based around the one you selected (which is now the middle
 image of the new set).
 
 From a basic point of view that's it!  Just press alt-number to scramble
 things when you're out of inspiration, it works for any of the fractal
 types in fractint including formulae... easy! (chaotic, but easy :-) )

 As this is a Fractint feature, there is, of course, a lot more to it
 than the basics described above...

 For a start, there are some handy hotkeys to use, 'F2' and 'F3' are used to
 alter the amount of mutation or the amount by which the selected parameters
 can be varied. 'F2' halves the amount of mutation, 'F3' doubles it. So if
 things on-screen are looking a bit samey just press 'F3' a few times to
 crank up the mutation level.

 Using 'F2' to decrease mutation levels is a way of moving towards a goal
 image. Say that a set of images contained one that looked a little like,
 maybe, a cats face and you wished to try and get something more cat like.
 To achieve this simply select the desired image and press 'F2'. The newly
 generated images should be more alike, though probably still quite widely
 varied. With luck, one of the new images will be even more cat like. Select
 this one and press 'F2' again. Continue like this, selecting the center image
 again if there are no improvements in the current generation, until
 eventually all the images are alike and you've arrived at your goal (or at
 least you're probably as close as it's possible to get with that fractal
 type).

 As you look for more details in the images it is useful to reduce the number
 of images per generation, thus producing larger sub images. Pressing 'F4'
 will reduce the number of images per side on the grid by two and pressing
 'F5' increments the gridsize similarly.

 'F6' will switch between normal random mutation and 'spread' random mutation.
 In 'spread' mode the amount of mutation allowed in an image is varied
 according to each images position in the grid. Those images near the center
 are allowed a lesser degree of freedom of mutation than those around the
 outside. This produces a sea of images, stable at the center with wilder
 variations around the edges. This mode is best used with larger gridsizes
 and becomes completely silly at a gridsize of three!

 'Ctrl-e' brings up the evolver control screen on which you have manual access
 to the evolution parameters varied by the hotkeys described above.\
 These are:

    Gridsize.            The number of sub images per side of the screen. Use
                         odd numbers only.
      
    Max Mutation         The maximum amount by which a parameter may be varied
                         
    Mutation Reduction   The Max mutation value is multiplied by this between
                         generations. This can be used to automatically goal 
                         seek without having to use the 'F2' key.

    Grouting             Turns on or off the gap between sub images, at large 
                         values of gridsize this can reclaim valuable screen 
                         area for display use.

 Pressing 'F6' brings up a screen from which you can control what parameters
 get varied and in what manner. You'll notice that as well as the mutation
 modes 'random' and 'spread' there are other ways of stirring things around,
 read on......

 As well as randomly mutating parameter values (referred to as 'evolver mode'
 or just 'evolving') a chosen set of parameters can be varied steadily across
 the screen thus allowing the user to explore what happens as a parameter is
 slowly changed ('explorer mode' or 'exploring'). For example, to get
 acquainted with parameter exploring and produce a map of the Julia sets, try
 this:\
 Start Fractint and set the type to Julia and the resolution higher than
 320x200, once the default Julia set has been generated, press 'Ctrl-e' to
 bring up the evolver/explorer control panel.

 Set evolve mode to yes and then press 'F6' to bring up the screen that allows
 you to choose what gets varied.
 
 Now set the first entry (param1) to 'x' and the second (param2) to 'y'. This 
 tells Fractint to vary param1 (the real part of c) across the screen and
 param2 (the imaginary part of c) down the screen. Make sure all the other
 parameters are set to 'no' so that nothing else gets changed to confuse
 things.

 Press 'Return' to go back to the main evolver control screen and you'll see
 that a few more items have appeared. These control just how much the
 parameters are varied across the screen and what their starting values
 should be, leave them as they are but increase gridsz to 15. Also switch
 on the parameter zoom box option.

 When you exit this control screen with the 'Return' key, you'll see a grid of
 Julia sets generated all mapped out onto the imaginary plane, squint and
 you'll be able to spot the underlying Mset!

 When you press 'Pageup' this time you'll notice that there are two boxes on
 screen with a larger box centered around the normal selection box.
 'Ctrl-pageup' or 'Ctrl-pagedown' varies the size of this box which
 represents the 'parameter' zoom box.  The parameter zoombox allows you to
 look at smaller areas of the parameter space in more detail. To explain
 this further look at how the Julia sets change across the screen, around
 the area of 'seahorse valley' on the underlying Mset, the Julia sets
 undergo a sharp change in character. This area of change can be examined
 in more detail using parameter zooming. Make the outer zoombox a few grids
 across and select an image in the area of this change with the outer box
 straddling it. Look at the images right in the corners of the parm zoombox,
 when you press 'Enter' and a new generation of images is generated the same
 images will be in the corners of the screen with more sub images between
 them, allowing a finer look at how the change progresses.  In this way, you
 can observe the chaotic areas in parameter space with the unique pseudo four
 dimensional view offered by the explorer.

 In the example shown above, you were just exploring the variation in two
 'real' parameters, i.e. they can take fractional values, and the idea of
 being able to create an image half way between two others is valid. However,
 many of the parameters in fractint are discrete, i.e. can be only one of a
 set of specific values. Examples of discrete parameters are inside colouring
 method or decomposition values and the way in which these are explored is
 different in that parameter zooming has no meaning for discrete parameters.

 When a discrete parameter is set to vary with x or y it is simply cycled
 through all possible values and round again. Words are getting clumsy so
 it's time for another example methinks!

 First press 'Insert' to restart Fractint and get everything back to its
 default values for a fresh start. Set the fractal type to 'fn*fn' this type
 requires the user to choose two trig functions and this choice is made on
 the 'Z' screen. There are around thirty different functions to choose from
 and checking out all the different combinations is a not inconsiderable task
 manually. With the explorer, however, it's a piece of cake!

 Set the screen resolution to the highest you can view and press 'Ctrl-e'
 to bring up the control panel and enable evolving mode. Set the gridsize
 to 29 and leave the parameters at their defaults. Now, press 'F6' to enter
 'variable tweak central' and set trig function 1 to 'x' and trig function 2
 to 'y', and all the others to 'no'. Exit the two screens and you'll see
 generated all of the different combinations possible even if they are rather
 small examples!

 To find out what particular combination of trig functions an image is using,
 just select the image using the zoombox and bring up the 'z' screen. You
 don't have to press 'Enter', simply highlighting the appropriate image with
 the ctrl-arrow keys will do.

 And that just about sums up the evolver! Much more could be written but it's
 better experienced, try writing your formulae with more variable parameters
 and trig functions so that their behavior can be investigated.

 Try using it with any fractal type, if in doubt just see what happens!

 It should be noted here that some of the fractal types such as the IFS do not
 terminate, they run on forever and as such aren't usable with the evolver as
 the first sub image would never finish to allow the next one to generate.
 These fractal types are detected and you won't be allowed to start the evolver
 with these.

 There now only remains to mention that you can save image sets and restore
 them later to carry on exploring from a different seed image:
 's' saves and 'r' restores as in normal fractint operation and the screenfull
 is saved as a single gif file.

 Have fun!  See {Evolver Commands}.
;
;
~Topic=Evolver Commands
~Format-
   PageUp          When no Zoom Box is active, brings one up.
                   When Zoom Box is active already, shrinks it.
   PageDown        Expands the Zoom Box.
                   Expanding past the screen size cancels the Zoom Box.
~Doc-
   \24 \25 \27 \26         Pans (Moves) the Zoom Box.
   Ctrl- \24 \25 \27 \26   Moves the Zoom Box to the next subimage.
~Doc+,Online-
   Arrow key       Pans (Moves) the Zoom Box.
   Ctrl-Arrow key  Moves the Zoom Box to the next subimage.
~Online+
   Enter           Redraws the Screen or area inside the Zoom Box.
   Ctrl-Enter      'Zoom-out' - expands the image so that your current image
                    is positioned inside the current zoom-box location.
   Ctrl-Pad+/Pad-  Rotates the inner Zoom Box.
   Ctrl-PgUp/PgDn  Changes inner Zoom Box vertical size.
   Ctrl-Home/End   Changes inner Zoom Box shape.
   Ctrl-Ins/Del    Changes inner Zoom Box color.
   Ctrl-E          Brings up the evolver screen.
   Space           Brings up the evolver screen once in evolver mode.
   B               Turns off evolver if in evolver mode.
   F2              Halves the amount of mutation.
   F3              Doubles the amount of mutation.
   F4              Generates fewer, bigger images.
   F5              Generates more, smaller images.
   F6              Switches to/from 'spread' mode with fewer mutations around
                    the middle.
~Format+


; Fractal Types:
~Include help2.src
;
; Doodads, 3D:
~Include help3.src
;
; Parameters, Video Adapters & Modes:
~Include help4.src
;
; The rest:
~Include help5.src
;
;
