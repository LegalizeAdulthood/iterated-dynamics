{\rtf1\ansi\ansicpg1252\uc1 \deff6\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f28\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}pica;}{\f154\froman\fcharset238\fprq2 Times New Roman CE;}{\f155\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f157\froman\fcharset161\fprq2 Times New Roman Greek;}{\f158\froman\fcharset162\fprq2 Times New Roman Tur;}{\f159\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f160\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f161\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f162\fswiss\fcharset238\fprq2 Arial CE;}{\f163\fswiss\fcharset204\fprq2 Arial Cyr;}{\f165\fswiss\fcharset161\fprq2 Arial Greek;}{\f166\fswiss\fcharset162\fprq2 Arial Tur;}
{\f167\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f168\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f169\fswiss\fcharset186\fprq2 Arial Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive \fs16\up6 \sbasedon10 
footnote reference;}{\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 footnote text;}{\*\cs17 \additive \super \sbasedon10 endnote reference;}{\*\cs18 \additive \ul\cf2 
\sbasedon10 Hyperlink;}}{\info{\title Winfract on-line Documentation}{\subject Winfract}{\author Bert Tyler}{\keywords winfract RTF}{\operator  }{\creatim\yr2006\mo6\dy7\hr19\min12}{\revtim\yr2009\mo1\dy18\hr10\min55}{\printim\yr1992\mo3\dy13\hr10\min33}
{\version21}{\edmins345}{\nofpages31}{\nofwords7440}{\nofchars-32766}{\nofcharsws0}{\vern8283}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0
\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd \linex576\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  main_index}}+{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs15\fs16\up6 +}{\f28  browse:005}}${\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Help Index}}}{\f1\fs24  }{\b\f1\fs24 
Winfract (Fractint for Windows) }{\f1\fs24 
\par 
\par }{\b\f1\fs24 Copyright (C) 1990-2009 The Stone Soup Group.
\par 
\par Winfract (Fractint for Windows) may be freely copied and distributed, but may not be sold.}{\f1\fs24 
\par 
\par }{\b\f1\fs24 Help Topics}{\f1\fs24 
\par \tab }{\f1\fs24\uldb What's New?}{\v\f1\fs24 whatsnew_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb File Menu}{\v\f1\fs24 file_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Fractals Menu}{\v\f1\fs24 fractals_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb View Menu}{\v\f1\fs24 view_options}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Colors Menu}{\v\f1\fs24 color_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Help Menu}{\v\f1\fs24 help_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Fractal Formula Selection}{\v\f1\fs24 formula_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Zooming in on an Image}{\v\f1\fs24 zoom_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Mandelbrot/Julia Toggling}{\v\f1\fs24 julia_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Color-Cycling}{\v\f1\fs24 cycling_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Fractint-Style Help and Prompts}{\v\f1\fs24 fractint_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Coordinate Box options}{\v\f1\fs24 CoordinateBox}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Limitations in Winfract}{\v\f1\fs24 bug_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb Distribution Policy, Contacting the Authors, The Book}{\v\f1\fs24 distrib_index}{\f1\fs24 
\par \tab }{\f1\fs24\uldb A list of Winfract and Fractint Authors}{\v\f1\fs24 authors_index}{\f1\fs24 
\par \tab \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{ whatsnew_index}}${\footnote \pard\plain 
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  What's New in this Release?}}+{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:007}}K{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{\f28 
 Fractint Prompts;Fractint Help;Fractint Hotkeys}}}{\f1  
\par }{\b\f1 What's New in this Release?
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par This release of Winfract is essentially the same as the version 18.2 but with the following enhancements:
\par 
\par - All fractal types from Fractint 20.4 (with the exception of the 'julia_inverse' fractal type, which requires some extra logic we haven't yet added to Winfract) have been incorporated into this version of Winfract.
\par 
\par - The File Open, File SaveAs, and File 
Print options now use the new Windows-style "common dialog boxes", with the extra capabilities provided by those routines.   This is particularly handy if you're using Windows-for-Workgroups or Windows NT, 2000, XP with their networking options.
\par 
\par - The fractal history feature of FFD has been implemented and uses the \lquote h\rquote  key to move back in history and the \lquote H\rquote  key to move forward in history.
\par  
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs24 \page }{\cs15\fs16\up6 #{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}
{\f28  fractint_index}}${\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Fractint-Style Help and Prompts}}+{\footnote \pard\plain 
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:050}}K{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{\f28  Fractint Prompts;Fractint Help;Fractint Hotkeys}}}{\f1  
\par }{\b\f1 Fractint-Style Help and Prompts
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par Fractint's hypertext-like online help (all 350+ screens' worth!) is available at the push of a button (specifically, the Control-F1 button - the F1 button brings up this Winfract-specific help system).  Note that Fract
int's online help is just that - Fractint-specific online help.  While much of that help is common to both Fractint and Winfract, some of it (the sections on printing, the palette editor, and the 'V(iew)' options come to mind right away) describe items th
at have nothing to do with the Winfract environment.  Also, Fractint's online help is not context-sensitive at the moment - you always start at Fractint's initial help index screen when you press Control-F1.
\par 
\par Many Fractint-style hot-keys are also available.
  Depending on the status of the "Hot-key Actions" option (found in the "Options" menuitem), these hot-keys will either take you directly to the appropriate Winfract menu or to a text-based prompting screen directly from Fractint.  Note that some function
s (printing and selecting video modes are prime examples) are so different between the DOS and Windows environments that you will be taken to a Windows-style menu even if you've selected Fractint-style prompts.
\par 
\par The Fractint-style "Hot-Keys" and their actions are listed below.  Items marked with a "*" are not connected to a Fractint-style prompting screen and will always take you directly to a Windows-style equivalent.
\par 
\par  T\tab Select Fractal Type
\par  S\tab Save Fractal Image *
\par  P\tab Print Fractal Image *
\par  R\tab Restore Fractal Image
\par  3\tab 3D Restore
\par  O\tab 3D Overlay
\par  X\tab Basic Options
\par  Y\tab Extended Doodads
\par  Z\tab Fractal Parameters
\par  I\tab 3D Parameters
\par  A\tab Starfields
\par  @\tab Select Parameter file and item
\par  B\tab Save Parameter item
\par  L\tab Load Color-Map
\par  W\tab Write (save) Color-Map *
\par  DEL\tab Select Image Size *
\par  INS\tab Reset All Options
\par  TAB\tab Status display
\par 
\par In addition to the above, Winfract also responds to many of the Fractint-style color-cycling hot-keys:  'C', '+', '-', '<', '>', the four cursor keys, SPACE, and ENTER.  Unlike Fractint, you don't have to enter "
color-cycling mode" to use these keys - Color-Cycling mode and the main image mode are one and the same.
\par  
\par Many of Fractint's prompting screens have also been incorporated into Winfract.  Note that some of these screens list options that aren't connected t
o anything in the Winfract environment (the sound options on the 'X' screen come to mind).  However, those of you who are used to Fractint's prompting screens may find this option more comfortable than the Windows menus.  Currently, these Fractint-style p
rompting screens are only selectable using the Hot-Keys (using the Windows menu-bars always gives you Windows-style entry screens), and then only if you have chosen "Fractint-style Prompts" as your "Hot-Key Options" default. 
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  bug_index}}${\footnote \pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Bugs and Limitations}}+{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:060}}K{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs15\fs16\up6 K}{\f28  bugs;limitations}}}{\f1  
\par }{\b\f1 Limitations in Winfract}{\f1  
\par 
\par Fractint for Windows is (and will continue to be) a "port" of Fractint for DOS to the Windows environment, retaining the Fractint for DOS fractal and GIF engines, but replacing its front
-end and graphics interface with a Windows engine.  As such, its fractal engine will always "trail" that of Fractint for DOS (although hopefully not by much - the two 17.1 versions were uploaded within hours of each other), and the user interface will ten
d to do the same except where the Windows version adds functionality simply by virtue of the Windows interface.
\par 
\par There are three main c
auses behind the various limitations of this program.  For future brevity, these causes are tagged FFD (problems related to the fact that much of the code is and will continue to be from Fractint For Dos), WLIM (limitations caused by Windows, or some Wind
o
ws video/printer drivers that aren't limitations under MS-DOS), and NYI (Not Yet Implemented - hey, we're working on it!).  We used to hide behind a fourth excuse - calling ourselves novice Windows programmers and using the "what can you expect?" claim - 
but folks quit believing that one.  FFD and WLIM limitations are probably permanent - hopefully NYI problems are less so.
\par 
\par At any rate, the major limitations of Winfract continue to be:
\par 
\par - You can run only one "instance" of Fractint for Windows.  FFD: Fract
int for DOS is riddled with initialized FAR data ("char far myvalue = 0;"), and the Windows SDK silently but firmly tags any program containing code like that as a single-instance program.
\par 
\par - Palette support is limited.   WLIM: The "stock" VGA driver suppl
ied with Win 3.0 doesn't support palette-modification by applications at all (most third-party 256-color SuperVGA drivers do, though).  "Plasma Clouds" look Godawful using anything less than a 256-color Windows driver.  Color-cycling is limited to video d
r
ivers which support palette-manipulation (and, for 16-color drivers, color-cycling affects the background windows as well).  Note that 16-bit and 24-bit "true color" Windows video drivers don't *have* a palette to manipulate, so we can't color-cycle them.

\par 
\par - Fractint for Windows is not as "background process" friendly as it should be when it updates the screen image - if it is updating a large image in its entirety, it can grab the machine for seconds at a time.  FFD  and WLIM -  Windows only gives other pr
ograms a shot at the CPU when the currently active program volunteers to give up control, and the fractal engine that Winfract is based on only gives us the opportunity to do that when it calls the routine that checks the keyboard - an event that may happ
en only once a second or so. 
\par  
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  file_index}}${\footnote \pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  File Commands}}+{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:010}}K{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs15\fs16\up6 K}{\f28  file;open;save;print;gif;bmp;3d;3d overlay;parameter files}}}{\f1 
\par }{\b\f1 File Menu}{\f1  
\par 
\par File }{\b\f1 Open}{\f1  loads either Fractint-for-DOS-style or "generic" GIF files.  Note that the correct palette isn
't completely displayed on the screen.  Windows "reserves" twenty palette values for its own use, and "adjusts" Fractint's images accordingly - and for 16-color drivers like the VGA driver supplied with Windows that don't support palette-manipulation by a
pplications programs, cheerfully ignores our attempts at palette-manipulation.  If the restored image is resumable, the image will resume calculating as soon as it is loaded.
\par 
\par File }{\b\f1 Save}{\f1  saves your current image (by default, as a GIF (version 89a) file, comp
atible with Fractint-for-DOS, your favorite DOS GIF viewers, and (of course) the "File Open" option, but optionally as a BMP file).  Again, the palette you see on the screen may not be the one that the program is "using" (and gets saved to the disk file).
  If the saved image is resumable, the image will resume calculating as soon as it is finished saving.  Note that Winfract can only open GIF89a-format images as fractal images, and cannot open BMP-format images at all.
\par 
\par File }{\b\f1 3D Open}{\f1  and File }{\b\f1 3D Overlay}{\f1  load
 in your image using "3D" transformations.   The 3D Open option clears your image first and then loads the new one, while the Overlay option leaves your original image intact and adds the new image over it.
\par 
\par File }{\b\f1 Print}{\f1  does the best job it can sending the image to your printer.  The program does not "dither" for black-and-white printers - it just "candy stripes" adjacent colors the same way that Fractint-for-DOS does.
\par 
\par }{\b\f1 Read Batchfile}{\f1  and }{\b\f1 Write Batchfile}{\f1  load and save "batch-file" parameters of your (and oth
ers) favorite images.  As soon as you Read a batchfile image (saved as an entry in a PAR file such as FRACTINT.PAR ), Winfract will begin generating that image at whatever image size you are currently using.  The disadvantage to saving your favorite image
s as PARameter files rather than GIF images is that Winfract has to recreate each image every time you select it.  The advantage is that you can fit a lot more formulas on your hard disk this way, and they're a tad easier to E-mail to your friends!
\par 
\par File }{\b\f1 Copy to Clipboard}{\f1 
 copies the currently-displayed image to the Windows clipboard (in "Device-Independent Bitmap" format) where your other Windows programs can collect it.  Note that, for 256-color video drivers and 256-color images, the colors in the clipboar
d won't visibly match the colors in Winfract's window until you change your "focus" to the clipboard's window.  That's because Winfract has warned the Clipboard that it is reserving the right to color-cycle its colors, so the Clipboard is just using Windo
ws' default 20 colors to display its colors while Winfract has control of the screen.
\par 
\par GIF and "Graphics Interchange Format" are trademarks of CompuServe Incorporated, an H&R Block Company. 
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  fractals_index}}${\footnote \pard\plain 
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Fractal Options}}+{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{ browse:015}}K{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{
 fractal parameters; 3d parameters;fractal options}}}{\f1\fs16  
\par }{\b\f1 Fractals Options}{\f1 
\par 
\par }{\b\f1 Fractal Formula}{\f1  brings up a dialog box letting you select from any of approximately 80 fractal types.  See the }{\f1\uldb Fractal Formula Selection}{\v\f1 formula_index}{\f1  for formula details.
\par 
\par }{\b\f1 Fractal Params}{\f1  brings up a "Fractal Parameters" menu that lets you select any modifiable parameters in your fractal type as well as the specific area you may want to zoom in on.
\par 
\par }{\b\f1 Basic Options }{\f1  brings up a "Basic Options" menu that lets you select any of w
hat we consider the "basic" (mostly because we added them first) fractal options - various generation algorithms (single/dual pass, solid-guessing, boundary tracing, tesseral),  inside and outside coloring schemes, maximum iterations,  Biomorph and Decomp
osition options, etc .
\par 
\par }{\b\f1 Extended Options}{\f1  brings up an "Extended Options" menu that lets you select any of what we consider to be "extended" (because we didn't think of them until later) fractal options, including Inversion and Continuous Potential.
\par 
\par }{\b\f1 3D Params }{\f1 brings up a "3D Parameters" menu that lets you select any modifiable 3D parameters in your fractal type.
\par 
\par }{\b\f1 Reset all Options}{\f1  resets all fractal-related options to the default state they were in when Winfract was first started.
\par 
\par Once you have selected any of these options, Winfract will clear the image and regenerate it using the new options you have given it.
\par 
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{ view_options}}${\footnote \pard\plain 
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{ View Options}}+{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{ browse:020}}K{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{
 image size;zooming; zoom in;zoom out;zoom bar;image sizing;pixel-by-pixel updating;status report}}}{\f1  
\par }{\b\f1 View Options
\par 
\par Image Settings}{\f1  The }{\b\f1 Image Settings}{\f1  option lets you select either a pre-defined image size, or make up your own (up to an internal limit of 4096x4096, note that Windows may not be able to allocate this much memory
) and select a two-color, 16-color, or 256-color image.  Those of you with 24-bit color video cards will have to hold yourself back to 256-color images for the moment - the 256-color limit is one of the penalties of using the fractal engine from Fractint.
 
\par 
\par If your image size is larger than your window, you can use the scroll bars in the window to scroll around your image. 
\par 
\par If you have selected the "Window Sizing" option (see below), your image window will automatically re-size to the image size you have just selected.
\par }{\b\f1 
\par Zoom In}{\f1 , }{\b\f1 Zoom Out}{\f1 , and }{\b\f1 Zoom Bar }{\f1 toggles select which of three zooming options you want to use.  For details, see the help section on }{\f1\uldb Zooming in on an Image}{\v\f1 zoom_index}{\f1 .
\par 
\par }{\b\f1 Coordinate Box }{\f1 toggles the display of an optional "Coordinate Box" displaying information about the pixel directly underneath your mouse pointer.  See the help section under }{\f1\uldb Coordinate Box}{\v\f1 CoordinateBox}{\f1  for details.

\par 
\par }{\b\f1 Window Sizing }{\f1 toggles the "Window Sizing" option, in which the scroll-bars are eliminated and the image window is automatically sized to the size of your fractal image.
\par 
\par }{\b\f1 Pixel-By-Pixel Update}{\f1  toggles the "Pixel-By-Pixel Update" option, in which Winfract's normal method of updating its image in periodic chunks is changed to a "display every pixel as it is changed" strategy.  This approach is }{\i\f1 
extremely }{\f1 slow (Windows' overhead takes a heavy toll on programs that update their images this way), but it lets you see how Winfract is actually generating its images - try this using the Boundary Trace and Tesseral image-generation methods.
\par 
\par }{\b\f1 HotKey Actions}{\f1  toggles whether the various "hot-keys" Winfract is sensitive to take you to the same Windows-style menus accessed through the Windows menubar or to "Fractint-style" prompting screens.  See the help section on }{\f1\uldb 
Fractint-Style Help and Prompts}{\v\f1 fractint_index}{\f1  for details.
\par  
\par }{\b\f1 Status }{\f1 Brings up a Status messagebox displaying the status of your current image (which formula you are using, its parameters and screen corners, and whether or not it's still being generated or has finished).  If 
the image is still being generated, Winfract continues with it when you press the "OK" button. 
\par }{\b\f1 
\par }{\f1 \page }{\cs15\fs16\up6 #{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{ color_index}}${\footnote \pard\plain 
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{ Color Options}}+{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{ browse:025}}K{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{
 colormaps;color-cycling;loading colormaps;saving colormaps}}}{\f1  
\par }{\b\f1 Color Options}{\f1 
\par 
\par }{\b\f1 Load Color-Map}{\f1  and }{\b\f1 Write Color-Map}{\f1  load and save external color-maps in the same manner as Fractint-for-DOS (within Windows' limitations).
\par 
\par }{\b\f1 Color-Cycling}{\f1  brings up a Color_Cycling Dialog box.  See the Help section on }{\f1\uldb Color_Cycling}{\v\f1 cycling_index}{\f1  for details.
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{ help_index}}${\footnote \pard\plain 
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{ Help Options}}+{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{ browse:030}}K{\footnote \pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{
 help;fractint-style help;about}}}{\fs16\up6  }{\f1 
\par }{\b\f1 Help Options
\par }{\f1 
\par }{\b\f1 Index}{\f1  brings up this help system.  So does pressing the F1 key.
\par 
\par }{\b\f1 Using Help}{\f1  brings up the standard Windows "help on Help" system.
\par 
\par }{\b\f1 Fractint Help}{\f1  brings up Fractint-style help screens (all 350+ of them!)  So does pressing the Control-F1 key.  See the Help section on }{\f1\uldb Fractint-Style Help and Prompts}{\v\f1 fractint_index}{\f1  for details.
\par 
\par }{\b\f1 About Winfract }{\f1 brings up a standard "About Box".
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  formula_index}}${\footnote \pard\plain 
\ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Selecting a Fractal Formula}}+{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:035}}K{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{\f28  fractal;formula}}}{\f1 
\par }{\b\f1 Fractal Formula Selection}{\f1  
\par 
\par Using the Options }{\b\f1 Formula}{\f1  option, you can select any of over 90 fractal types (virtually every fractal type that is available in version 20.4 of Fractint-for-DOS).   Aft
er selecting a fractal type, a dialogue box pops up and prompts you for any formula parameters and the screen corners (all with reasonable default values).
\par 
\par All fractal types from Fractint 20.4 (with the exception of the 'julia_inverse' fractal type, which requires some extra logic we haven't yet added to Winfract) have been incorporated into this version of Winfract.
\par 
\par The list of Fractal types and their formulas include:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par }{\b\f1 ant
\par }{\f1     Generalized Ant Automaton as described in the July 1994 Scientific
\par     American. Some ants wander around the screen. A rule string (the first
\par     parameter) determines the ant's direction. When the type 1 ant leaves a
\par     cell of color k, it turns right if the kth symbol in the first parameter
\par     is a 1, or left otherwise. Then the color in the old cell is incremented.
\par     The 2nd parameter is a maximum iteration to guarantee that the fractal
\par     will terminate. The 3rd parameter is the number of ants. The 4th is the
\par     ant type 1 or 2. The 5th parameter determines if the ants wrap the screen
\par     or stop at the edge.  The 6th parameter is a random seed. You can slow
\par     down the ants to see them better using the <p> screen Orbit Delay.
\par 
\par }{\b\f1 barnsleyj1
\par }{\f1       z(0) = pixel;
\par       if real(z) >= 0
\par         z(n+1) = (z-1)*c
\par       else
\par          z(n+1) = (z+1)*c
\par     Two parameters: real and imaginary parts of c
\par 
\par }{\b\f1 barnsleyj2
\par }{\f1       z(0) = pixel;
\par       if real(z(n)) * imag(c) + real(c) * imag(z((n)) >= 0
\par          z(n+1) = (z(n)-1)*c
\par       else
\par          z(n+1) = (z(n)+1)*c
\par     Two parameters: real and imaginary parts of c
\par 
\par }{\b\f1 barnsleyj3}{\f1 
\par       z(0) = pixel;
\par       if real(z(n) > 0 then z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1)
\par          + i * (2*real(z((n)) * imag(z((n))) else
\par       z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1 + real(c) * real(z(n))
\par              + i * (2*real(z((n)) * imag(z((n)) + imag(c) * real(z(n))
\par     Two parameters: real and imaginary parts of c.
\par 
\par }{\b\f1 barnsleym1}{\f1 
\par       z(0) = c = pixel;
\par }\pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1       if real(z) >= 0 then
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1         z(n+1) = (z-1)*c
\par       else z(n+1) = (z+1)*c.
\par     Parameters are perturbations of z(0)
\par 
\par }{\b\f1 barnsleym2}{\f1 
\par       z(0) = c = pixel;
\par       if real(z)*imag(c) + real(c)*imag(z) >= 0
\par         z(n+1) = (z-1)*c
\par       else
\par         z(n+1) = (z+1)*c
\par     Parameters are perturbations of z(0)
\par 
\par }{\b\f1 barnsleym3
\par }{\f1       z(0) = c = pixel;
\par       if real(z(n) > 0 then z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1)
\par          + i * (2*real(z((n)) * imag(z((n))) else
\par       z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1 + real(c) * real(z(n))
\par          + i * (2*real(z((n)) * imag(z((n)) + imag(c) * real(z(n))
\par     Parameters are perturbations of z(0)
\par 
\par }{\b\f1 bifurcation}{\f1 
\par     Pictorial representation of a population growth model.
\par       Let P = new population, p = oldpopulation, r = growth rate
\par       The model is: P = p + r*fn(p)*(1-fn(p)).
\par     Three parameters: Filter Cycles, Seed Population, and Function.
\par 
\par }{\b\f1 bif+sinpi
\par }{\f1     Bifurcation variation: model is: P = p + r*fn(PI*p).
\par     Three parameters: Filter Cycles, Seed Population, and Function.
\par 
\par }{\b\f1 bif=sinpi
\par }{\f1     Bifurcation variation: model is: P = r*fn(PI*p).
\par     Three parameters: Filter Cycles, Seed Population, and Function.
\par 
\par }{\b\f1 biflambda
\par }{\f1     Bifurcation variation: model is: P = r*fn(p)*(1-fn(p)).
\par     Three parameters: Filter Cycles, Seed Population, and Function.
\par 
\par }{\b\f1 bifstewart
\par }{\f1     Bifurcation variation: model is: P = (r*fn(p)*fn(p)) - 1.
\par     Three parameters: Filter Cycles, Seed Population, and Function.
\par 
\par }{\b\f1 bifmay
\par }{\f1     Bifurcation variation: model is: P = r*p / ((1+p)^beta).
\par     Three parameters: Filter Cycles, Seed Population, and Beta.
\par 
\par }{\b\f1 cellular
\par }{\f1     One-dimensional cellular automata or line automata.  The type of CA
\par     is given by kr, where k is the number of different states of the
\par     automata and r is the radius of the neighborhood.  The next generation
\par     is determined by the sum of the neighborhood and the specified rule.
\par     Four parameters: Initial String, Rule, Type, and Starting Row Number.
\par     For Type = 21, 31, 41, 51, 61, 22, 32, 42, 23, 33, 24, 25, 26, 27
\par         Rule =  4,  7, 10, 13, 16,  6, 11, 16,  8, 15, 10, 12, 14, 16 digits
\par 
\par }{\b\f1 chip
\par }{\f1     Chip attractor from Michael Peters - orbit in two dimensions.
\par       z(0) = y(0) = 0;
\par       x(n+1) = y(n) - sign(x(n)) * cos(sqr(ln(abs(b*x(n)-c))))
\par                                  * arctan(sqr(ln(abs(c*x(n)-b))))
\par       y(n+1) = a - x(n)
\par     Parameters are a, b, and c.
\par 
\par }{\b\f1 Circle
\par }{\f1     Circle pattern by John Connett
\par       x + iy = pixel
\par       z = a*(x^2 + y^2)
\par       c = integer part of z
\par       color = c modulo(number of colors)
\par 
\par }{\b\f1 cmplxmarksjul
\par }{\f1     A generalization of the marksjulia fractal.
\par       z(0) = pixel;
\par       z(n+1) = c^(exp-1)*z(n)^2 + c.
\par     Four parameters: real and imaginary parts of c,
\par     and real and imaginary parts of exponent.
\par 
\par }{\b\f1 cmplxmarksmand
\par }{\f1     A generalization of the marksmandel fractal.
\par       z(0) = c = pixel;
\par       z(n+1) = c^(exp-1)*z(n)^2 + c.
\par     Four parameters: real and imaginary parts of perturbation
\par     of z(0), and real and imaginary parts of exponent.
\par 
\par }{\b\f1 complexnewton, complexbasin
\par }{\f1     Newton fractal types extended to complex degrees. Complexnewton
\par     colors pixels according to the number of iterations required to
\par     escape to a root. Complexbasin colors pixels according to which
\par     root captures the orbit. The equation is based on the newton
\par     formula for solving the equation z^p = r
\par       z(0) = pixel;
\par       z(n+1) = ((p - 1) * z(n)^p + r)/(p * z(n)^(p - 1)).
\par     Four parameters: real & imaginary parts of degree p and root r.
\par 
\par }{\b\f1 diffusion
\par }{\f1     Diffusion Limited Aggregation.  Randomly moving points
\par     accumulate.  Three parameters: border width (default 10), type,
\par     and color change rate.
\par 
\par }{\b\f1 dividebrot5
\par }{\f1     by Jim Muth
\par       z(0) = 0, c = pixel, a = real(p1) - 2
\par       b = imag(p1) + 10^(-20);
\par       z(n+1) = sqr(z(n)) / (z(n)^(-a) + b) + c.
\par     Two parameters: a and b.
\par 
\par }{\b\f1 dynamic
\par }{\f1     Time-discrete dynamic system.
\par       x(0) = y(0) = start position.
\par       y(n+1) = y(n) + f( x(n) )
\par       x(n+1) = x(n) - f( y(n) )
\par       f(k) = sin(k + a*fn1(b*k))
\par     For implicit Euler approximation: x(n+1) = x(n) - f( y(n+1) )
\par     Five parameters: start position step, dt, a, b, and the function fn1.
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par }{\b\f1 escher_julia
\par }{\f1     Escher-like tiling of Julia sets from The Science of Fractal Images
\par       z(0) = pixel
\par       z(n+1) = z(n)^2 + (0, 0i)
\par     The target set is a second, scaled, Julia set:
\par       T = [ z: | (z * 15.0)^2 + c | < BAILOUT ]
\par     Two parameters: real and imaginary parts of c
\par     Iteration count and bailout size apply to both Julia sets.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par }{\b\f1 fn+fn(pix)
\par }{\f1       c = z(0) = pixel;
\par       z(n+1) = fn1(z) + p*fn2(c)
\par     Six parameters: real and imaginary parts of the perturbation
\par     of z(0) and factor p, and the functions fn1, and fn2.
\par 
\par }{\b\f1 fn(z*z)
\par }{\f1       z(0) = pixel;
\par       z(n+1) = fn(z(n)*z(n))
\par     One parameter: the function fn.
\par 
\par }{\b\f1 fn*fn
\par }{\f1       z(0) = pixel; z(n+1) = fn1(n)*fn2(n)
\par     Two parameters: the functions fn1 and fn2.
\par 
\par }{\b\f1 fn*z+z
\par }{\f1       z(0) = pixel; z(n+1) = p1*fn(z(n))*z(n) + p2*z(n)
\par     Five parameters: the real and imaginary components of
\par     p1 and p2, and the function fn.
\par 
\par }{\b\f1 fn+fn
\par }{\f1       z(0) = pixel;
\par       z(n+1) = p1*fn1(z(n))+p2*fn2(z(n))
\par     Six parameters: The real and imaginary components of
\par     p1 and p2, and the functions fn1 and fn2.
\par 
\par }{\b\f1 formula
\par }{\f1     Formula interpreter - write your own formulas as text files!
\par 
\par }{\b\f1 frothybasin
\par }{\f1     Pixel color is determined by which attractor captures the orbit.  The
\par     shade of color is determined by the number of iterations required to
\par     capture the orbit.
\par       Z(0) = pixel;  Z(n+1) = Z(n)^2 - C*conj(Z(n))
\par       where C = 1 + A*i, critical value of A = 1.028713768218725...
\par 
\par }{\b\f1 gingerbread
\par }{\f1     Orbit in two dimensions defined by:
\par       x(n+1) = 1 - y(n) + |x(n)|
\par       y(n+1) = x(n)
\par     Two parameters: initial values of x(0) and y(0).
\par 
\par }{\b\f1 halley
\par }{\f1       Halley map for the function: F = z(z^a - 1) = 0
\par       z(0) = pixel;
\par       z(n+1) = z(n) - R * F / [F' - (F" * F / 2 * F')]
\par       bailout when: abs(mod(z(n+1)) - mod(z(n)) < epsilon
\par     Four parameters: order a, real part of R, epsilon,
\par        and imaginary part of R.
\par 
\par }{\b\f1 henon
\par }{\f1     Orbit in two dimensions defined by:
\par       x(n+1) = 1 + y(n) - a*x(n)*x(n)
\par       y(n+1) = b*x(n)
\par     Two parameters: a and b
\par 
\par }{\b\f1 Hopalong
\par }{\f1     Hopalong attractor by Barry Martin - orbit in two dimensions.
\par       z(0) = y(0) = 0;
\par       x(n+1) = y(n) - sign(x(n))*sqrt(abs(b*x(n)-c))
\par       y(n+1) = a - x(n)
\par     Parameters are a, b, and c.
\par 
\par }{\b\f1 hypercomplex
\par }{\f1     HyperComplex Mandelbrot set.
\par       h(0)   = (0,0,0,0)
\par       h(n+1) = fn(h(n)) + C.
\par       where "fn" is sin, cos, log, sqr etc.
\par     Two parameters: cj, ck
\par     C = (xpixel,ypixel,cj,ck)
\par 
\par }{\b\f1 hypercomplexj
\par }{\f1     HyperComplex Julia set.
\par       h(0)   = (xpixel,ypixel,zj,zk)
\par       h(n+1) = fn(h(n)) + C.
\par       where "fn" is sin, cos, log, sqr etc.
\par     Six parameters: c1, ci, cj, ck
\par     C = (c1,ci,cj,ck)
\par 
\par }{\b\f1 icon, icon3d
\par }{\f1     Orbit in three dimensions defined by:
\par       p = lambda + alpha * magnitude + beta * (x(n)*zreal - y(n)*zimag)
\par       x(n+1) = p * x(n) + gamma * zreal - omega * y(n)
\par       y(n+1) = p * y(n) - gamma * zimag + omega * x(n)
\par       (3D version uses magnitude for z)
\par       Parameters:  Lambda, Alpha, Beta, Gamma, Omega, and Degree
\par 
\par }{\b\f1 IFS
\par }{\f1     Barnsley IFS (Iterated Function System) fractals. Apply
\par     contractive affine mappings.
\par 
\par }{\b\f1 julfn+exp
\par }{\f1     A generalized Clifford Pickover fractal.
\par       z(0) = pixel;
\par       z(n+1) = fn(z(n)) + e^z(n) + c.
\par     Three parameters: real & imaginary parts of c, and fn
\par 
\par }{\b\f1 julfn+zsqrd
\par }{\f1       z(0) = pixel;
\par       z(n+1) = fn(z(n)) + z(n)^2 + c
\par     Three parameters: real & imaginary parts of c, and fn
\par 
\par }{\b\f1 julia
\par }{\f1     Classic Julia set fractal.
\par       z(0) = pixel; z(n+1) = z(n)^2 + c.
\par     Two parameters: real and imaginary parts of c.
\par 
\par }{\b\f1 julia(fn||fn)
\par }{\f1       z(0) = pixel;
\par       if modulus(z(n)) < shift value, then
\par          z(n+1) = fn1(z(n)) + c,
\par       else
\par          z(n+1) = fn2(z(n)) + c.
\par     Five parameters: real, imag portions of c, shift value, fn1, fn2.
\par 
\par }{\b\f1 julia4
\par }{\f1     Fourth-power Julia set fractals, a special case
\par     of julzpower kept for speed.
\par       z(0) = pixel;
\par       z(n+1) = z(n)^4 + c.
\par     Two parameters: real and imaginary parts of c.
\par 
\par }{\b\f1 julibrot
\par }{\f1     'Julibrot' 4-dimensional fractals.
\par 
\par }{\b\f1 julzpower
\par }{\f1       z(0) = pixel;
\par       z(n+1) = z(n)^m + c.
\par     Three parameters: real & imaginary parts of c, exponent m
\par 
\par }{\b\f1 julzzpwr
\par }{\f1       z(0) = pixel;
\par       z(n+1) = z(n)^z(n) + z(n)^m + c.
\par     Three parameters: real & imaginary parts of c, exponent m
\par 
\par }{\b\f1 kamtorus, kamtorus3d
\par }{\f1     Series of orbits superimposed.
\par     3d version has 'orbit' the z dimension.
\par       x(0) = y(0) = orbit/3;
\par       x(n+1) = x(n)*cos(a) + (x(n)*x(n)-y(n))*sin(a)
\par       y(n+1) = x(n)*sin(a) - (x(n)*x(n)-y(n))*cos(a)
\par     After each orbit, 'orbit' is incremented by a step size.
\par     Parameters: a, step size, stop value for 'orbit', and
\par     points per orbit.
\par 
\par }{\b\f1 lambda
\par }{\f1     Classic Lambda fractal. 'Julia' variant of Mandellambda.
\par       z(0) = pixel;
\par       z(n+1) = lambda*z(n)*(1 - z(n)).
\par     Two parameters: real and imaginary parts of lambda.
\par 
\par }{\b\f1 lambdafn
\par }{\f1       z(0) = pixel;
\par       z(n+1) = lambda * fn(z(n)).
\par     Three parameters: real, imag portions of lambda, and fn
\par 
\par }{\b\f1 lambda(fn||fn)
\par }{\f1       z(0) = pixel;
\par       if modulus(z(n)) < shift value, then
\par          z(n+1) = lambda * fn1(z(n)),
\par       else
\par          z(n+1) = lambda * fn2(z(n)).
\par     Five parameters: real, imag portions of lambda, shift value, fn1, fn2
\par 
\par }{\b\f1 latoocarfian
\par }{\f1        Orbit in two dimensions defined by:
\par        x(n+1) = fn1 (y(n) * b) + c * fn2(x(n) * b)
\par        y(n+1) = fn3 (x(n) * a) + d * fn4(y(n) * a)
\par        Parameters:  a, b, c, d fn1..4 (all sin=original)
\par 
\par }{\b\f1 lorenz, lorenz3d
\par }{\f1     Lorenz two lobe attractor - orbit in three dimensions.
\par     In 2d the x and y components are projected to form the image.
\par       z(0) = y(0) = z(0) = 1;
\par       x(n+1) = x(n) + (-a*x(n)*dt) + (   a*y(n)*dt)
\par       y(n+1) = y(n) + ( b*x(n)*dt) - (     y(n)*dt) - (z(n)*x(n)*dt)
\par       z(n+1) = z(n) + (-c*z(n)*dt) + (x(n)*y(n)*dt)
\par     Parameters are dt, a, b, and c.
\par 
\par }{\b\f1 lorenz3d1
\par }{\f1     Lorenz one lobe attractor, 3D orbit (Rick Miranda and Emily Stone)
\par       z(0) = y(0) = z(0) = 1; norm = sqrt(x(n)^2 + y(n)^2)
\par       x(n+1) = x(n) + (-a*dt-dt)*x(n) + (a*dt-b*dt)*y(n)
\par          + (dt-a*dt)*norm + y(n)*dt*z(n)
\par       y(n+1) = y(n) + (b*dt-a*dt)*x(n) - (a*dt+dt)*y(n)
\par          + (b*dt+a*dt)*norm - x(n)*dt*z(n) - norm*z(n)*dt
\par       z(n+1) = z(n) +(y(n)*dt/2) - c*dt*z(n)
\par     Parameters are dt, a, b, and c.
\par 
\par }{\b\f1 lorenz3d3
\par }{\f1     Lorenz three lobe attractor, 3D orbit (Rick Miranda and Emily Stone)
\par       z(0) = y(0) = z(0) = 1; norm = sqrt(x(n)^2 + y(n)^2)
\par       x(n+1) = x(n) +(-(a*dt+dt)*x(n) + (a*dt-b*dt+z(n)*dt)*y(n))/3
\par           + ((dt-a*dt)*(x(n)^2-y(n)^2)
\par           + 2*(b*dt+a*dt-z(n)*dt)*x(n)*y(n))/(3*norm)
\par       y(n+1) = y(n) +((b*dt-a*dt-z(n)*dt)*x(n) - (a*dt+dt)*y(n))/3
\par           + (2*(a*dt-dt)*x(n)*y(n)
\par           + (b*dt+a*dt-z(n)*dt)*(x(n)^2-y(n)^2))/(3*norm)
\par       z(n+1) = z(n) +(3*x(n)*dt*x(n)*y(n)-y(n)*dt*y(n)^2)/2 - c*dt*z(n)
\par     Parameters are dt, a, b, and c.
\par 
\par }{\b\f1 lorenz3d4
\par }{\f1     Lorenz four lobe attractor, 3D orbit (Rick Miranda and Emily Stone)
\par       z(0) = y(0) = z(0) = 1;
\par       x(n+1) = x(n) +(-a*dt*x(n)^3
\par          + (2*a*dt+b*dt-z(n)*dt)*x(n)^2*y(n) + (a*dt-2*dt)*x(n)*y(n)^2
\par          + (z(n)*dt-b*dt)*y(n)^3) / (2 * (x(n)^2+y(n)^2))
\par       y(n+1) = y(n) +((b*dt-z(n)*dt)*x(n)^3 + (a*dt-2*dt)*x(n)^2*y(n)
\par          + (-2*a*dt-b*dt+z(n)*dt)*x(n)*y(n)^2
\par          - a*dt*y(n)^3) / (2 * (x(n)^2+y(n)^2))
\par       z(n+1) = z(n) +(2*x(n)*dt*x(n)^2*y(n) - 2*x(n)*dt*y(n)^3 - c*dt*z(n))
\par     Parameters are dt, a, b, and c.
\par 
\par }{\b\f1 lsystem
\par }{\f1     Using a turtle-graphics control language and starting with
\par     an initial axiom string, carries out string substitutions the
\par     specified number of times (the order), and plots the result.
\par 
\par }{\b\f1 lyapunov
\par }{\f1     Derived from the Bifurcation fractal, the Lyapunov plots the Lyapunov
\par     Exponent for a population model where the Growth parameter varies between
\par     two values in a periodic manner.
\par 
\par }{\b\f1 magnet1j
\par }{\f1       z(0) = pixel;
\par                 [  z(n)^2 + (c-1)  ] 2
\par       z(n+1) =  | ---------------- |
\par                 [  2*z(n) + (c-2)  ]
\par     Parameters: the real and imaginary parts of c
\par 
\par }{\b\f1 magnet1m
\par }{\f1       z(0) = 0; c = pixel;
\par                 [  z(n)^2 + (c-1)  ] 2
\par       z(n+1) =  | ---------------- |
\par                 [  2*z(n) + (c-2)  ]
\par     Parameters: the real & imaginary parts of perturbation of z(0)
\par 
\par }{\b\f1 magnet2j
\par }{\f1       z(0) = pixel;
\par                 [  z(n)^3 + 3*(C-1)*z(n) + (C-1)*(C-2)         ] 2
\par       z(n+1) =  | -------------------------------------------- |
\par                 [  3*(z(n)^2) + 3*(C-2)*z(n) + (C-1)*(C-2) + 1 ]
\par     Parameters: the real and imaginary parts of c
\par 
\par }{\b\f1 magnet2m
\par }{\f1       z(0) = 0; c = pixel;
\par                 [  z(n)^3 + 3*(C-1)*z(n) + (C-1)*(C-2)         ] 2
\par       z(n+1) =  | -------------------------------------------- |
\par                 [  3*(z(n)^2) + 3*(C-2)*z(n) + (C-1)*(C-2) + 1 ]
\par     Parameters: the real and imaginary parts of perturbation of z(0)
\par 
\par }{\b\f1 mandel
\par }{\f1     Classic Mandelbrot set fractal.
\par       z(0) = c = pixel;
\par       z(n+1) = z(n)^2 + c.
\par     Two parameters: real & imaginary perturbations of z(0)
\par 
\par }{\b\f1 mandel(fn||fn)
\par }{\f1       c = pixel;
\par       z(0) = p1
\par       if modulus(z(n)) < shift value, then
\par          z(n+1) = fn1(z(n)) + c,
\par       else
\par          z(n+1) = fn2(z(n)) + c.
\par     Five parameters: real, imaginary portions of p1, shift value,
\par                      fn1 and fn2.
\par 
\par }{\b\f1 mandelbrotmix4
\par }{\f1     From a Jim Muth favorite FOTD formula
\par       a=real(p1), b=imag(p1), d=real(p2), f=imag(p2),
\par       g=1/f, h=1/d, j=1/(f-b), z=(-a*b*g*h)^j,
\par       k=real(p3)+1, l=imag(p3)+100, c=fn1(pixel):
\par       z=k*((a*(z^b))+(d*(z^f)))+c
\par     Parameters: see above, sixth parameter used for bailout
\par 
\par }{\b\f1 mandelcloud
\par }{\f1     Displays orbits of Mandelbrot set:
\par       z(0) = c = pixel;
\par       z(n+1) = z(n)^2 + c.
\par     One parameter: number of intervals
\par 
\par }{\b\f1 mandel4
\par }{\f1     Special case of mandelzpower kept for speed.
\par       z(0) = c = pixel;
\par       z(n+1) = z(n)^4 + c.
\par     Parameters: real & imaginary perturbations of z(0)
\par 
\par }{\b\f1 mandelfn
\par }{\f1       z(0) = c = pixel;
\par       z(n+1) = c*fn(z(n)).
\par     Parameters: real & imaginary perturbations of z(0), and fn
\par 
\par }{\b\f1 manlam(fn||fn)
\par }{\f1       c = pixel;
\par       z(0) = p1
\par       if modulus(z(n)) < shift value, then
\par          z(n+1) = fn1(z(n)) * c, else
\par          z(n+1) = fn2(z(n)) * c.
\par     Five parameters: real, imaginary parts of p1, shift value, fn1, fn2.
\par 
\par }{\b\f1 Martin
\par }{\f1     Attractor fractal by Barry Martin - orbit in two dimensions.
\par       z(0) = y(0) = 0;
\par       x(n+1) = y(n) - sin(x(n))
\par       y(n+1) = a - x(n)
\par     Parameter is a (try a value near pi)
\par 
\par }{\b\f1 mandellambda
\par }{\f1       z(0) = .5; lambda = pixel;
\par       z(n+1) = lambda*z(n)*(1 - z(n)).
\par     Parameters: real & imaginary perturbations of z(0)
\par 
\par }{\b\f1 mandphoenix
\par }{\f1     z(0) = c = pixel, y(0) = 0;
\par     For degree = 0:
\par       z(n+1) = z(n)^2 + c.x + c.y*y(n), y(n+1) = z(n)
\par     For degree >= 2:
\par       z(n+1) = z(n)^degree + c.x*z(n)^(degree-1) + c.y*y(n)
\par       y(n+1) = z(n)
\par     For degree <= -3:
\par       z(n+1) = z(n)^|degree| + c.x*z(n)^(|degree|-2) + c.y*y(n)
\par       y(n+1) = z(n)
\par     Three parameters: real & imaginary perturbations of z(0), and degree.
\par 
\par }{\b\f1 mandphoenixclx
\par }{\f1     z(0) = c = pixel, y(0) = 0;
\par     For degree = 0:
\par       z(n+1) = z(n)^2 + c + p2*y(n), y(n+1) = z(n)
\par     For degree >= 2:
\par       z(n+1) = z(n)^degree + c*z(n)^(degree-1) + p2*y(n), y(n+1) = z(n)
\par     For degree <= -3:
\par       z(n+1) = z(n)^|degree| + c*z(n)^(|degree|-2) + p2*y(n), y(n+1) = z(n)
\par     Five parameters: real & imaginary perturbations of z(0), real &
\par       imaginary parts of p2, and degree.
\par 
\par }{\b\f1 manfn+exp
\par }{\f1     'Mandelbrot-Equivalent' for the julfn+exp fractal.
\par       z(0) = c = pixel;
\par       z(n+1) = fn(z(n)) + e^z(n) + C.
\par     Parameters: real & imaginary perturbations of z(0), and fn
\par 
\par }{\b\f1 manfn+zsqrd
\par }{\f1     'Mandelbrot-Equivalent' for the Julfn+zsqrd fractal.
\par       z(0) = c = pixel;
\par       z(n+1) = fn(z(n)) + z(n)^2 + c.
\par     Parameters: real & imaginary perturbations of z(0), and fn
\par 
\par }{\b\f1 manowar
\par }{\f1       c = z1(0) = z(0) = pixel;
\par       z(n+1) = z(n)^2 + z1(n) + c;
\par       z1(n+1) = z(n);
\par     Parameters: real & imaginary perturbations of z(0)
\par 
\par }{\b\f1 manowarj
\par }{\f1       z1(0) = z(0) = pixel;
\par       z(n+1) = z(n)^2 + z1(n) + c;
\par       z1(n+1) = z(n);
\par     Parameters: real & imaginary parts of c
\par 
\par }{\b\f1 manzpower
\par }{\f1     'Mandelbrot-Equivalent' for julzpower.
\par       z(0) = c = pixel;
\par       z(n+1) = z(n)^exp + c; try exp = e = 2.71828...
\par     Parameters: real & imaginary perturbations of z(0), real &
\par     imaginary parts of exponent exp.
\par 
\par }{\b\f1 manzzpwr
\par }{\f1     'Mandelbrot-Equivalent' for the julzzpwr fractal.
\par       z(0) = c = pixel
\par       z(n+1) = z(n)^z(n) + z(n)^exp + C.
\par     Parameters: real & imaginary perturbations of z(0), and exponent
\par 
\par }{\b\f1 marksjulia
\par }{\f1     A variant of the julia-lambda fractal.
\par       z(0) = pixel;
\par       z(n+1) = c^(exp-1)*z(n)^2 + c.
\par     Parameters: real & imaginary parts of c, and exponent
\par 
\par }{\b\f1 marksmandel
\par }{\f1     A variant of the mandel-lambda fractal.
\par       z(0) = c = pixel;
\par       z(n+1) = c^(exp-1)*z(n)^2 + c.
\par }\pard\plain \s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1     Parameters: real & imaginary parts of perturbations of z(0),
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1     and exponent
\par 
\par }{\b\f1 marksmandelpwr
\par }{\f1     The marksmandelpwr formula type generalized (it previously
\par     had fn=sqr hard coded).
\par       z(0) = pixel, c = z(0) ^ (z(0) - 1):
\par       z(n+1) = c * fn(z(n)) + pixel,
\par     Parameters: real and imaginary perturbations of z(0), and fn
\par 
\par }{\b\f1 newtbasin
\par }{\f1     Based on the Newton formula for finding the roots of z^p - 1.
\par     Pixels are colored according to which root captures the orbit.
\par       z(0) = pixel;
\par       z(n+1) = ((p-1)*z(n)^p + 1)/(p*z(n)^(p - 1)).
\par     Two parameters: the polynomial degree p, and a flag to turn
\par     on color stripes to show alternate iterations.
\par 
\par }{\b\f1 newton
\par }{\f1     Based on the Newton formula for finding the roots of z^p - 1.
\par     Pixels are colored according to the iteration when the orbit
\par     is captured by a root.
\par       z(0) = pixel;
\par       z(n+1) = ((p-1)*z(n)^p + 1)/(p*z(n)^(p - 1)).
\par     One parameter: the polynomial degree p.
\par 
\par }{\b\f1 phoenix
\par }{\f1     z(0) = pixel, y(0) = 0;
\par     For degree = 0: z(n+1) = z(n)^2 + p1.x + p2.x*y(n), y(n+1) = z(n)
\par     For degree >= 2:
\par      z(n+1) = z(n)^degree + p1.x*z(n)^(degree-1) + p2.x*y(n), y(n+1) = z(n)
\par     For degree <= -3:
\par      z(n+1) = z(n)^|degree| + p1.x*z(n)^(|degree|-2)
\par             + p2.x*y(n), y(n+1) = z(n)
\par     Three parameters: real parts of p1 & p2, and degree.
\par 
\par }{\b\f1 phoenixcplx
\par }{\f1     z(0) = pixel, y(0) = 0;
\par     For degree = 0: z(n+1) = z(n)^2 + p1 + p2*y(n), y(n+1) = z(n)
\par     For degree >= 2:
\par       z(n+1) = z(n)^degree + p1*z(n)^(degree-1) + p2*y(n), y(n+1) = z(n)
\par     For degree <= -3:
\par       z(n+1) = z(n)^|degree| + p1*z(n)^(|degree|-2) + p2*y(n), y(n+1) = z(n)
\par     Five parameters: real & imaginary parts of p1 & p2, and degree.
\par 
\par }{\b\f1 pickover
\par }{\f1     Orbit in three dimensions defined by:
\par       x(n+1) = sin(a*y(n)) - z(n)*cos(b*x(n))
\par       y(n+1) = z(n)*sin(c*x(n)) - cos(d*y(n))
\par       z(n+1) = sin(x(n))
\par     Parameters: a, b, c, and d.
\par 
\par }{\b\f1 plasma
\par }{\f1     Random, cloud-like formations.  Requires 4 or more colors.
\par     A recursive algorithm repeatedly subdivides the screen and
\par     colors pixels according to an average of surrounding pixels
\par     and a random color, less random as the grid size decreases.
\par     Four parameters: 'graininess' (0, 0.125 to 100, default = 2),
\par     old/new algorithm, seed value used, 16-bit out output selection.
\par 
\par }{\b\f1 popcorn
\par }{\f1     The orbits in 2D are plotted superimposed:
\par       x(0) = xpixel, y(0) = ypixel;
\par       x(n+1) = x(n) - real(h * fn1( y(n) + fn2(C * y(n) ))
\par                     - imag(h * fn3( x(n) + fn4(C * x(n) ))
\par       y(n+1) = y(n) - real(h * fn3( x(n) + fn4(C * x(n) ))
\par                     - imag(h * fn1( y(n) + fn2(C * y(n) ))
\par     Parameters: step size h, C, functions fn1..4 (original: sin,tan,sin,tan).
\par 
\par }{\b\f1 popcornjul
\par }{\f1     Julia using the generalized Pickover Popcorn formula:
\par       x(0) = xpixel, y(0) = ypixel;
\par       x(n+1) = x(n) - real(h * fn1( y(n) + fn2(C * y(n) ))
\par                     - imag(h * fn3( x(n) + fn4(C * x(n) ))
\par       y(n+1) = y(n) - real(h * fn3( x(n) + fn4(C * x(n) ))
\par                     - imag(h * fn1( y(n) + fn2(C * y(n) ))
\par     Parameters: step size h, C, functions fn1..4 (original: sin,tan,sin,tan).
\par 
\par }{\b\f1 quadruptwo
\par }{\f1     Quadruptwo attractor from Michael Peters - orbit in two dimensions.
\par       z(0) = y(0) = 0;
\par       x(n+1) = y(n) - sign(x(n)) * sin(ln(abs(b*x(n)-c)))
\par                                  * arctan(sqr(ln(abs(c*x(n)-b))))
\par       y(n+1) = a - x(n)
\par     Parameters are a, b, and c.
\par 
\par }{\b\f1 quatjul
\par }{\f1     Quaternion Julia set.
\par       q(0)   = (xpixel,ypixel,zj,zk)
\par       q(n+1) = q(n)*q(n) + c.
\par     Four parameters: c, ci, cj, ck
\par     c = (c1,ci,cj,ck)
\par 
\par }{\b\f1 quat
\par }{\f1     Quaternion Mandelbrot set.
\par       q(0)   = (0,0,0,0)
\par       q(n+1) = q(n)*q(n) + c.
\par     Two parameters: cj,ck
\par     c = (xpixel,ypixel,cj,ck)
\par 
\par }{\b\f1 rossler3D
\par }{\f1     Orbit in three dimensions defined by:
\par       x(0) = y(0) = z(0) = 1;
\par       x(n+1) = x(n) - y(n)*dt -   z(n)*dt
\par       y(n+1) = y(n) + x(n)*dt + a*y(n)*dt
\par       z(n+1) = z(n) + b*dt + x(n)*z(n)*dt - c*z(n)*dt
\par     Parameters are dt, a, b, and c.
\par 
\par }{\b\f1 sierpinski
\par }{\f1     Sierpinski gasket - Julia set producing a 'Swiss cheese triangle'
\par       z(n+1) = (2*x,2*y-1) if y > .5;
\par           else (2*x-1,2*y) if x > .5;
\par           else (2*x,2*y)
\par     No parameters.
\par 
\par }{\b\f1 spider
\par }{\f1       c(0) = z(0) = pixel;
\par       z(n+1) = z(n)^2 + c(n);
\par       c(n+1) = c(n)/2 + z(n+1)
\par     Parameters: real & imaginary perturbation of z(0)
\par 
\par }{\b\f1 sqr(1/fn)
\par }{\f1       z(0) = pixel;
\par       z(n+1) = (1/fn(z(n))^2
\par     One parameter: the function fn.
\par 
\par }{\b\f1 sqr(fn)
\par }{\f1       z(0) = pixel;
\par       z(n+1) = fn(z(n))^2
\par     One parameter: the function fn.
\par 
\par }{\b\f1 test
\par }{\f1     'test' point letting us (and you!) easily add fractal types via
\par     the c module testpt.c.  Default set up is a mandelbrot fractal.
\par     Four parameters: user hooks (not used by default testpt.c).
\par 
\par }{\b\f1 tetrate
\par }{\f1       z(0) = c = pixel;
\par       z(n+1) = c^z(n)
\par     Parameters: real & imaginary perturbation of z(0)
\par 
\par }{\b\f1 threeply
\par }{\f1     Threeply attractor by Michael Peters - orbit in two dimensions.
\par       z(0) = y(0) = 0;
\par       x(n+1) = y(n) - sign(x(n)) * (abs(sin(x(n))*cos(b)
\par                                     +c-x(n)*sin(a+b+c)))
\par       y(n+1) = a - x(n)
\par     Parameters are a, b, and c.
\par 
\par }{\b\f1 tim's_error
\par }{\f1     A serendipitous coding error in marksmandelpwr brings to life
\par     an ancient pterodactyl!  (Try setting fn to sqr.)
\par       z(0) = pixel, c = z(0) ^ (z(0) - 1):
\par       tmp = fn(z(n))
\par       real(tmp) = real(tmp) * real(c) - imag(tmp) * imag(c);
\par       imag(tmp) = real(tmp) * imag(c) - imag(tmp) * real(c);
\par       z(n+1) = tmp + pixel;
\par     Parameters: real & imaginary perturbations of z(0) and function fn
\par 
\par }{\b\f1 unity
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1       z(0) = pixel;
\par       x = real(z(n)), y = imag(z(n))
\par       One = x^2 + y^2;
\par       y = (2 - One) * x;
\par       x = (2 - One) * y;
\par       z(n+1) = x + i*y
\par     No parameters.
\par 
\par }{\b\f1 volterra-lotka
\par }{\f1     Volterra-Lotka fractal from The Beauty of Fractals
\par       x(0) = xpixel, y(0) = ypixel;
\par       dx/dt =  x - xy = f(x,y)
\par       dy/dt = -y + xy = g(x,y)
\par       x(new) = x + h/2 * [ f(x,y) + f[x + pf(x,y), y + pg(x,y)] ]
\par       y(new) = y + h/2 * [ g(x,y) + g[x + pf(x,y), y + pg(x,y)] ]
\par     Two parameters: h and p
\par     Recommended: zmag or bof60 inside coloring options
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  zoom_index}}${\footnote \pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Zooming in on an image}}+{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:040}}K{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{\f28 
 zooming;zoom in; zoom out; zoom bar}}}{\f1 
\par }{\b\f1 Zooming in on an Image}{\f1 
\par 
\par There are two different methods of generating and using "Zoom-Boxes".  Which method you use depends on which of the "Zoom Box" checkboxes you have selected using the "Views" men
uitem.  If you've never selected any of these checkboxes, the "Zoom In" option is in effect.
\par 
\par If you have the "Zoom In Box" or "Zoom Out Box" options enabled, Winfract's zoom box is activated in the following fashion:
\par 
\par With the "Zoom In Box" option activat
ed, move your mouse pointer to the center of the area you wish to zoom in on.  Press and hold down the left mouse button as you move the mouse away from that center point.  A "Zoom Box" will be displayed, changing in size as you move the mouse.  When you 
have the zoom box the size you want, let go of the left mouse button.
\par If you want to adjust the location of the zoom box at this point, move your mouse pointer inside the zoom box, press and hold down the left mouse button again, and move the mouse.  The zo
om box follows the mouse pointer until you let go of the left mouse button.
\par To activate the zoom, double-click the left mouse button with the mouse pointer inside the zoom box.  To disable the zoom box instead (say, you changed your mind, or the box isn't 
really the right size), double-click on the left mouse button with the mouse pointer positioned somewhere outside of the zoom box (pressing the ESCAPE key gets rid of the zoom box, too).
\par 
\par "Zoom Out" works just like "Zoom In", except that you will be zooming out - the zoom box is actually showing you where on the new image your current image will display.
\par 
\par If you have enabled the "Zoom-Bar" option, a vertical Zoom-Bar scroll-bar is displayed in addition to your fractal image.  The Zoom-Bar defaults to the mi
d-position, in which your zoom box exactly covers the area of your fractal image.  Moving the scroll-button up shrinks your zoom box (and makes it visible on the fractal image).  You can them move the zoom box around by moving your cursor inside the zoom 
box and then holding down your left mouse-button and moving the cursor and zoom box as a single unit.  Double-clicking the left mouse button will cause your image to be redrawn using your current zoom box coordinates.
\par 
\par You can also "Zoom Out" by moving the 
Zoom-Bar scroll-bar below the midpoint.  When you do this, the zoom box that is displayed is actually showing you where (and how small) your currently displayed image would be if you double-clicked the left mouse button at that point.  Moving the zoom box
 and double-clicking to perform the zoom is done the same way as when you are "zooming in".
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  julia_index}}${\footnote \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Mandelbrot/Julia Toggling}}+{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:043}}K{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{\f28 
 Mandelbrot/Julia toggling}}}{\f1  
\par }{\b\f1 Mandelbrot/Julia Toggling
\par }{\f1 
\par You can switch from a "Mandelbrot Set" image to its "Julia Set" at the location of the mouse cursor by clicking on the right mouse button.  When the corresponding "Julia Set" image is on the screen, click the right mouse button again to get the "Mandelbro
t Set" image back.  The terms "Mandelbrot Set" and "Julia Set" are in quotes because many fractal types (mandel4 and julia4, for instance) have this "Mandelbrot Set"/"Julia Set" relationship.   
\par 
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  cycling_index}}${\footnote \pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Color Cycling}}+{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:045}}K{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs15\fs16\up6 K}{\f28  cycling}}}{\f1 
\par }{\b\f1 Color Cycling}{\f1  
\par 
\par You start and stop Color-cycling mode using the Color-Cycling menu.  This menu also lets you determine the direction of the cycling (the designations "in" and "out" were arbitrarily picked based on how the effect looked on a single Mandelb
rot image), whether to just rotate the existing colors or generate new ones randomly, and (for random color-generation) whether the colors are to change with a low, medium, or high frequency. 
\par 
\par You can also use the following "}{\b\f1 Hot-keys}{\f1 " for color-cycling 
\par   spacebar - toggles color-cycling on and off 
\par   '<', '>' - shifts the palette "in" or "out" one color
\par   left, right arrows - turn on color-cycling and set the "direction" 
\par   up, down arrows - speed up or slow down the color-cycling speed
\par   ENTER - initiate random color-cycling with all new colors 
\par   (Note that Windows takes a second or so to "fire up" color-cycling,   so be patient when you press one of these keys.) 
\par 
\par Sorry, but at the current time color-cycling is restricted to display devices whose Window
s drivers are capable of palette manipulation - and the "stock" VGA driver distributed with Win 3.x doesn't have it!  In fact, at the moment the only Windows video drivers we've ever seen capable of palette manipulation have been 256-color drivers.   If W
i
nfract ever does find itself running with a palette-based 16-color video driver (it's theoretically possible), it will color-cycle only when its window has the input focus (temporarily converting the remainder of your Windows screen to black-and-white), a
nd return to the "stock" palette values when it loses this focus.   
\par 
\par \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 #}{\f28  distrib_index}}${\footnote \pard\plain 
\ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Distribution Policy}}+{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:065}}K{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs15\fs16\up6 K}{\f28  distribution policy;freeware;copyright;contacting authors}}}{\f1 
\par {\*\bkmkstart DDE_LINK2}{\*\bkmkstart DDE_LINK1}
\par }{\b\f1 Distribution Policy, Contacting the Authors, The Book }{\f1 
\par  
\par The Stone Soup Group is a loosely associated group of fanatic programmers.   Winfract (Fractint for Windows) like Fractint for DOS, is copyrighted freeware. Our motto is simple: }{\b\f1 Don't want money. Got money. Want admiration}{\f1 .  This means we 
encourage prolific use and distribution of Winfract not for money, but for the pleasure of knowing you enjoy it.  So play with it, change it, learn from the source code, put the fractals in your artwork, whatever.  But don't sell it or bundle it with your
 commercial product without permission.  That is illegal. 
\par 
\par }{\b\f1 Conditions on use}{\f1 : 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f1 Winfract (Fractint for Windows) like Fractint for DOS, is copyrighted freeware.  As such, it may be freely copied and distributed but may not be sold.}{\f1   Winfract may be distribu
ted by shareware and freeware distributors and a nominal distribution fee may be charged for media and handling.  Winfract may also be distributed on networks and BBSs.  Winfract may be used personally or in a business - if you can do your job better by u
sing Winfract, or using images from it, that's great!  Winfract may not be given away with commercial products without explicit permission from the Stone Soup Group.
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par There is no warranty of Winfract's suitability for any purpose, nor any acceptance of liability, express or implied.   
\par 
\par }{\b\f1 Contacting the Authors}{\f1 
\par 
\par Communication between the authors for development of the next version of Fractint takes place in the fractint mailing list.
\par 
\par }{\b\f1 {\*\bkmkend DDE_LINK2}{\*\bkmkend DDE_LINK1}Program Updates}{\f1 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 New versions of FRACTINT are uploaded to 
the Fractint developer's web site at www.fractint.org, and make their way to other systems from that point.  FRACTINT is available as two self-extracting archive files - FRAINT.EXE (executable & documentation) and FRASRC.EXE (source code).
\par 
\par The latest developer's version can also be found at www.fractint.org.
\par 
\par Many other sites tend to carry these files shortly after their initial release (although sometimes using different naming conventions).  Look for frainnn.zip (executable package) and frasrnnn.zip (sou
rce), where nnn is the release number. Major releases with two digit numbers have names such as fraintnn.zip and frasrcnn.zip.
\par 
\par On the Internet, try the Noel Giffin's Spanky Fractal Database. Using a Web browser, go to: }{\field{\*\fldinst {\f1  HYPERLINK "http://spanky.triumf.ca/pub/fractals/programs/ibmpc/frainxxx.zip" }{\f1 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000004100000068007400740070003a002f002f007300700061006e006b0079002e0074007200690075006d0066002e00630061002f007000750062002f006600720061006300740061006c0073002f00700072006f006700720061006d0073002f00690062006d00
700063002f0066007200610069006e007800780078002e007a00690070000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007300700061006e006b0079002e0074007200690075006d0066002e00630061002f007000750062002f006600720061006300740061006c0073002f0070
0072006f006700720061006d0073002f00690062006d00700063002f0066007200610069006e007800780078002e007a0069007000000000000000000000}}}{\fldrslt {\cs18\f1\ul\cf2 http://spanky.triumf.ca/pub/fractals/programs/ibmpc/frainxxx.zip}}}{\f1 
 where xxx is the release number.
\par 
\par Via FTP, login to spanky.triumf.ca as ANONYMOUS, and change directories to [pub.fractals.programs.ibmpc], then download frainxxx.zip. (The directory syntax is in VAX format.)
\par 
\par The X Windows port of Fractint was written by Ken Shirriff and is available via FTP from }{\field\fldedit{\*\fldinst {\f1  HYPERLINK "http://spanky.triumf.ca/pub/fractals/programs/unix/XFRACTxxx.zip\\\\" }{\f1 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000004200000068007400740070003a002f002f007300700061006e006b0079002e0074007200690075006d0066002e00630061002f007000750062002f006600720061006300740061006c0073002f00700072006f006700720061006d0073002f0075006e006900
78002f005800460052004100430054007800780078002e007a00690070005c000000e0c9ea79f9bace118c8200aa004ba90b8400000068007400740070003a002f002f007300700061006e006b0079002e0074007200690075006d0066002e00630061002f007000750062002f006600720061006300740061006c0073002f
00700072006f006700720061006d0073002f0075006e00690078002f005800460052004100430054007800780078002e007a00690070002f00000000000000000000}}}{\fldrslt {\cs18\f1\ul\cf2 http://spanky.triumf.ca/pub/fractals/programs/unix/XFRACTxxx.zip}}}{\f1 
 where xxx is the Xfractint release number.  Developer's versions of Xfractint are available at the Fractint developer's web site.
\par 
\par 
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 \page }{\cs15\fs16\up6 #{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs15\fs16\up6 #}{\f28  authors_index}}${\footnote \pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 $}{\f28  Who wrote this program?}}+{\footnote 
\pard\plain \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 +}{\f28  browse:070}}K{\footnote \pard\plain \ql \li0\ri0\sl240\slmult0
\nowidctlpar\faauto\rin0\lin0\itap0 \f6\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs15\fs16\up6 K}{\f28  authors}}}{\f1 
\par }{\b\f1 A list of Winfract and Fractint Authors }{\f1 
\par 
\par Winfract (Fractint for Windows) was originally ported from Fractint-for-DOS by Bert Tyler.  This is the first 
Windows program that Bert ever wrote,which goes a long way towards explaining a lot of the bugs.  Bert's task was made a lot easier by Pieter Branderhorst, who separated the MSDOS-specific code from Fractint-for-DOS's fractal generator modules, making a W
indows port of the package possible.  Mark Peterson helped track down and eliminate a lot of the bugs that were in the original program, and has since added several new options which take advantage of the capabilities of the Windows environment.
\par 
\par The Winfract source lay dormant for many years, and was finally brought up to the current version of Fractint-for-DOS by Jonathan Osuch.
\par 
\par Fractint for Windows is based heavily on (and uses the fractal generator engines straight out of) Fractint-for-DOS.  A partial list of the authors of Fractint-for-DOS, taken from Fractint version 20.5, includes: 
\par 
\par ------------------  Primary Authors (this changes over time)  ----------------- 
\par Timothy Wegner\tab twegner AT fractint.org
\par Jonathan Osuch\tab josuch AT fractint.org
\par                  ---------  Contributing Authors ---------- 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par  Michael Abrash\tab \tab 360x480x256, 320x400x256 VGA video modes
\par  Rees Acheson\tab \tab (Author of MandelB) pentium speedups
\par  Joseph Albrecht\tab Tandy video, CGA video speedup
\par  Kevin Allen\tab \tab Finite attractor, bifurcation engine
\par  Humberto Baptista\tab passes=d, latoocarfian type
\par  Steve Bennett\tab \tab restore-from-disk logic
\par  Rob Beyer\tab \tab Barnsley IFS, Lorenz fractals
\par  Francois Blais\tab \tab Lyapunov Fractals, LYAPUNOV.MAP
\par  Scott D. Boyd\tab \tab Xfractint user interface cleanup
\par  Dennis Bragg\tab \tab DXF Raytracing output option
\par  Juan J. Buhler\tab \tab Diffusion options, inverse Julia type
\par  Mike Burkey\tab \tab 376x564x256, 400x564x256, and 832x612x256 VGA video modes
\par  Robin Bussell\tab \tab Fractal browser and evolver, past primary author
\par  John Bridges\tab \tab superVGA support, 360x480x256 mode
\par  Fulvio Cappelli\tab \tab ants options and speedup
\par  Charlie Chernohorsky\tab Virtual VESA screen sizes & speedup
\par  Brian Corbino\tab \tab Tandy 1000 640x200x16 video mode
\par  Lee Crocker\tab \tab Fast Newton, Inversion, Decomposition..
\par  Monte Davis\tab \tab Documentation
\par  Paul De Leeuw\tab \tab RDS (Random Dot Stereogram) Feature
\par  Jean-Pierre Demailly\tab Xfractint truecolor
\par  Chuck Ebbert\tab \tab cmprsd & sqrt logmap, fpu speedups, fast parser
\par  Dan Farmer\tab \tab orbits enhancements
\par  Richard Finegold\tab 8/16/../256-Way Decomposition option
\par  Frank Fussenegger\tab Mandelbrot speedups
\par  Sylvie Gallet\tab \tab Formula and math wizard
\par  Mike Gelvin\tab \tab Mandelbrot speedups
\par  Luciano Genero\tab ants options and speedup
\par  Lawrence Gozum\tab Tseng 640x400x256 Video Mode
\par  David Guenther\tab Boundary Tracing algorithm
\par  Jay Hill\tab \tab \tab Windows notes
\par  Mike Kaufman\tab \tab mouse support, other features
\par  Norman Hills\tab \tab Ranges option
\par  Richard Hughes\tab "inside=", "outside=" coloring options
\par  Bill Jemison\tab \tab orbitsave=sound option
\par  Damien M. Jones\tab Windows notes, web hosting
\par  Wesley Loewer\tab \tab Arbitrary precision, past primary author
\par  Adrian Mariano\tab \tab Diffusion & L-Systems
\par  Charles Marslett\tab VESA video and IIT math chip support
\par  George Martin\tab \tab Formula parser, past primary author
\par  Andrew McCarthy\tab European keyboard support
\par  Joe McLain\tab \tab TARGA Support, color-map files
\par  Bob Montgomery\tab (Author of VPIC) Fast text I/O routines
\par  Bret Mulvey\tab \tab plasma clouds
\par  Roy Murphy\tab \tab Lyapunov Fractals
\par  Ethan Nagel\tab \tab Palette editor, integrated help/doc system
\par  Yavuz Onder\tab \tab Postscript printer driver
\par  Kyle Powell\tab \tab 8514/A Support
\par  Mark Peterson\tab \tab Parser, julibrot, past primary author
\par  Marc Reinig\tab \tab Lots of 3D options
\par  Pieter Branderhorst\tab Solid guessing, menus, past primary author
\par  Michael Sargent\tab Volterra-Lotka, escher_julia fractals
\par  Matt Saucier\tab \tab Printer Support
\par  Herb Savage\tab \tab 'inside=bof60', 'inside=bof61' options
\par  Ken Shirriff\tab \tab Quaternions, CA, Xfractint port
\par  Lee Skinner\tab \tab Tetrate fractal types and more
\par  Michael Snyder\tab \tab julia inverse and Julia-In-A-Window using MIIM
\par  Dean Souleles\tab \tab Hercules Support
\par  Kurt Sowa\tab \tab Color Printer Support
\par  Hugh Steele\tab \tab cyclerange feature
\par  Iain Stirling\tab \tab Inside=fmod and outside=fmod
\par  John Swenson\tab \tab Postscript printer features
\par  Chris Taylor\tab \tab Floating&Fixed-point algorithm speedups, Tesseral Option
\par  Scott Taylor\tab \tab PostScript, Kam Torus, many fn types.
\par  Rich Thomson\tab \tab Xfractint truecolor support, mailing list
\par  Bill Townsend\tab \tab Mandelbrot Speedups
\par  Bert Tyler\tab \tab Original Fractint/Fract386 Author 
\par  Paul Varner\tab \tab Extended Memory support for Disk Video
\par  Dave Warker\tab \tab Integer Mandelbrot Fractals concept
\par  Aaron Williams\tab \tab Register-compatible 8514/A code
\par  Phil Wilson\tab \tab Distance Estimator, Bifurcation fractals
\par  Nicholas Wilt\tab \tab Lsystem speedups
\par  Richard Wilton\tab \tab Tweaked VGA Video modes
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1 
\par 
\par }}